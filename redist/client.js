// Generated by Haxe 4.0.0 (git build development @ 476d18054)
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Area = function(e,r,getX,getY) {
	this.color = 16777215;
	Area.ALL.push(this);
	this.owner = e;
	this.radius = r;
	this.getX = getX;
	this.getY = getY;
};
$hxClasses["Area"] = Area;
Area.__name__ = ["Area"];
Area.prototype = {
	contains: function(x,y) {
		var ax = this.getX();
		var ay = this.getY();
		return Math.sqrt((ax - x) * (ax - x) + (ay - y) * (ay - y)) <= this.radius;
	}
	,__class__: Area
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = ["hxd","Res"];
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	return hxd_res_Loader.currentInstance;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = ["hxd","res","Loader"];
hxd_res_Loader.prototype = {
	exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var _this = this.cache;
		var res = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,res);
			} else {
				_this1.h[path] = res;
			}
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var mt_deepnight_Sfx = function(s) {
	this.sound = s;
	this.volume = 1;
	if(mt_deepnight_Sfx.getGlobalGroup(this.groupId).group != null) {
		mt_deepnight_Sfx.getGlobalGroup(this.groupId).group.volume = 1;
	}
	this.groupId = 0;
};
$hxClasses["mt.deepnight.Sfx"] = mt_deepnight_Sfx;
mt_deepnight_Sfx.__name__ = ["mt","deepnight","Sfx"];
mt_deepnight_Sfx.getGlobalGroup = function(id) {
	if(!mt_deepnight_Sfx.GLOBAL_GROUPS.h.hasOwnProperty(id)) {
		var this1 = mt_deepnight_Sfx.GLOBAL_GROUPS;
		var value = new mt_deepnight__$Sfx_GlobalGroup(id);
		this1.h[id] = value;
	}
	return mt_deepnight_Sfx.GLOBAL_GROUPS.h[id];
};
mt_deepnight_Sfx.setGroupVolume = function(id,v) {
	var _this = mt_deepnight_Sfx.getGlobalGroup(id);
	_this.volume = v < 0 ? 0 : v > 1 ? 1 : v;
	if(!_this.muted) {
		_this.group.volume = v;
	}
};
mt_deepnight_Sfx.toggleMuteGroup = function(id) {
	var g = mt_deepnight_Sfx.getGlobalGroup(id);
	g.set_muted(!g.muted);
};
mt_deepnight_Sfx.prototype = {
	play: function(loop,vol) {
		if(loop == null) {
			loop = false;
		}
		if(vol != null) {
			this.volume = vol < 0 ? 0 : vol > 1 ? 1 : vol;
			if(mt_deepnight_Sfx.getGlobalGroup(this.groupId).group != null) {
				mt_deepnight_Sfx.getGlobalGroup(this.groupId).group.volume = vol;
			}
		}
		this.sound.play(loop,this.volume,null,mt_deepnight_Sfx.getGlobalGroup(this.groupId).group);
		return this;
	}
	,playOnGroup: function(gid,loop,vol) {
		if(loop == null) {
			loop = false;
		}
		this.groupId = gid;
		this.play(loop,vol);
		return this;
	}
	,__class__: mt_deepnight_Sfx
};
var mt_deepnight__$Sfx_GlobalGroup = function(id) {
	this.id = id;
	this.volume = 1;
	this.group = new hxd_snd_SoundGroup("global" + id);
};
$hxClasses["mt.deepnight._Sfx.GlobalGroup"] = mt_deepnight__$Sfx_GlobalGroup;
mt_deepnight__$Sfx_GlobalGroup.__name__ = ["mt","deepnight","_Sfx","GlobalGroup"];
mt_deepnight__$Sfx_GlobalGroup.prototype = {
	set_muted: function(v) {
		this.muted = v;
		if(v) {
			this.group.volume = 0;
		} else {
			this.group.volume = this.volume;
		}
		return v;
	}
	,__class__: mt_deepnight__$Sfx_GlobalGroup
};
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = ["hxd","snd","SoundGroup"];
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var Assets = function() { };
$hxClasses["Assets"] = Assets;
Assets.__name__ = ["Assets"];
Assets.init = function() {
	mt_deepnight_Sfx.setGroupVolume(0,1);
	mt_deepnight_Sfx.setGroupVolume(1,0.7);
	Assets.music = Assets.SBANK.music();
	Assets.music.playOnGroup(1,true);
	Assets.gameElements = mt_heaps_slib_assets_Atlas.load("gameElements.atlas");
	Assets.gameElements.__defineAnim("heroAimShoot",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("heroBlindShoot",[0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("heroHit",[0,0,0,0,0,0,0,0]);
	Assets.gameElements.__defineAnim("heroDeathFly",[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("heroRun",[0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5]);
	Assets.gameElements.__defineAnim("heroReload",[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5]);
	Assets.gameElements.__defineAnim("aAimShoot",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("aBlindShoot",[0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("aHit",[0,0,0,0,0,0,0,0]);
	Assets.gameElements.__defineAnim("aDeathFly",[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("aRun",[0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5]);
	Assets.gameElements.__defineAnim("bAimShoot",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("bBlindShoot",[0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("bHit",[0,0,0,0,0,0,0,0]);
	Assets.gameElements.__defineAnim("bDeathFly",[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("bRun",[0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5]);
	Assets.gameElements.__defineAnim("dancingA",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("dancingB",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.gameElements.__defineAnim("dancingC",[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]);
	Assets.font = hxd_Res.get_loader().loadCache("minecraftiaOutline.fnt",hxd_res_BitmapFont).toFont();
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = ["h3d","IDrawable"];
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = ["hxd","App"];
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.tmod);
		if(this.isDisposed) {
			return;
		}
		this.s2d.setElapsedTime(hxd_Timer.tmod / 60);
		this.s3d.setElapsedTime(hxd_Timer.tmod / 60);
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Boot = function() {
	this.speed = 1.;
	hxd_App.call(this);
};
$hxClasses["Boot"] = Boot;
Boot.__name__ = ["Boot"];
Boot.main = function() {
	new Boot();
};
Boot.__super__ = hxd_App;
Boot.prototype = $extend(hxd_App.prototype,{
	init: function() {
		Boot.ME = this;
		this.engine.backgroundColor = -16777216 | Main.BG;
		this.onResize();
		new Main();
	}
	,onResize: function() {
		hxd_App.prototype.onResize.call(this);
		mt_Process.resizeAll();
	}
	,update: function(dt) {
		hxd_App.prototype.update.call(this,dt);
		if(this.speed > 0) {
			mt_heaps_slib_SpriteLib.DT = dt * this.speed;
			mt_Process.updateAll(dt * this.speed);
		}
	}
	,__class__: Boot
});
var CPoint = function(x,y) {
	this.cy = 0;
	this.cx = 0;
	this.cx = x;
	this.cy = y;
};
$hxClasses["CPoint"] = CPoint;
CPoint.__name__ = ["CPoint"];
CPoint.prototype = {
	__class__: CPoint
};
var h2d_Sprite = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Sprite"] = h2d_Sprite;
h2d_Sprite.__name__ = ["h2d","Sprite"];
h2d_Sprite.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5 = dx * this.matA + dy * this.matC + rX;
		var y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return (p instanceof h2d_Scene) ? p : null;
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onParentChanged();
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Sprite.nullDrawable == null) {
			h2d_Sprite.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Sprite.nullDrawable.absX = this.absX;
		h2d_Sprite.nullDrawable.absY = this.absY;
		h2d_Sprite.nullDrawable.matA = this.matA;
		h2d_Sprite.nullDrawable.matB = this.matB;
		h2d_Sprite.nullDrawable.matC = this.matC;
		h2d_Sprite.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Sprite.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var oldA_x = _this.x;
		var oldA_y = _this.y;
		var oldA_z = _this.z;
		var oldA_w = _this.w;
		var _this1 = shader.filterMatrixB__;
		var oldB_x = _this1.x;
		var oldB_y = _this1.y;
		var oldB_z = _this1.z;
		var oldB_w = _this1.w;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		_this2.x = invA;
		_this2.y = invC;
		_this2.z = invX;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		_this3.x = invB;
		_this3.y = invD;
		_this3.z = invY;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		if(finalTile == null) {
			return;
		}
		ctx.globalAlpha = oldAlpha * this.alpha;
		this.emitTile(ctx,finalTile);
		ctx.globalAlpha = oldAlpha;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g11 = 0;
				var _g2 = nchilds;
				while(_g11 < _g2) {
					var i = _g11++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,getChildIndex: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				return i;
			}
		}
		return -1;
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Sprite
};
var h2d_Console = function(font,parent) {
	this.shortKeyChar = 47;
	this.logDY = 0;
	var _gthis = this;
	h2d_Sprite.call(this,parent);
	this.height = font.lineHeight + 2;
	this.logTxt = new h2d_HtmlText(font,this);
	var _this = this.logTxt;
	_this.posChanged = true;
	_this.x = 2;
	this.logTxt.dropShadow = { dx : 0, dy : 1, color : 0, alpha : 0.5};
	this.logTxt.set_visible(false);
	this.logs = [];
	this.logIndex = -1;
	this.bg = new h2d_Bitmap(h2d_Tile.fromColor(0,1,1,0.5),this);
	this.bg.set_visible(false);
	this.tf = new h2d_TextInput(font,this.bg);
	this.tf.onKeyDown = $bind(this,this.handleKey);
	this.tf.onFocusLost = function(_) {
		_gthis.hide();
	};
	var _this1 = this.tf;
	_this1.posChanged = true;
	_this1.x = 2;
	var _this2 = this.tf;
	_this2.posChanged = true;
	_this2.y = 1;
	this.tf.set_textColor(-1);
	this.commands = new haxe_ds_StringMap();
	this.aliases = new haxe_ds_StringMap();
	this.addCommand("help","Show help",[{ name : "command", t : h2d_ConsoleArg.AString, opt : true}],$bind(this,this.showHelp));
	this.addCommand("cls","Clear console",[],function() {
		_gthis.logs = [];
		_gthis.logTxt.set_text("");
	});
	this.addAlias("?","help");
};
$hxClasses["h2d.Console"] = h2d_Console;
h2d_Console.__name__ = ["h2d","Console"];
h2d_Console.__super__ = h2d_Sprite;
h2d_Console.prototype = $extend(h2d_Sprite.prototype,{
	addCommand: function(name,help,args,callb) {
		var _this = this.commands;
		var value = { help : help == null ? "" : help, args : args, callb : callb};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,addAlias: function(name,command) {
		var _this = this.aliases;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,command);
		} else {
			_this.h[name] = command;
		}
	}
	,onAdd: function() {
		h2d_Sprite.prototype.onAdd.call(this);
		this.getScene().stage.addEventTarget($bind(this,this.onEvent));
	}
	,onRemove: function() {
		this.getScene().stage.removeEventTarget($bind(this,this.onEvent));
		h2d_Sprite.prototype.onRemove.call(this);
	}
	,onEvent: function(e) {
		var _g = e.kind;
		switch(_g[1]) {
		case 5:
			if(this.logTxt.visible) {
				this.logDY -= this.tf.font.lineHeight * e.wheelDelta * 3;
				if(this.logDY < 0) {
					this.logDY = 0;
				}
				if(this.logDY > this.logTxt.get_textHeight()) {
					this.logDY = this.logTxt.get_textHeight();
				}
				e.propagate = false;
			}
			break;
		case 11:
			if(e.charCode == this.shortKeyChar && !this.bg.visible) {
				this.show();
			}
			break;
		default:
		}
	}
	,showHelp: function(command) {
		var _gthis = this;
		var all;
		if(command == null) {
			all = Lambda.array({ iterator : function() {
				return _gthis.commands.keys();
			}});
			all.sort(Reflect.compare);
			HxOverrides.remove(all,"help");
			all.push("help");
		} else {
			var _this = this.aliases;
			if(__map_reserved[command] != null ? _this.existsReserved(command) : _this.h.hasOwnProperty(command)) {
				var _this1 = this.aliases;
				command = __map_reserved[command] != null ? _this1.getReserved(command) : _this1.h[command];
			}
			var _this2 = this.commands;
			if(!(__map_reserved[command] != null ? _this2.existsReserved(command) : _this2.h.hasOwnProperty(command))) {
				throw new js__$Boot_HaxeError("Command not found \"" + command + "\"");
			}
			all = [command];
		}
		var _g = 0;
		while(_g < all.length) {
			var cmdName = all[_g];
			++_g;
			var _this3 = this.commands;
			var c = __map_reserved[cmdName] != null ? _this3.getReserved(cmdName) : _this3.h[cmdName];
			var str = "/" + cmdName;
			var a = this.aliases.keys();
			while(a.hasNext()) {
				var a1 = a.next();
				var _this4 = this.aliases;
				if((__map_reserved[a1] != null ? _this4.getReserved(a1) : _this4.h[a1]) == cmdName) {
					str += "|" + a1;
				}
			}
			var _g1 = 0;
			var _g2 = c.args;
			while(_g1 < _g2.length) {
				var a2 = _g2[_g1];
				++_g1;
				var astr = a2.name;
				var _g3 = a2.t;
				switch(_g3[1]) {
				case 0:case 1:
					astr += ":" + HxOverrides.substr(a2.t[0],1,null);
					break;
				case 2:
					break;
				case 3:
					astr += "=0|1";
					break;
				case 4:
					var values = _g3[2];
					astr += "=" + values.join("|");
					break;
				}
				str += " " + (a2.opt ? "[" + astr + "]" : astr);
			}
			if(c.help != "") {
				str += " : " + c.help;
			}
			this.log(str);
		}
	}
	,isActive: function() {
		return this.bg.visible;
	}
	,hide: function() {
		this.bg.set_visible(false);
		this.tf.set_text("");
		this.tf.cursorIndex = -1;
	}
	,show: function() {
		this.bg.set_visible(true);
		this.tf.focus();
		this.tf.cursorIndex = this.tf.text.length;
		this.logIndex = -1;
	}
	,handleKey: function(e) {
		if(!this.bg.visible) {
			return;
		}
		var _g = e.keyCode;
		switch(_g) {
		case 13:case 108:
			var cmd = this.tf.text;
			this.tf.set_text("");
			this.handleCommand(cmd);
			if(!this.logTxt.visible) {
				this.bg.set_visible(false);
			}
			e.cancel = true;
			return;
		case 27:
			this.hide();
			break;
		case 38:
			if(this.logs.length == 0 || this.logIndex == 0) {
				return;
			}
			if(this.logIndex == -1) {
				this.curCmd = this.tf.text;
				this.logIndex = this.logs.length - 1;
			} else {
				this.logIndex--;
			}
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		case 40:
			if(this.tf.text == this.curCmd) {
				return;
			}
			if(this.logIndex == this.logs.length - 1) {
				this.tf.set_text(this.curCmd == null ? "" : this.curCmd);
				this.tf.cursorIndex = this.tf.text.length;
				this.logIndex = -1;
				return;
			}
			this.logIndex++;
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		}
	}
	,handleCommand: function(command) {
		command = StringTools.trim(command);
		if(HxOverrides.cca(command,0) == 47) {
			command = HxOverrides.substr(command,1,null);
		}
		if(command == "") {
			this.hide();
			return;
		}
		this.logs.push(command);
		this.logIndex = -1;
		var errorColor = 12582912;
		var args = [];
		var c = "";
		var i = 0;
		var readString = function(endChar) {
			var string = "";
			while(i < command.length) {
				var c1 = i += 1;
				c = command.charAt(c1);
				if(c == endChar) {
					i += 1;
					return string;
				}
				string += c;
			}
			return null;
		};
		var last = "";
		while(i < command.length) {
			c = command.charAt(i);
			switch(c) {
			case "\t":case " ":
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c2 = i += 1;
					c = command.charAt(c2);
				}
				i -= 1;
				args.push(last);
				last = "";
				break;
			case "\"":case "'":
				var string1 = readString(c);
				if(string1 == null) {
					this.log("Bad formated string",errorColor);
					return;
				}
				args.push(string1);
				last = "";
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c3 = i += 1;
					c = command.charAt(c3);
				}
				i -= 1;
				break;
			default:
				last += c;
			}
			i += 1;
		}
		args.push(last);
		var cmdName = args[0];
		var _this = this.aliases;
		if(__map_reserved[cmdName] != null ? _this.existsReserved(cmdName) : _this.h.hasOwnProperty(cmdName)) {
			var _this1 = this.aliases;
			cmdName = __map_reserved[cmdName] != null ? _this1.getReserved(cmdName) : _this1.h[cmdName];
		}
		var _this2 = this.commands;
		var cmd = __map_reserved[cmdName] != null ? _this2.getReserved(cmdName) : _this2.h[cmdName];
		if(cmd == null) {
			this.log("Unknown command \"" + cmdName + "\"",errorColor);
			return;
		}
		var vargs = [];
		var _g1 = 0;
		var _g = cmd.args.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			var a = cmd.args[i1];
			var v = args[i1 + 1];
			if(v == null) {
				if(a.opt) {
					vargs.push(null);
					continue;
				}
				this.log("Missing argument " + a.name,errorColor);
				return;
			}
			var _g2 = a.t;
			switch(_g2[1]) {
			case 0:
				var i2 = Std.parseInt(v);
				if(i2 == null) {
					this.log("" + v + " should be Int for argument " + a.name,errorColor);
					return;
				}
				vargs.push(i2);
				break;
			case 1:
				var f = parseFloat(v);
				if(isNaN(f)) {
					this.log("" + v + " should be Float for argument " + a.name,errorColor);
					return;
				}
				vargs.push(f);
				break;
			case 2:
				vargs.push(cmd.args.length == 1 ? StringTools.trim(HxOverrides.substr(command,args[0].length,null)) : v);
				break;
			case 3:
				switch(v) {
				case "1":case "true":
					vargs.push(true);
					break;
				case "0":case "false":
					vargs.push(false);
					break;
				default:
					this.log("" + v + " should be Bool for argument " + a.name,errorColor);
					return;
				}
				break;
			case 4:
				var values = _g2[2];
				var found = false;
				var _g21 = 0;
				while(_g21 < values.length) {
					var v2 = values[_g21];
					++_g21;
					if(v == v2) {
						found = true;
						vargs.push(v2);
					}
				}
				if(!found) {
					this.log("" + v + " should be [" + values.join("|") + "] for argument " + a.name,errorColor);
					return;
				}
				break;
			}
		}
		try {
			cmd.callb.apply(null,vargs);
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				this.log("ERROR " + e1,errorColor);
			} else {
				throw e;
			}
		}
	}
	,log: function(text,color) {
		if(color == null) {
			color = this.tf.textColor;
		}
		var oldH = this.logTxt.get_textHeight();
		this.logTxt.set_text(this.logTxt.text + ("<font color=\"#" + StringTools.hex(color & 16777215,6) + "\">" + StringTools.htmlEscape(text) + "</font><br/>"));
		if(this.logDY != 0) {
			this.logDY += this.logTxt.get_textHeight() - oldH;
		}
		this.logTxt.alpha = 1;
		this.logTxt.set_visible(true);
		this.lastLogTime = new Date().getTime() / 1000;
	}
	,sync: function(ctx) {
		var scene = ctx.scene;
		if(scene != null) {
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = scene.height - this.height;
			this.width = scene.width;
			this.tf.set_maxWidth(this.width);
			this.bg.tile.scaleToSize(this.width,this.height);
		}
		var log = this.logTxt;
		if(log.visible) {
			var v = this.bg.y - log.get_textHeight() + this.logDY;
			log.posChanged = true;
			log.y = v;
			var dt = new Date().getTime() / 1000 - this.lastLogTime;
			if(dt > h2d_Console.HIDE_LOG_TIMEOUT && !this.bg.visible) {
				log.alpha -= ctx.elapsedTime * 4;
				if(log.alpha <= 0) {
					log.set_visible(false);
				}
			}
		}
		h2d_Sprite.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_Console
});
var Console = function() {
	var _gthis = this;
	h2d_Console.call(this,Assets.font);
	h2d_Console.HIDE_LOG_TIMEOUT = 30;
	Console.ME = this;
	Main.ME.root.addChildAt(this,Const.DP_UI);
	mt_deepnight_Lib.redirectTracesToH2dConsole(this);
	this.flags = new haxe_ds_StringMap();
	this.addCommand("fps",null,[],function(v) {
		_gthis.set("fps",!_gthis.has("fps"));
	});
};
$hxClasses["Console"] = Console;
Console.__name__ = ["Console"];
Console.__super__ = h2d_Console;
Console.prototype = $extend(h2d_Console.prototype,{
	set: function(k,v) {
		var _this = this.flags;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,v);
		} else {
			_this.h[k] = v;
		}
		return;
	}
	,has: function(k) {
		var _this = this.flags;
		return (__map_reserved[k] != null ? _this.getReserved(k) : _this.h[k]) == true;
	}
	,__class__: Console
});
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = ["Const"];
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Entity = function(x,y) {
	this.diminishingUses = new haxe_ds_StringMap();
	this.lastHitDir = 0;
	this.isAffectBySlowMo = true;
	this.hasColl = true;
	this.dir = 1;
	this.gravity = 0.02;
	this.frict = 0.9;
	this.dy = 0.;
	this.dx = 0.;
	this.yr = 0.;
	this.xr = 0.;
	this.cy = 0;
	this.cx = 0;
	this.destroyed = false;
	var _gthis = this;
	this.uid = Const.UNIQ++;
	Entity.ALL.push(this);
	this.lifeBar = new h2d_Flow();
	Game.ME.scroller.addChildAt(this.lifeBar,Const.DP_UI);
	this.lifeBar.set_horizontalSpacing(1);
	this.lifeBar.set_visible(false);
	this.cd = new mt_Cooldown(Const.FPS);
	this.radius = Const.GRID * 0.6;
	this.setPosCase(x,y);
	this.initLife(3);
	this.skills = [];
	this.spr = new mt_heaps_slib_HSprite(Assets.gameElements);
	Game.ME.scroller.addChildAt(this.spr,Const.DP_PROPS);
	var _this = this.spr.pivot;
	_this.centerFactorX = 0.5;
	_this.centerFactorY = 1;
	_this.usingFactor = true;
	_this.isUndefined = false;
	this.spr.set_colorAdd(this.cAdd = new h3d_Vector());
	this.head = new Area(this,6,function() {
		return _gthis.get_headX();
	},function() {
		return _gthis.get_headY();
	});
	this.head.color = 16711680;
	this.torso = new Area(this,8,function() {
		return (_gthis.get_headX() + (_gthis.cx + _gthis.xr) * Const.GRID) * 0.5;
	},function() {
		return (_gthis.get_headY() + (_gthis.cy + _gthis.yr) * Const.GRID - 4) * 0.5;
	});
	this.torso.color = 33023;
	this.legs = new Area(this,5,function() {
		return (_gthis.cx + _gthis.xr) * Const.GRID;
	},function() {
		return (_gthis.cy + _gthis.yr) * Const.GRID - 4;
	});
	this.legs.color = 10311135;
};
$hxClasses["Entity"] = Entity;
Entity.__name__ = ["Entity"];
Entity.prototype = {
	get_headX: function() {
		return (this.cx + this.xr) * Const.GRID;
	}
	,get_headY: function() {
		return (this.cy + this.yr) * Const.GRID - 22;
	}
	,get_shootX: function() {
		return (this.cx + this.xr) * Const.GRID + this.dir * 11;
	}
	,get_shootY: function() {
		return (this.cy + this.yr) * Const.GRID - this.radius * 0.8;
	}
	,isBlockingHeroMoves: function() {
		return false;
	}
	,initLife: function(v) {
		this.life = this.maxLife = v;
		this.updateLifeBar();
	}
	,updateLifeBar: function() {
		this.lifeBar.removeChildren();
		var _g1 = 0;
		var _g = this.maxLife;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.lifeBar;
			var s = new mt_heaps_slib_HSprite(Assets.gameElements,"dot",0);
			if(p != null) {
				p.addChild(s);
			}
			var _this = s.pivot;
			_this.centerFactorX = 0.;
			_this.centerFactorY = 0.;
			_this.usingFactor = true;
			_this.isUndefined = false;
			var e = s;
			e.posChanged = true;
			e.scaleY = 2;
			var _this1 = e.color;
			var c = (255. | 0) << 24 | (i + 1 <= this.life ? 16777215 : 13369344);
			_this1.x = (c >> 16 & 255) / 255;
			_this1.y = (c >> 8 & 255) / 255;
			_this1.z = (c & 255) / 255;
			_this1.w = (c >>> 24) / 255;
		}
	}
	,isCoveredFrom: function(source) {
		if(source == null) {
			return false;
		} else {
			var tmp;
			if(this.cover != null) {
				var _this = this.cover;
				tmp = _this.life > 0 && !_this.destroyed;
			} else {
				tmp = false;
			}
			if(tmp) {
				var e = this.cover;
				return ((source.cx + source.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) == ((e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1);
			} else {
				return false;
			}
		}
	}
	,hit: function(dmg,source,ignoreCover) {
		if(ignoreCover == null) {
			ignoreCover = false;
		}
		if(source != null) {
			this.lastHitDir = (this.cx + this.xr) * Const.GRID <= (source.cx + source.xr) * Const.GRID ? -1 : 1;
		}
		if(dmg <= 0 || !(this.life > 0 && !this.destroyed)) {
			return false;
		}
		if(!ignoreCover && this.isCoveredFrom(source)) {
			this.cover.hit(dmg,source);
			return false;
		}
		var x = this.life;
		dmg = x < dmg ? x : dmg;
		this.life -= dmg;
		this.updateLifeBar();
		this.onDamage(dmg);
		this.blink();
		if(this.life <= 0) {
			this.interruptSkills(false);
			this.onDie();
		}
		return true;
	}
	,violentBump: function(bdx,bdy,sec) {
		if(!(this.life > 0 && !this.destroyed)) {
			return;
		}
		this.dx = bdx;
		this.dy = bdy;
		var v = bdx > 0 ? -1 : 1;
		this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
		this.stunS(sec);
		this.interruptSkills(false);
	}
	,onDamage: function(v) {
	}
	,onDie: function() {
		this.destroyed = true;
	}
	,createSkill: function(id) {
		var s = new Skill(id,this);
		this.skills.push(s);
		return s;
	}
	,interruptSkills: function(startCd) {
		var _g = 0;
		var _g1 = this.skills;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.interrupt(startCd);
		}
	}
	,getSkill: function(id) {
		var _g = 0;
		var _g1 = this.skills;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.id == id) {
				return s;
			}
		}
		return null;
	}
	,movementLocked: function() {
		if(!this.cd.fastCheck.h.hasOwnProperty(12582912)) {
			return this.isStunned();
		} else {
			return true;
		}
	}
	,lockMovementsS: function(t) {
		if(this.life > 0 && !this.destroyed) {
			var _this = this.cd;
			var frames = t * this.cd.baseFps;
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this._getCdObject(12582912);
			if(!(cur != null && frames < cur.frames)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[12582912] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(12582912,frames));
					}
				}
			}
		}
	}
	,controlsLocked: function() {
		if(!this.cd.fastCheck.h.hasOwnProperty(25165824)) {
			return this.isStunned();
		} else {
			return true;
		}
	}
	,lockControlsS: function(t) {
		if(this.life > 0 && !this.destroyed) {
			var _this = this.cd;
			var frames = t * this.cd.baseFps;
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this._getCdObject(25165824);
			if(!(cur != null && frames < cur.frames)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[25165824] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(25165824,frames));
					}
				}
			}
		}
	}
	,stunS: function(t) {
		if(this.life > 0 && !this.destroyed) {
			var _this = this.cd;
			var frames = t * this.cd.baseFps;
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this._getCdObject(4194304);
			if(!(cur != null && frames < cur.frames)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[4194304] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(4194304,frames));
					}
				}
			}
		}
	}
	,isStunned: function() {
		return this.cd.fastCheck.h.hasOwnProperty(4194304);
	}
	,setPosCase: function(x,y) {
		this.cx = x;
		this.cy = y;
		this.xr = 0.5;
		this.yr = 1;
	}
	,setPosPixel: function(x,y) {
		this.cx = x / Const.GRID | 0;
		this.cy = y / Const.GRID | 0;
		this.xr = (x - this.cx * Const.GRID) / Const.GRID;
		this.yr = (y - this.cy * Const.GRID) / Const.GRID;
	}
	,setLabel: function(str,c) {
		if(c == null) {
			c = 16777215;
		}
		if(str == null && this.label != null) {
			var _this = this.label;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.label = null;
		}
		if(str != null) {
			if(this.label == null) {
				this.label = new h2d_Text(Assets.font);
				Game.ME.scroller.addChildAt(this.label,Const.DP_UI);
			}
			this.label.set_text(str);
			this.label.set_textColor(c);
		}
	}
	,startCover: function(c,side) {
		if(!c.canHostSomeone(side)) {
			return false;
		}
		this.dx = this.dy = 0;
		this.cover = c;
		this.setPosCase(c.cx + side,c.cy);
		this.xr = 0.5 - side * 0.25;
		this.yr = 1;
		var v = (c.cx + c.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1;
		this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
		return true;
	}
	,leaveCover: function() {
		this.cover = null;
	}
	,dispose: function() {
		HxOverrides.remove(Entity.ALL,this);
		var _this = this.lifeBar;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		this.cd.destroy();
		var _this1 = this.spr;
		if(_this1 != null && _this1.parent != null) {
			_this1.parent.removeChild(_this1);
		}
		this.skills = null;
		if(this.label != null) {
			var _this2 = this.label;
			if(_this2 != null && _this2.parent != null) {
				_this2.parent.removeChild(_this2);
			}
		}
		if(this.debug != null) {
			var _this3 = this.debug;
			if(_this3 != null && _this3.parent != null) {
				_this3.parent.removeChild(_this3);
			}
		}
	}
	,preUpdate: function() {
		this.cd.update(this.dt);
	}
	,postUpdate: function() {
		var _this = this.spr;
		_this.posChanged = true;
		_this.x = (this.cx + this.xr) * Const.GRID;
		var _this1 = this.spr;
		_this1.posChanged = true;
		_this1.y = (this.cy + this.yr) * Const.GRID;
		var _this2 = this.spr;
		_this2.posChanged = true;
		_this2.scaleX = this.dir;
		var _this3 = this.spr;
		if(_this3._animManager == null) {
			_this3._animManager = new mt_heaps_slib_AnimManager(_this3);
			if(_this3.onAnimManAlloc != null) {
				_this3.onAnimManAlloc(_this3._animManager);
			}
		}
		var _this4 = _this3._animManager;
		_this4.genSpeed = this.isAffectBySlowMo ? Game.ME.getSlowMoFactor() : 1;
		if(this.label != null) {
			var _this5 = this.label;
			var x = (this.cx + this.xr) * Const.GRID - this.label.get_textWidth() * 0.5 | 0;
			var y = this.get_headY() - this.label.get_textHeight() - 3 | 0;
			_this5.posChanged = true;
			_this5.x = x;
			_this5.posChanged = true;
			_this5.y = y;
		}
		var _this6 = this.lifeBar;
		var x1 = (this.cx + this.xr) * Const.GRID - this.lifeBar.get_outerWidth() * 0.5 | 0;
		_this6.posChanged = true;
		_this6.x = x1;
		_this6.posChanged = true;
		_this6.y = (this.cy + this.yr) * Const.GRID + 2 | 0;
		if(Console.ME.has("bounds")) {
			if(this.debug == null) {
				this.debug = new h2d_Graphics();
				Game.ME.scroller.addChildAt(this.debug,Const.DP_UI);
			}
			var _this7 = this.debug;
			_this7.posChanged = true;
			_this7.x = (this.cx + this.xr) * Const.GRID;
			_this7.posChanged = true;
			_this7.y = (this.cy + this.yr) * Const.GRID;
			this.debug.clear();
			this.debug.beginFill(16777215,0.9);
			this.debug.drawRect(this.get_shootX() - (this.cx + this.xr) * Const.GRID,this.get_shootY() - (this.cy + this.yr) * Const.GRID,2,2);
			this.debug.beginFill(15261107,0.1);
			this.debug.lineStyle(1,15261107,0.2);
			this.debug.drawCircle(0,-this.radius,this.radius);
			var _g = 0;
			var _g1 = Area.ALL;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if(a.owner == this) {
					this.debug.beginFill(a.color,0.2);
					this.debug.lineStyle(1,a.color,0.4);
					this.debug.drawCircle(a.getX() - (this.cx + this.xr) * Const.GRID,a.getY() - (this.cy + this.yr) * Const.GRID,a.radius);
				}
			}
		}
		if(!Console.ME.has("bounds") && this.debug != null) {
			var _this8 = this.debug;
			if(_this8 != null && _this8.parent != null) {
				_this8.parent.removeChild(_this8);
			}
			this.debug = null;
		}
		var _g2 = this.cAdd;
		_g2.x *= Math.pow(0.93,this.dt);
		var _g3 = this.cAdd;
		_g3.y *= Math.pow(0.8,this.dt);
		var _g4 = this.cAdd;
		_g4.z *= Math.pow(0.8,this.dt);
	}
	,getDiminishingReturnFactor: function(id,fullUses,maxUses) {
		var _this = this.diminishingUses;
		if(!(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id))) {
			var _this1 = this.diminishingUses;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,1);
			} else {
				_this1.h[id] = 1;
			}
		} else {
			var this1 = this.diminishingUses;
			var _this2 = this.diminishingUses;
			var value = (__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]) + 1;
			var _this3 = this1;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value);
			} else {
				_this3.h[id] = value;
			}
		}
		var _this4 = this.diminishingUses;
		var n = __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id];
		if(n <= fullUses) {
			return 1;
		} else if(n > maxUses) {
			return 0;
		} else {
			return 1 - (n - fullUses) / (maxUses - fullUses + 1);
		}
	}
	,onClick: function(x,y,bt) {
	}
	,onTouchWall: function(wallDir) {
		this.dx *= 0.5;
	}
	,onTouchCeiling: function() {
		this.dy = 0;
	}
	,onLand: function() {
		this.dy = 0;
	}
	,blink: function() {
		this.cAdd.x = 1;
		this.cAdd.y = 1;
		this.cAdd.z = 1;
	}
	,setDt: function(v) {
		this.dt = v * (this.isAffectBySlowMo && Game.ME.isSlowMo() ? Const.PAUSE_SLOWMO : 1);
	}
	,hasSkillCharging: function() {
		var _g = 0;
		var _g1 = this.skills;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.isCharging()) {
				return true;
			}
		}
		return false;
	}
	,canInterruptSkill: function() {
		return true;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.skills;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.update(this.dt);
		}
		var tmp;
		if(this.cover != null) {
			var _this = this.cover;
			tmp = !(_this.life > 0 && !_this.destroyed);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.leaveCover();
		}
		if(this.cover != null) {
			this.dx = this.dy = 0;
		}
		var x = this.dx * this.dt;
		var x1 = x < 0 ? -x : x;
		var steps;
		if(x1 > .0) {
			var t = x1 + .5 | 0;
			steps = t < x1 ? t + 1 : t;
		} else if(x1 < .0) {
			var t1 = x1 - .5 | 0;
			steps = t1 < x1 ? t1 + 1 : t1;
		} else {
			steps = 0;
		}
		var step = this.dx * this.dt / steps;
		while(steps > 0) {
			this.xr += step;
			if(this.hasColl) {
				if(this.xr > 0.7 && Game.ME.level.hasColl(this.cx + 1,this.cy)) {
					this.xr = 0.7;
					this.onTouchWall(1);
					steps = 0;
				}
				if(this.xr < 0.3 && Game.ME.level.hasColl(this.cx - 1,this.cy)) {
					this.xr = 0.3;
					this.onTouchWall(-1);
					steps = 0;
				}
			}
			while(this.xr > 1) {
				this.xr--;
				this.cx++;
			}
			while(this.xr < 0) {
				this.xr++;
				this.cx--;
			}
			--steps;
		}
		this.dx *= Math.pow(this.frict,this.dt);
		if(!(Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0)) {
			this.dy += this.gravity * this.dt;
		}
		var x2 = this.dy * this.dt;
		var x3 = x2 < 0 ? -x2 : x2;
		var steps1;
		if(x3 > .0) {
			var t2 = x3 + .5 | 0;
			steps1 = t2 < x3 ? t2 + 1 : t2;
		} else if(x3 < .0) {
			var t3 = x3 - .5 | 0;
			steps1 = t3 < x3 ? t3 + 1 : t3;
		} else {
			steps1 = 0;
		}
		var step1 = this.dy * this.dt / steps1;
		while(steps1 > 0) {
			this.yr += step1;
			if(this.hasColl) {
				if(this.yr > 1 && Game.ME.level.hasColl(this.cx,this.cy + 1)) {
					this.yr = 1;
					this.onLand();
				}
				if(this.yr < 0.3 && Game.ME.level.hasColl(this.cx,this.cy - 1)) {
					this.yr = 0.3;
					this.onTouchCeiling();
					steps1 = 0;
				}
			}
			while(this.yr > 1) {
				this.yr--;
				this.cy++;
			}
			while(this.yr < 0) {
				this.yr++;
				this.cy--;
			}
			--steps1;
		}
		this.dy *= Math.pow(this.frict,this.dt);
	}
	,__class__: Entity
};
var FPoint = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.set(x,y);
};
$hxClasses["FPoint"] = FPoint;
FPoint.__name__ = ["FPoint"];
FPoint.prototype = {
	set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,__class__: FPoint
};
var mt_Process = function(parent) {
	this.init();
	if(parent == null) {
		mt_Process.ROOTS.push(this);
	} else {
		parent.addChild(this);
	}
};
$hxClasses["mt.Process"] = mt_Process;
mt_Process.__name__ = ["mt","Process"];
mt_Process.updateAll = function(dt,rendering) {
	if(rendering == null) {
		rendering = true;
	}
	var _g = 0;
	var _g1 = mt_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		mt_Process._update(p,dt,rendering);
	}
	var _g2 = 0;
	var _g11 = mt_Process.ROOTS;
	while(_g2 < _g11.length) {
		var p1 = _g11[_g2];
		++_g2;
		if(!(p1.paused || p1.destroyed)) {
			p1.postUpdate();
			if(!p1.destroyed) {
				var _g3 = 0;
				var _g12 = p1.children;
				while(_g3 < _g12.length) {
					var c = _g12[_g3];
					++_g3;
					mt_Process._postUpdate(c);
				}
			}
		}
	}
	mt_Process._checkDestroyeds(mt_Process.ROOTS);
};
mt_Process.resizeAll = function() {
	var _g = 0;
	var _g1 = mt_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.destroyed) {
			p.onResize();
			var _g2 = 0;
			var _g11 = p.children;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				mt_Process._resize(p1);
			}
		}
	}
};
mt_Process._resize = function(p) {
	if(!p.destroyed) {
		p.onResize();
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			mt_Process._resize(p1);
		}
	}
};
mt_Process._update = function(p,dt,rendering) {
	if(rendering == null) {
		rendering = true;
	}
	if(p.paused || p.destroyed) {
		return;
	}
	dt *= p.speedMod;
	p.rendering = rendering;
	p.dt = dt;
	p.ftime += dt;
	p.delayer.update(dt);
	p.cd.update(dt);
	p.tw.update(dt);
	if(!p.paused && !p.destroyed) {
		p.update();
		if(p.onUpdateCb != null) {
			p.onUpdateCb();
		}
	}
	if(!p.paused && !p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			mt_Process._update(p1,dt,rendering);
		}
	}
};
mt_Process._postUpdate = function(p) {
	if(p.paused || p.destroyed) {
		return;
	}
	p.postUpdate();
	if(!p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			mt_Process._postUpdate(c);
		}
	}
};
mt_Process._checkDestroyeds = function(plist) {
	var i = 0;
	while(i < plist.length) {
		var p = plist[i];
		if(p.destroyed) {
			mt_Process._dispose(p);
		} else {
			mt_Process._checkDestroyeds(p.children);
			++i;
		}
	}
};
mt_Process._dispose = function(p) {
	var _g = 0;
	var _g1 = p.children;
	while(_g < _g1.length) {
		var p1 = _g1[_g];
		++_g;
		p1.destroyed = true;
	}
	mt_Process._checkDestroyeds(p.children);
	p.delayer.destroy();
	p.cd.destroy();
	p.tw.destroy();
	if(p.parent != null) {
		HxOverrides.remove(p.parent.children,p);
	} else {
		HxOverrides.remove(mt_Process.ROOTS,p);
	}
	if(p.root != null) {
		var _this = p.root;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	p.onDispose();
	if(p.onDisposeCb != null) {
		p.onDisposeCb();
	}
	p.parent = null;
	p.children = null;
	p.delayer = null;
	p.cd = null;
	p.tw = null;
	p.root = null;
};
mt_Process.prototype = {
	init: function() {
		this.name = "process";
		this.uniqId = mt_Process.UNIQ_ID++;
		this.children = [];
		this.paused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.dt = 1;
		this.speedMod = 1.0;
		this.delayer = new mt_Delayer(this.getDefaultFrameRate());
		this.cd = new mt_Cooldown(this.getDefaultFrameRate());
		this.tw = new mt_deepnight_Tweenie(this.getDefaultFrameRate());
	}
	,createRoot: function(ctx) {
		if(this.root != null) {
			throw new js__$Boot_HaxeError(Std.string(this) + ": root already created!");
		}
		if(ctx == null) {
			if(this.parent == null || this.parent.root == null) {
				throw new js__$Boot_HaxeError(Std.string(this) + ": context required");
			}
			ctx = this.parent.root;
		}
		this.root = new h2d_Layers(ctx);
	}
	,createRootInLayers: function(ctx,plan) {
		if(this.root != null) {
			throw new js__$Boot_HaxeError(Std.string(this) + ": root already exists");
		}
		this.root = new h2d_Layers();
		ctx.addChildAt(this.root,plan);
	}
	,update: function() {
	}
	,postUpdate: function() {
	}
	,onResize: function() {
	}
	,onDispose: function() {
	}
	,onUpdateCb: function() {
	}
	,onDisposeCb: function() {
	}
	,toString: function() {
		return this.name + ":" + this.uniqId;
	}
	,getDefaultFrameRate: function() {
		return hxd_Timer.wantedFPS;
	}
	,addChild: function(p) {
		if(p.parent == null) {
			HxOverrides.remove(mt_Process.ROOTS,p);
		} else {
			HxOverrides.remove(p.parent.children,p);
		}
		p.parent = this;
		this.children.push(p);
	}
	,__class__: mt_Process
};
var Fx = function() {
	mt_Process.call(this,Game.ME);
	var _this = Assets.gameElements;
	if(_this.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.pool = new mt_heaps_ParticlePool(_this.pages[0],2048,Const.FPS);
	var _this1 = Assets.gameElements;
	if(_this1.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.bgAddSb = new h2d_SpriteBatch(_this1.pages[0]);
	Game.ME.scroller.addChildAt(this.bgAddSb,Const.DP_FX_BG);
	this.bgAddSb.blendMode = h2d_BlendMode.Add;
	this.bgAddSb.hasRotationScale = true;
	var _this2 = Assets.gameElements;
	if(_this2.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.bgNormalSb = new h2d_SpriteBatch(_this2.pages[0]);
	Game.ME.scroller.addChildAt(this.bgNormalSb,Const.DP_FX_BG);
	this.bgNormalSb.hasRotationScale = true;
	var _this3 = Assets.gameElements;
	if(_this3.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.topNormalSb = new h2d_SpriteBatch(_this3.pages[0]);
	Game.ME.scroller.addChildAt(this.topNormalSb,Const.DP_FX_TOP);
	this.topNormalSb.hasRotationScale = true;
	var _this4 = Assets.gameElements;
	if(_this4.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.topAddSb = new h2d_SpriteBatch(_this4.pages[0]);
	Game.ME.scroller.addChildAt(this.topAddSb,Const.DP_FX_TOP);
	this.topAddSb.blendMode = h2d_BlendMode.Add;
	this.topAddSb.hasRotationScale = true;
};
$hxClasses["Fx"] = Fx;
Fx.__name__ = ["Fx"];
Fx.__super__ = mt_Process;
Fx.prototype = $extend(mt_Process.prototype,{
	onDispose: function() {
		mt_Process.prototype.onDispose.call(this);
		this.pool.dispose();
		var _this = this.bgAddSb;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this1 = this.bgNormalSb;
		if(_this1 != null && _this1.parent != null) {
			_this1.parent.removeChild(_this1);
		}
		var _this2 = this.topAddSb;
		if(_this2 != null && _this2.parent != null) {
			_this2.parent.removeChild(_this2);
		}
		var _this3 = this.topNormalSb;
		if(_this3 != null && _this3.parent != null) {
			_this3.parent.removeChild(_this3);
		}
	}
	,flashBangS: function(c,a,t) {
		if(t == null) {
			t = 0.1;
		}
		var e = new h2d_Bitmap(h2d_Tile.fromColor(c,1,1,a));
		Game.ME.root.addChildAt(e,Const.DP_FX_TOP);
		var _this = Game.ME;
		var v = mt_Process.CUSTOM_STAGE_WIDTH > 0 ? mt_Process.CUSTOM_STAGE_WIDTH : hxd_Stage.getInstance().get_width();
		e.posChanged = true;
		e.scaleX = v;
		var _this1 = Game.ME;
		var v1 = mt_Process.CUSTOM_STAGE_HEIGHT > 0 ? mt_Process.CUSTOM_STAGE_HEIGHT : hxd_Stage.getInstance().get_height();
		e.posChanged = true;
		e.scaleY = v1;
		e.blendMode = h2d_BlendMode.Add;
		var _tween = Game.ME.tw.create_(function() {
			return e.alpha;
		},function(_setV) {
			e.alpha = _setV;
		},null,0,null,t * 1000);
		_tween.end(function() {
			if(e != null && e.parent != null) {
				e.parent.removeChild(e);
			}
		});
	}
	,collGround: function(p) {
		if(!Game.ME.level.hasColl(p.x / Const.GRID | 0,(p.y - 2) / Const.GRID | 0)) {
			return Game.ME.level.hasColl(p.x / Const.GRID | 0,(p.y + 1) / Const.GRID | 0);
		} else {
			return false;
		}
	}
	,_bloodPhysics: function(p) {
		if(this.collGround(p) && isNaN(p.data0)) {
			p.data0 = 1;
			p.gy = 0;
			p.dx *= 0.5;
			p.dy = 0;
			p.dr = 0;
			p.rotation = 0;
		}
	}
	,shoot: function(fx,fy,tx,ty,c) {
		var dir = fx < tx ? 1 : -1;
		var a = Math.atan2(ty - fy,tx - fx);
		var refAng = dir == 1 ? 0 : 3.14;
		var a1 = a;
		var b = refAng;
		var a2 = a1;
		while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
		while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
		a1 = a2;
		var a3 = b;
		while(a3 < -3.1415926535897931) a3 += 6.283185307179586;
		while(a3 > 3.141592653589793) a3 -= 6.283185307179586;
		b = a3;
		var a4 = a1 - b;
		while(a4 < -3.1415926535897931) a4 += 6.283185307179586;
		while(a4 > 3.141592653589793) a4 -= 6.283185307179586;
		var d = a4;
		a = d > 0.1 ? refAng + 0.1 : d < -0.1 ? refAng - 0.1 : a;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var d1 = i <= 2 ? 0 : null ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5;
			var t = Assets.gameElements.getTileRandom("dot");
			var x = fx + Math.cos(a) * d1;
			var y = fy + Math.sin(a) * d1;
			var _this = this.pool;
			var sb = this.topAddSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x,y);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g1 = 0;
				var _g11 = _this.all;
				while(_g1 < _g11.length) {
					var p2 = _g11[_g1];
					++_g1;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x,y);
				p = best;
			}
			p.setFadeS(null ? (0.6 + Math.random() * 0.4) * (Std.random(2) * 2 - 1) : 0.6 + Math.random() * 0.4,0,null ? (0.1 + Math.random() * 0.01999999999999999) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.01999999999999999);
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x1 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a5);
			p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
			var a6 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x2 = a6 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a6);
			p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
			var a7 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x3 = a7 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a7);
			p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
			var _this1 = p.t;
			_this1.dx = -(0 * _this1.width | 0);
			_this1.dy = -(0.5 * _this1.height | 0);
			p.animXr = 0;
			p.animYr = 0.5;
			p.scaleX = null ? (8 + Math.random() * 7) * (Std.random(2) * 2 - 1) : 8 + Math.random() * 7;
			p.scaleXMul = null ? (0.9 + Math.random() * 0.069999999999999951) * (Std.random(2) * 2 - 1) : 0.9 + Math.random() * 0.069999999999999951;
			p.rotation = a;
			p.set_lifeS(0);
		}
		var _g2 = 0;
		while(_g2 < 20) {
			var i1 = _g2++;
			var a8 = a + (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1);
			var d2 = i1 <= 2 ? 0 : null ? Math.random() * 5 * (Std.random(2) * 2 - 1) : Math.random() * 5;
			var t1 = Assets.gameElements.getTileRandom("dot");
			var x4 = fx + Math.cos(a8) * d2;
			var y1 = fy + Math.sin(a8) * d2;
			var _this2 = this.pool;
			var sb1 = this.topAddSb;
			var p3;
			if(_this2.nalloc < _this2.all.length) {
				var p4 = _this2.all[_this2.nalloc];
				p4.reset(sb1,t1,x4,y1);
				p4.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g3 = 0;
				var _g12 = _this2.all;
				while(_g3 < _g12.length) {
					var p5 = _g12[_g3];
					++_g3;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x4,y1);
				p3 = best1;
			}
			p3.setFadeS(null ? (0.4 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.19999999999999996,0,null ? (0.1 + Math.random() * 0.01999999999999999) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.01999999999999999);
			var a9 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x5 = a9 + (_$UInt_UInt_$Impl_$.toFloat(16073994 >>> 16) - a9);
			p3.r = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
			var a10 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x6 = a10 + (_$UInt_UInt_$Impl_$.toFloat(16073994 >>> 8 & 255) - a10);
			p3.g = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
			var a11 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x7 = a11 + (_$UInt_UInt_$Impl_$.toFloat(16073994 & 255) - a11);
			p3.b = ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) / 255;
			var _this3 = p3.t;
			_this3.dx = -(0 * _this3.width | 0);
			_this3.dy = -(0.5 * _this3.height | 0);
			p3.animXr = 0;
			p3.animYr = 0.5;
			p3.scaleX = null ? (3 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 2;
			p3.scaleXMul = null ? (0.9 + Math.random() * 0.069999999999999951) * (Std.random(2) * 2 - 1) : 0.9 + Math.random() * 0.069999999999999951;
			p3.rotation = a8;
			p3.set_lifeS(0);
		}
		var n = 40;
		var d3 = Math.sqrt((fx - tx) * (fx - tx) + (fy - ty) * (fy - ty)) - 10;
		var _g13 = 0;
		var _g4 = n;
		while(_g13 < _g4) {
			var i2 = _g13++;
			var d4 = 0.8 * d3 * i2 / (n - 1) + (null ? Math.random() * 6 * (Std.random(2) * 2 - 1) : Math.random() * 6);
			var t2 = Assets.gameElements.getTileRandom("dot");
			var x8 = fx + Math.cos(a) * d4;
			var y2 = fy + Math.sin(a) * d4;
			var _this4 = this.pool;
			var sb2 = this.topAddSb;
			var p6;
			if(_this4.nalloc < _this4.all.length) {
				var p7 = _this4.all[_this4.nalloc];
				p7.reset(sb2,t2,x8,y2);
				p7.poolIdx = _this4.nalloc;
				_this4.nalloc++;
				p6 = p7;
			} else {
				var best2 = null;
				var _g5 = 0;
				var _g14 = _this4.all;
				while(_g5 < _g14.length) {
					var p8 = _g14[_g5];
					++_g5;
					if(best2 == null || p8.stamp <= best2.stamp) {
						best2 = p8;
					}
				}
				if(best2.onKill != null) {
					best2.onKill();
				}
				best2.reset(sb2,t2,x8,y2);
				p6 = best2;
			}
			p6.setFadeS(null ? (0.4 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.19999999999999996,0,null ? (0.1 + Math.random() * 0.01999999999999999) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.01999999999999999);
			var a12 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x9 = a12 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a12);
			p6.r = ((x9 > 0 ? x9 + .5 : x9 < 0 ? x9 - .5 : 0) | 0) / 255;
			var a13 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x10 = a13 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a13);
			p6.g = ((x10 > 0 ? x10 + .5 : x10 < 0 ? x10 - .5 : 0) | 0) / 255;
			var a14 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x11 = a14 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a14);
			p6.b = ((x11 > 0 ? x11 + .5 : x11 < 0 ? x11 - .5 : 0) | 0) / 255;
			p6.scaleX = null ? (3 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 2;
			var spd = null ? (2 + Math.random() * 8) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 8;
			p6.dx = Math.cos(a) * spd;
			p6.dy = Math.sin(a) * spd;
			p6.frictX = p6.frictY = 0.8;
			p6.gy = null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1;
			p6.scaleXMul = null ? (0.9 + Math.random() * 0.069999999999999951) * (Std.random(2) * 2 - 1) : 0.9 + Math.random() * 0.069999999999999951;
			p6.rotation = a;
			p6.set_lifeS(0.1 * i2 / (n - 1));
		}
	}
	,woundBleed: function(x,y) {
		var n = 2;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("dot");
			var x1 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y1 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this = this.pool;
			var sb = this.topNormalSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y1);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y1);
				p = best;
			}
			var ratio = null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16711680 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(7274496 & 255) - a2) * ratio;
			var c = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0);
			var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x5 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a3);
			p.r = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
			var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x6 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a4);
			p.g = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x7 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a5);
			p.b = ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) / 255;
			p.dx = Math.sin(x + this.ftime * 0.03) * 0.2;
			p.dy = null ? (-1.5 + Math.random() * 1.4) * (Std.random(2) * 2 - 1) : -1.5 + Math.random() * 1.4;
			p.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p.frictX = p.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p.onUpdate = $bind(this,this._bloodPhysics);
			var d = i > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d1 = d * p.fps;
			d1 = 0 > d1 ? 0 : d1;
			p.visible = d1 <= 0;
			p.delayF = d1;
		}
	}
	,bloodHit: function(fx,fy,x,y) {
		var dir = fx < x ? -1 : 1;
		var n = 40;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("dot");
			var x1 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y1 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this = this.pool;
			var sb = this.topNormalSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y1);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y1);
				p = best;
			}
			var ratio = null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16711680 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(7274496 & 255) - a2) * ratio;
			var c = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0);
			var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x5 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a3);
			p.r = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
			var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x6 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a4);
			p.g = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x7 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a5);
			p.b = ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) / 255;
			p.dx = dir * (i <= 10 ? null ? (3 + Math.random() * 9) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 9 : null ? (1 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 4);
			p.dy = null ? (-2 + Math.random() * 3) * (Std.random(2) * 2 - 1) : -2 + Math.random() * 3;
			p.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p.frictX = p.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p.onUpdate = $bind(this,this._bloodPhysics);
			var d = i > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d1 = d * p.fps;
			d1 = 0 > d1 ? 0 : d1;
			p.visible = d1 <= 0;
			p.delayF = d1;
		}
		var n1 = 40;
		var a6 = 3.14 + Math.atan2(y + Math.random() * 3 * (Std.random(2) * 2 - 1) - fy,x + Math.random() * 3 * (Std.random(2) * 2 - 1) - fx);
		var refAng = dir == 1 ? 3.14 : 0;
		var a7 = a6;
		var b = refAng;
		var a8 = a7;
		while(a8 < -3.1415926535897931) a8 += 6.283185307179586;
		while(a8 > 3.141592653589793) a8 -= 6.283185307179586;
		a7 = a8;
		var a9 = b;
		while(a9 < -3.1415926535897931) a9 += 6.283185307179586;
		while(a9 > 3.141592653589793) a9 -= 6.283185307179586;
		b = a9;
		var a10 = a7 - b;
		while(a10 < -3.1415926535897931) a10 += 6.283185307179586;
		while(a10 > 3.141592653589793) a10 -= 6.283185307179586;
		var d2 = a10;
		a6 = d2 > 0.2 ? refAng + 0.2 : d2 < -0.2 ? refAng - 0.2 : a6;
		var _g12 = 0;
		var _g3 = n1;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var a11 = a6 + Math.random() * 0.03 * (Std.random(2) * 2 - 1);
			var d3 = null ? Math.random() * 15 * (Std.random(2) * 2 - 1) : Math.random() * 15;
			var t1 = Assets.gameElements.getTileRandom("dot");
			var x8 = x + Math.cos(a11) * d3;
			var y2 = y + Math.sin(a11) * d3 + Math.random() * (Std.random(2) * 2 - 1);
			var _this1 = this.pool;
			var sb1 = this.topNormalSb;
			var p3;
			if(_this1.nalloc < _this1.all.length) {
				var p4 = _this1.all[_this1.nalloc];
				p4.reset(sb1,t1,x8,y2);
				p4.poolIdx = _this1.nalloc;
				_this1.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g4 = 0;
				var _g13 = _this1.all;
				while(_g4 < _g13.length) {
					var p5 = _g13[_g4];
					++_g4;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x8,y2);
				p3 = best1;
			}
			var ratio1 = null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a12 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16);
			var x9 = a12 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 16) - a12) * ratio1;
			var a13 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255);
			var x10 = a13 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 8 & 255) - a13) * ratio1;
			var a14 = _$UInt_UInt_$Impl_$.toFloat(16711680 & 255);
			var x11 = a14 + (_$UInt_UInt_$Impl_$.toFloat(7274496 & 255) - a14) * ratio1;
			var c1 = ((x9 > 0 ? x9 + .5 : x9 < 0 ? x9 - .5 : 0) | 0) << 16 | ((x10 > 0 ? x10 + .5 : x10 < 0 ? x10 - .5 : 0) | 0) << 8 | ((x11 > 0 ? x11 + .5 : x11 < 0 ? x11 - .5 : 0) | 0);
			var a15 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x12 = a15 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) - a15);
			p3.r = ((x12 > 0 ? x12 + .5 : x12 < 0 ? x12 - .5 : 0) | 0) / 255;
			var a16 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x13 = a16 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) - a16);
			p3.g = ((x13 > 0 ? x13 + .5 : x13 < 0 ? x13 - .5 : 0) | 0) / 255;
			var a17 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x14 = a17 + (_$UInt_UInt_$Impl_$.toFloat(c1 & 255) - a17);
			p3.b = ((x14 > 0 ? x14 + .5 : x14 < 0 ? x14 - .5 : 0) | 0) / 255;
			p3.scaleX = null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2;
			p3.scaleXMul = null ? (0.92 + Math.random() * 0.049999999999999933) * (Std.random(2) * 2 - 1) : 0.92 + Math.random() * 0.049999999999999933;
			var spd = i1 <= 10 ? null ? (1 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 3 : null ? (0.2 + Math.random() * 1.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 1.3;
			p3.dx = Math.cos(a11) * spd;
			p3.dy = Math.sin(a11) * spd;
			p3.rotation = a11;
			p3.gy = null ? (0.005 + Math.random() * 0.005) * (Std.random(2) * 2 - 1) : 0.005 + Math.random() * 0.005;
			p3.frictX = p3.frictY = null ? (0.97 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.010000000000000009;
			p3.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p3.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p3.onUpdate = $bind(this,this._bloodPhysics);
			var d4 = i1 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d5 = d4 * p3.fps;
			d5 = 0 > d5 ? 0 : d5;
			p3.visible = d5 <= 0;
			p3.delayF = d5;
		}
	}
	,headShot: function(fx,fy,x,y,dir) {
		var n = 40;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("dot");
			var x1 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y1 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this = this.pool;
			var sb = this.topNormalSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y1);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y1);
				p = best;
			}
			var ratio = null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16711680 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(7274496 & 255) - a2) * ratio;
			var c = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0);
			var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x5 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a3);
			p.r = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
			var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x6 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a4);
			p.g = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x7 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a5);
			p.b = ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) / 255;
			p.scaleX = null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2;
			p.scaleX = null ? (1 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 0.5;
			p.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p.dr = dir * (null ? (0.2 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.2);
			p.dx = dir * (i <= 10 ? null ? (3 + Math.random() * 9) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 9 : null ? (1 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 4);
			p.dy = null ? (-2 + Math.random() * 3) * (Std.random(2) * 2 - 1) : -2 + Math.random() * 3;
			p.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p.frictX = p.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p.onUpdate = $bind(this,this._bloodPhysics);
			var d = i > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d1 = d * p.fps;
			d1 = 0 > d1 ? 0 : d1;
			p.visible = d1 <= 0;
			p.delayF = d1;
		}
		var n1 = 40;
		var a6 = 3.14 + Math.atan2(y + Math.random() * 3 * (Std.random(2) * 2 - 1) - fy,x + Math.random() * 3 * (Std.random(2) * 2 - 1) - fx);
		var refAng = dir == 1 ? 3.14 : 0;
		var a7 = a6;
		var b = refAng;
		var a8 = a7;
		while(a8 < -3.1415926535897931) a8 += 6.283185307179586;
		while(a8 > 3.141592653589793) a8 -= 6.283185307179586;
		a7 = a8;
		var a9 = b;
		while(a9 < -3.1415926535897931) a9 += 6.283185307179586;
		while(a9 > 3.141592653589793) a9 -= 6.283185307179586;
		b = a9;
		var a10 = a7 - b;
		while(a10 < -3.1415926535897931) a10 += 6.283185307179586;
		while(a10 > 3.141592653589793) a10 -= 6.283185307179586;
		var d2 = a10;
		a6 = d2 > 0.2 ? refAng + 0.2 : d2 < -0.2 ? refAng - 0.2 : a6;
		var _g12 = 0;
		var _g3 = n1;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var a11 = a6 + Math.random() * 0.03 * (Std.random(2) * 2 - 1);
			var d3 = null ? Math.random() * 15 * (Std.random(2) * 2 - 1) : Math.random() * 15;
			var t1 = Assets.gameElements.getTileRandom("dot");
			var x8 = x + Math.cos(a11) * d3;
			var y2 = y + Math.sin(a11) * d3 + Math.random() * (Std.random(2) * 2 - 1);
			var _this1 = this.pool;
			var sb1 = this.topNormalSb;
			var p3;
			if(_this1.nalloc < _this1.all.length) {
				var p4 = _this1.all[_this1.nalloc];
				p4.reset(sb1,t1,x8,y2);
				p4.poolIdx = _this1.nalloc;
				_this1.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g4 = 0;
				var _g13 = _this1.all;
				while(_g4 < _g13.length) {
					var p5 = _g13[_g4];
					++_g4;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x8,y2);
				p3 = best1;
			}
			var ratio1 = null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a12 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16);
			var x9 = a12 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 16) - a12) * ratio1;
			var a13 = _$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255);
			var x10 = a13 + (_$UInt_UInt_$Impl_$.toFloat(7274496 >>> 8 & 255) - a13) * ratio1;
			var a14 = _$UInt_UInt_$Impl_$.toFloat(16711680 & 255);
			var x11 = a14 + (_$UInt_UInt_$Impl_$.toFloat(7274496 & 255) - a14) * ratio1;
			var c1 = ((x9 > 0 ? x9 + .5 : x9 < 0 ? x9 - .5 : 0) | 0) << 16 | ((x10 > 0 ? x10 + .5 : x10 < 0 ? x10 - .5 : 0) | 0) << 8 | ((x11 > 0 ? x11 + .5 : x11 < 0 ? x11 - .5 : 0) | 0);
			var a15 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x12 = a15 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) - a15);
			p3.r = ((x12 > 0 ? x12 + .5 : x12 < 0 ? x12 - .5 : 0) | 0) / 255;
			var a16 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x13 = a16 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) - a16);
			p3.g = ((x13 > 0 ? x13 + .5 : x13 < 0 ? x13 - .5 : 0) | 0) / 255;
			var a17 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x14 = a17 + (_$UInt_UInt_$Impl_$.toFloat(c1 & 255) - a17);
			p3.b = ((x14 > 0 ? x14 + .5 : x14 < 0 ? x14 - .5 : 0) | 0) / 255;
			p3.scaleX = null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2;
			p3.scaleXMul = null ? (0.92 + Math.random() * 0.049999999999999933) * (Std.random(2) * 2 - 1) : 0.92 + Math.random() * 0.049999999999999933;
			var spd = i1 <= 10 ? null ? (1 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 3 : null ? (0.2 + Math.random() * 1.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 1.3;
			p3.dx = Math.cos(a11) * spd;
			p3.dy = Math.sin(a11) * spd;
			p3.rotation = a11;
			p3.gy = null ? (0.01 + Math.random() * 0.01) * (Std.random(2) * 2 - 1) : 0.01 + Math.random() * 0.01;
			p3.frictX = p3.frictY = null ? (0.97 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.010000000000000009;
			p3.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p3.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p3.onUpdate = $bind(this,this._bloodPhysics);
			var d4 = i1 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d5 = d4 * p3.fps;
			d5 = 0 > d5 ? 0 : d5;
			p3.visible = d5 <= 0;
			p3.delayF = d5;
		}
		var n2 = 20;
		var a18 = Math.atan2(y + Math.random() * 3 * (Std.random(2) * 2 - 1) - fy,x + Math.random() * 3 * (Std.random(2) * 2 - 1) - fx);
		var refAng1 = dir == 1 ? 0 : 3.14;
		var a19 = a18;
		var b1 = refAng1;
		var a20 = a19;
		while(a20 < -3.1415926535897931) a20 += 6.283185307179586;
		while(a20 > 3.141592653589793) a20 -= 6.283185307179586;
		a19 = a20;
		var a21 = b1;
		while(a21 < -3.1415926535897931) a21 += 6.283185307179586;
		while(a21 > 3.141592653589793) a21 -= 6.283185307179586;
		b1 = a21;
		var a22 = a19 - b1;
		while(a22 < -3.1415926535897931) a22 += 6.283185307179586;
		while(a22 > 3.141592653589793) a22 -= 6.283185307179586;
		var d6 = a22;
		a18 = d6 > 0.2 ? refAng1 + 0.2 : d6 < -0.2 ? refAng1 - 0.2 : a18;
		var _g14 = 0;
		var _g5 = n2;
		while(_g14 < _g5) {
			var i2 = _g14++;
			var a23 = a18 + Math.random() * 0.06 * (Std.random(2) * 2 - 1);
			var d7 = null ? Math.random() * 15 * (Std.random(2) * 2 - 1) : Math.random() * 15;
			var t2 = Assets.gameElements.getTileRandom("bigDirt");
			var x15 = x + Math.cos(a23) * d7;
			var y3 = y + Math.sin(a23) * d7 + Math.random() * (Std.random(2) * 2 - 1);
			var _this2 = this.pool;
			var sb2 = this.topNormalSb;
			var p6;
			if(_this2.nalloc < _this2.all.length) {
				var p7 = _this2.all[_this2.nalloc];
				p7.reset(sb2,t2,x15,y3);
				p7.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p6 = p7;
			} else {
				var best2 = null;
				var _g6 = 0;
				var _g15 = _this2.all;
				while(_g6 < _g15.length) {
					var p8 = _g15[_g6];
					++_g6;
					if(best2 == null || p8.stamp <= best2.stamp) {
						best2 = p8;
					}
				}
				if(best2.onKill != null) {
					best2.onKill();
				}
				best2.reset(sb2,t2,x15,y3);
				p6 = best2;
			}
			var c2 = i2 % 3 == 0 ? 9764864 : 14796420;
			var a24 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x16 = a24 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 16) - a24);
			p6.r = ((x16 > 0 ? x16 + .5 : x16 < 0 ? x16 - .5 : 0) | 0) / 255;
			var a25 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x17 = a25 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 8 & 255) - a25);
			p6.g = ((x17 > 0 ? x17 + .5 : x17 < 0 ? x17 - .5 : 0) | 0) / 255;
			var a26 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x18 = a26 + (_$UInt_UInt_$Impl_$.toFloat(c2 & 255) - a26);
			p6.b = ((x18 > 0 ? x18 + .5 : x18 < 0 ? x18 - .5 : 0) | 0) / 255;
			p6.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p6.scaleX = p6.scaleY = (0.4 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1);
			p6.scaleMul = null ? (0.96 + Math.random() * 0.030000000000000027) * (Std.random(2) * 2 - 1) : 0.96 + Math.random() * 0.030000000000000027;
			p6.rotation = a23;
			p6.dr = (null ? (0.1 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.30000000000000004) * dir;
			var spd1 = i2 <= n2 * 0.7 ? null ? (2 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 5 : null ? (1.5 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : 1.5 + Math.random() * 1.5;
			p6.dx = Math.cos(a23) * spd1;
			p6.dy = Math.sin(a23) * spd1;
			p6.gy = null ? (0.02 + Math.random() * 0.030000000000000002) * (Std.random(2) * 2 - 1) : 0.02 + Math.random() * 0.030000000000000002;
			p6.frictX = p6.frictY = null ? (0.97 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.010000000000000009;
			p6.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p6.onUpdate = $bind(this,this._bloodPhysics);
			var d8 = i2 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d9 = d8 * p6.fps;
			d9 = 0 > d9 ? 0 : d9;
			p6.visible = d9 <= 0;
			p6.delayF = d9;
		}
	}
	,_hardPhysics: function(p) {
		if(this.collGround(p) && isNaN(p.data0)) {
			p.data0 = 1;
			p.gy = 0;
			p.dx *= 0.5;
			p.dy = 0;
			p.dr = 0;
			p.frictX = p.frictY = 0.8;
			p.rotation *= 0.03;
		}
	}
	,woodCover: function(x,y,dir) {
		var c = 8280382;
		var n = 100;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("dot");
			var x1 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y1 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this = this.pool;
			var sb = this.topNormalSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y1);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y1);
				p = best;
			}
			var ratio = null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1;
			var a = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a2) * ratio;
			var c1 = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0);
			var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x5 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) - a3);
			p.r = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
			var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x6 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) - a4);
			p.g = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x7 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c1 & 255) - a5);
			p.b = ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) / 255;
			p.scaleX = null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2;
			p.dx = dir * (i <= n * 0.2 ? null ? (3 + Math.random() * 9) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 9 : null ? (-2 + Math.random() * 7) * (Std.random(2) * 2 - 1) : -2 + Math.random() * 7);
			p.dy = null ? (-3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : -3 + Math.random() * 4;
			p.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p.frictX = p.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p.dr = Math.random() * 0.3 * (Std.random(2) * 2 - 1);
			p.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
			p.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p.onUpdate = $bind(this,this._hardPhysics);
			var d = i > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d1 = d * p.fps;
			d1 = 0 > d1 ? 0 : d1;
			p.visible = d1 <= 0;
			p.delayF = d1;
		}
		var n1 = 20;
		var _g12 = 0;
		var _g3 = n1;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var t1 = Assets.gameElements.getTileRandom("dot");
			var x8 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y2 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this1 = this.pool;
			var sb1 = this.topNormalSb;
			var p3;
			if(_this1.nalloc < _this1.all.length) {
				var p4 = _this1.all[_this1.nalloc];
				p4.reset(sb1,t1,x8,y2);
				p4.poolIdx = _this1.nalloc;
				_this1.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g4 = 0;
				var _g13 = _this1.all;
				while(_g4 < _g13.length) {
					var p5 = _g13[_g4];
					++_g4;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x8,y2);
				p3 = best1;
			}
			var ratio1 = null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1;
			var a6 = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
			var x9 = a6 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a6) * ratio1;
			var a7 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
			var x10 = a7 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a7) * ratio1;
			var a8 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
			var x11 = a8 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a8) * ratio1;
			var c2 = ((x9 > 0 ? x9 + .5 : x9 < 0 ? x9 - .5 : 0) | 0) << 16 | ((x10 > 0 ? x10 + .5 : x10 < 0 ? x10 - .5 : 0) | 0) << 8 | ((x11 > 0 ? x11 + .5 : x11 < 0 ? x11 - .5 : 0) | 0);
			var a9 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x12 = a9 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 16) - a9);
			p3.r = ((x12 > 0 ? x12 + .5 : x12 < 0 ? x12 - .5 : 0) | 0) / 255;
			var a10 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x13 = a10 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 8 & 255) - a10);
			p3.g = ((x13 > 0 ? x13 + .5 : x13 < 0 ? x13 - .5 : 0) | 0) / 255;
			var a11 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x14 = a11 + (_$UInt_UInt_$Impl_$.toFloat(c2 & 255) - a11);
			p3.b = ((x14 > 0 ? x14 + .5 : x14 < 0 ? x14 - .5 : 0) | 0) / 255;
			p3.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p3.scaleX = null ? (3 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 2;
			p3.scaleY = 2;
			p3.scaleMul = null ? (0.992 + Math.random() * 0.0030000000000000027) * (Std.random(2) * 2 - 1) : 0.992 + Math.random() * 0.0030000000000000027;
			p3.dx = dir * (i1 <= n1 * 0.2 ? null ? (2 + Math.random() * 6) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 6 : null ? (-2 + Math.random() * 7) * (Std.random(2) * 2 - 1) : -2 + Math.random() * 7);
			p3.dy = null ? (-5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : -5 + Math.random() * 5;
			p3.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p3.frictX = p3.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p3.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p3.dr = Math.random() * 0.3 * (Std.random(2) * 2 - 1);
			p3.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
			p3.onUpdate = $bind(this,this._hardPhysics);
			var d2 = i1 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d3 = d2 * p3.fps;
			d3 = 0 > d3 ? 0 : d3;
			p3.visible = d3 <= 0;
			p3.delayF = d3;
		}
	}
	,warnZone: function(x,y,r) {
		var t = Assets.gameElements.getTileRandom("radius");
		var _this = this.pool;
		var sb = this.topAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(16711680 & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		p.setFadeS(0.5,0,0.1);
		p.scaleX = p.scaleY = 2 * r / p.t.width;
		p.ds = 0.01;
		p.dsFrict = 0.8;
		p.set_lifeS(0);
	}
	,grenade: function(x,y,r) {
		var c = 13286269;
		var t = Assets.gameElements.getTileRandom("radius");
		var _this = this.pool;
		var sb = this.topAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(16711680 & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		p.setFadeS(0.5,0,0.1);
		p.scaleX = p.scaleY = 2 * r / p.t.width;
		p.set_lifeS(0);
		p.ds = 0.1;
		p.dsFrict = 0.8;
		var t1 = Assets.gameElements.getTileRandom("radius");
		var _this1 = this.pool;
		var sb1 = this.topAddSb;
		var p3;
		if(_this1.nalloc < _this1.all.length) {
			var p4 = _this1.all[_this1.nalloc];
			p4.reset(sb1,t1,x,y);
			p4.poolIdx = _this1.nalloc;
			_this1.nalloc++;
			p3 = p4;
		} else {
			var best1 = null;
			var _g2 = 0;
			var _g11 = _this1.all;
			while(_g2 < _g11.length) {
				var p5 = _g11[_g2];
				++_g2;
				if(best1 == null || p5.stamp <= best1.stamp) {
					best1 = p5;
				}
			}
			if(best1.onKill != null) {
				best1.onKill();
			}
			best1.reset(sb1,t1,x,y);
			p3 = best1;
		}
		var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x4 = a3 + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 16) - a3);
		p3.r = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / 255;
		var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x5 = a4 + (_$UInt_UInt_$Impl_$.toFloat(16711680 >>> 8 & 255) - a4);
		p3.g = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
		var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x6 = a5 + (_$UInt_UInt_$Impl_$.toFloat(16711680 & 255) - a5);
		p3.b = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
		p3.setFadeS(0.5,0,0.1);
		p3.scaleX = p3.scaleY = 2 * r / p3.t.width;
		p3.set_lifeS(0);
		p3.ds = 0.02;
		p3.dsFrict = 0.8;
		var n = 100;
		var _g12 = 0;
		var _g3 = n;
		while(_g12 < _g3) {
			var i = _g12++;
			var t2 = Assets.gameElements.getTileRandom("bigDirt");
			var x7 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y1 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this2 = this.pool;
			var sb2 = this.topNormalSb;
			var p6;
			if(_this2.nalloc < _this2.all.length) {
				var p7 = _this2.all[_this2.nalloc];
				p7.reset(sb2,t2,x7,y1);
				p7.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p6 = p7;
			} else {
				var best2 = null;
				var _g4 = 0;
				var _g13 = _this2.all;
				while(_g4 < _g13.length) {
					var p8 = _g13[_g4];
					++_g4;
					if(best2 == null || p8.stamp <= best2.stamp) {
						best2 = p8;
					}
				}
				if(best2.onKill != null) {
					best2.onKill();
				}
				best2.reset(sb2,t2,x7,y1);
				p6 = best2;
			}
			p6.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			var ratio = null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1;
			var a6 = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
			var x8 = a6 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a6) * ratio;
			var a7 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
			var x9 = a7 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a7) * ratio;
			var a8 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
			var x10 = a8 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a8) * ratio;
			var c1 = ((x8 > 0 ? x8 + .5 : x8 < 0 ? x8 - .5 : 0) | 0) << 16 | ((x9 > 0 ? x9 + .5 : x9 < 0 ? x9 - .5 : 0) | 0) << 8 | ((x10 > 0 ? x10 + .5 : x10 < 0 ? x10 - .5 : 0) | 0);
			var a9 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x11 = a9 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) - a9);
			p6.r = ((x11 > 0 ? x11 + .5 : x11 < 0 ? x11 - .5 : 0) | 0) / 255;
			var a10 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x12 = a10 + (_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) - a10);
			p6.g = ((x12 > 0 ? x12 + .5 : x12 < 0 ? x12 - .5 : 0) | 0) / 255;
			var a11 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x13 = a11 + (_$UInt_UInt_$Impl_$.toFloat(c1 & 255) - a11);
			p6.b = ((x13 > 0 ? x13 + .5 : x13 < 0 ? x13 - .5 : 0) | 0) / 255;
			p6.scaleX = p6.scaleY = (0.3 + Math.random() * 0.39999999999999997) * (Std.random(2) * 2 - 1);
			p6.scaleMul = null ? (0.98 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.98 + Math.random() * 0.010000000000000009;
			p6.dx = Math.random() * 9 * (Std.random(2) * 2 - 1);
			p6.dy = i <= n * 0.25 ? -(null ? (6 + Math.random() * 6) * (Std.random(2) * 2 - 1) : 6 + Math.random() * 6) : -(null ? (1 + Math.random() * 6) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 6);
			p6.gy = null ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998;
			p6.frictX = p6.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p6.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p6.dr = Math.random() * 0.3 * (Std.random(2) * 2 - 1);
			p6.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
			p6.onUpdate = $bind(this,this._hardPhysics);
			var d = i > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d1 = d * p6.fps;
			d1 = 0 > d1 ? 0 : d1;
			p6.visible = d1 <= 0;
			p6.delayF = d1;
		}
		var n1 = 20;
		var _g14 = 0;
		var _g5 = n1;
		while(_g14 < _g5) {
			var i1 = _g14++;
			var t3 = Assets.gameElements.getTileRandom("bigDirt");
			var x14 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y2 = y + Math.random() * 4 * (Std.random(2) * 2 - 1);
			var _this3 = this.pool;
			var sb3 = this.bgNormalSb;
			var p9;
			if(_this3.nalloc < _this3.all.length) {
				var p10 = _this3.all[_this3.nalloc];
				p10.reset(sb3,t3,x14,y2);
				p10.poolIdx = _this3.nalloc;
				_this3.nalloc++;
				p9 = p10;
			} else {
				var best3 = null;
				var _g6 = 0;
				var _g15 = _this3.all;
				while(_g6 < _g15.length) {
					var p11 = _g15[_g6];
					++_g6;
					if(best3 == null || p11.stamp <= best3.stamp) {
						best3 = p11;
					}
				}
				if(best3.onKill != null) {
					best3.onKill();
				}
				best3.reset(sb3,t3,x14,y2);
				p9 = best3;
			}
			var ratio1 = null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1;
			var a12 = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
			var x15 = a12 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a12) * ratio1;
			var a13 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
			var x16 = a13 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a13) * ratio1;
			var a14 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
			var x17 = a14 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a14) * ratio1;
			var c2 = ((x15 > 0 ? x15 + .5 : x15 < 0 ? x15 - .5 : 0) | 0) << 16 | ((x16 > 0 ? x16 + .5 : x16 < 0 ? x16 - .5 : 0) | 0) << 8 | ((x17 > 0 ? x17 + .5 : x17 < 0 ? x17 - .5 : 0) | 0);
			var a15 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x18 = a15 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 16) - a15);
			p9.r = ((x18 > 0 ? x18 + .5 : x18 < 0 ? x18 - .5 : 0) | 0) / 255;
			var a16 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x19 = a16 + (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 8 & 255) - a16);
			p9.g = ((x19 > 0 ? x19 + .5 : x19 < 0 ? x19 - .5 : 0) | 0) / 255;
			var a17 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x20 = a17 + (_$UInt_UInt_$Impl_$.toFloat(c2 & 255) - a17);
			p9.b = ((x20 > 0 ? x20 + .5 : x20 < 0 ? x20 - .5 : 0) | 0) / 255;
			p9.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (3 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 3 + Math.random() * 4);
			p9.scaleX = p9.scaleY = (1 + Math.random()) * (Std.random(2) * 2 - 1);
			p9.scaleMul = null ? (0.98 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.98 + Math.random() * 0.010000000000000009;
			p9.dx = Math.random() * 5 * (Std.random(2) * 2 - 1);
			p9.dy = null ? (-5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : -5 + Math.random() * 5;
			p9.gy = null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			p9.frictX = p9.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p9.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p9.dr = Math.random() * 0.3 * (Std.random(2) * 2 - 1);
			p9.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
			p9.onUpdate = $bind(this,this._hardPhysics);
			var d2 = i1 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d3 = d2 * p9.fps;
			d3 = 0 > d3 ? 0 : d3;
			p9.visible = d3 <= 0;
			p9.delayF = d3;
		}
		var n2 = 40;
		var _g16 = 0;
		var _g7 = n2;
		while(_g16 < _g7) {
			var i2 = _g16++;
			var t4 = Assets.gameElements.getTileRandom("smallSmoke");
			var x21 = x + Math.random() * 5 * (Std.random(2) * 2 - 1);
			var y3 = y + Math.random() * 7 * (Std.random(2) * 2 - 1);
			var _this4 = this.pool;
			var sb4 = this.bgNormalSb;
			var p12;
			if(_this4.nalloc < _this4.all.length) {
				var p13 = _this4.all[_this4.nalloc];
				p13.reset(sb4,t4,x21,y3);
				p13.poolIdx = _this4.nalloc;
				_this4.nalloc++;
				p12 = p13;
			} else {
				var best4 = null;
				var _g8 = 0;
				var _g17 = _this4.all;
				while(_g8 < _g17.length) {
					var p14 = _g17[_g8];
					++_g8;
					if(best4 == null || p14.stamp <= best4.stamp) {
						best4 = p14;
					}
				}
				if(best4.onKill != null) {
					best4.onKill();
				}
				best4.reset(sb4,t4,x21,y3);
				p12 = best4;
			}
			p12.colorAnimS(14763294,2236469,null ? (2 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 2 + Math.random() * 2);
			p12.setFadeS(null ? (0.2 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.2,0,null ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5);
			p12.scaleX = p12.scaleY = (1.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1);
			p12.scaleMul = null ? (0.998 + Math.random() * 0.0010000000000000009) * (Std.random(2) * 2 - 1) : 0.998 + Math.random() * 0.0010000000000000009;
			p12.dx = Math.random() * 1.3 * (Std.random(2) * 2 - 1);
			p12.dy = null ? (-2 + Math.random() * 2) * (Std.random(2) * 2 - 1) : -2 + Math.random() * 2;
			p12.frictX = p12.frictY = null ? (0.93 + Math.random() * 0.029999999999999916) * (Std.random(2) * 2 - 1) : 0.93 + Math.random() * 0.029999999999999916;
			p12.gy = -(null ? (0.005 + Math.random() * 0.003) * (Std.random(2) * 2 - 1) : 0.005 + Math.random() * 0.003);
			p12.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p12.dr = Math.random() * 0.02 * (Std.random(2) * 2 - 1);
			p12.set_lifeS(null ? (4 + Math.random()) * (Std.random(2) * 2 - 1) : 4 + Math.random());
			var d4 = i2 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d5 = d4 * p12.fps;
			d5 = 0 > d5 ? 0 : d5;
			p12.visible = d5 <= 0;
			p12.delayF = d5;
		}
		var n3 = 40;
		var _g18 = 0;
		var _g9 = n3;
		while(_g18 < _g9) {
			var i3 = _g18++;
			var t5 = Assets.gameElements.getTileRandom("smallSmoke");
			var x22 = x + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var y4 = y - (null ? Math.random() * 6 * (Std.random(2) * 2 - 1) : Math.random() * 6);
			var _this5 = this.pool;
			var sb5 = this.topAddSb;
			var p15;
			if(_this5.nalloc < _this5.all.length) {
				var p16 = _this5.all[_this5.nalloc];
				p16.reset(sb5,t5,x22,y4);
				p16.poolIdx = _this5.nalloc;
				_this5.nalloc++;
				p15 = p16;
			} else {
				var best5 = null;
				var _g10 = 0;
				var _g19 = _this5.all;
				while(_g10 < _g19.length) {
					var p17 = _g19[_g10];
					++_g10;
					if(best5 == null || p17.stamp <= best5.stamp) {
						best5 = p17;
					}
				}
				if(best5.onKill != null) {
					best5.onKill();
				}
				best5.reset(sb5,t5,x22,y4);
				p15 = best5;
			}
			p15.colorAnimS(15175436,5922712,null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			p15.setFadeS(null ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004,0,null ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5);
			p15.scaleX = p15.scaleY = (0.8 + Math.random() * 0.7) * (Std.random(2) * 2 - 1);
			p15.scaleMul = null ? (0.97 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.020000000000000018;
			var spd = null ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2;
			var a18 = Math.atan2(y - p15.y,x - p15.x);
			p15.dx = -Math.cos(a18) * spd;
			p15.dy = -Math.sin(a18) * spd;
			p15.frictX = p15.frictY = null ? (0.85 + Math.random() * 0.10999999999999999) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.10999999999999999;
			p15.rotation = null ? Math.random() * 6.28 * (Std.random(2) * 2 - 1) : Math.random() * 6.28;
			p15.dr = Math.random() * 0.03 * (Std.random(2) * 2 - 1);
			p15.set_lifeS(null ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
			var d6 = i3 > 20 ? null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1 : 0;
			var d7 = d6 * p15.fps;
			d7 = 0 > d7 ? 0 : d7;
			p15.visible = d7 <= 0;
			p15.delayF = d7;
		}
	}
	,_dust: function(p) {
		p.rotation = Math.atan2(p.dy,p.dx);
	}
	,noAmmo: function(x,y,dir) {
		var n = 9;
		var base = dir == 1 ? 0 : 3.14;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var a = base + -1.7 + 3.4 * i / (n - 1);
			var t = Assets.gameElements.getTileRandom("dot");
			var x1 = x + Math.cos(a) * 5;
			var y1 = y + Math.sin(a) * 5;
			var _this = this.pool;
			var sb = this.topAddSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y1);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y1);
				p = best;
			}
			p.setFadeS(0.4,0,0.06);
			p.rotation = a;
			p.scaleX = i % 2 == 0 ? 2 : 5;
			p.scaleXMul = 0.96;
			p.dx = Math.cos(a);
			p.dy = Math.sin(a);
			p.frictX = p.frictY = 0.8;
			p.set_lifeS(0.1);
		}
	}
	,allSpots: function(y,wid) {
		var n = 50;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("spot");
			var x = i / (n - 1) * wid + Math.random() * 3 * (Std.random(2) * 2 - 1);
			var _this = this.pool;
			var sb = this.bgAddSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x,y);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x,y);
				p = best;
			}
			var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(16499716 >>> 16) - a);
			p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(16499716 >>> 8 & 255) - a1);
			p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(16499716 & 255) - a2);
			p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
			var _this1 = p.t;
			_this1.dx = -(0.2 * _this1.width | 0);
			_this1.dy = -(0.5 * _this1.height | 0);
			p.animXr = 0.2;
			p.animYr = 0.5;
			p.setFadeS(null ? (0.4 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.099999999999999978,0,null ? (0.3 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 0.5);
			p.scaleX = null ? (0.75 + Math.random() * 0.25) * (Std.random(2) * 2 - 1) : 0.75 + Math.random() * 0.25;
			p.scaleY = null ? (0.4 + Math.random() * 0.6) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.6;
			p.rotation = 2.0700000000000003 - i / (n - 1);
			p.dr = 0.015 - 0.030 * i / (n - 1);
			p.set_lifeS(null ? (0.4 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.19999999999999996);
		}
	}
	,spotLight: function(x,y) {
		var t = Assets.gameElements.getTileRandom("spot");
		var _this = this.pool;
		var sb = this.bgAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var hsl = { h : null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random(), s : 1, l : 1};
		var c_r = 0;
		var c_g = 0;
		var c_b = 0;
		var r = 0.;
		var g = 0.;
		var b = 0.;
		if(hsl.s == 0) {
			c_b = Math.round(hsl.l * 255);
			c_g = c_b;
			c_r = c_g;
		} else {
			var h = hsl.h * 6;
			var i = Math.floor(h);
			var c1 = hsl.l * (1 - hsl.s);
			var c2 = hsl.l * (1 - hsl.s * (h - i));
			var c3 = hsl.l * (1 - hsl.s * (1 - (h - i)));
			if(i == 0 || i == 6) {
				r = hsl.l;
				g = c3;
				b = c1;
			} else if(i == 1) {
				r = c2;
				g = hsl.l;
				b = c1;
			} else if(i == 2) {
				r = c1;
				g = hsl.l;
				b = c3;
			} else if(i == 3) {
				r = c1;
				g = c2;
				b = hsl.l;
			} else if(i == 4) {
				r = c3;
				g = c1;
				b = hsl.l;
			} else {
				r = hsl.l;
				g = c1;
				b = c2;
			}
			c_r = Math.round(r * 255);
			c_g = Math.round(g * 255);
			c_b = Math.round(b * 255);
		}
		var c = c_r << 16 | c_g << 8 | c_b;
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		var _this1 = p.t;
		_this1.dx = -(0.2 * _this1.width | 0);
		_this1.dy = -(0.5 * _this1.height | 0);
		p.animXr = 0.2;
		p.animYr = 0.5;
		p.setFadeS(null ? (0.1 + Math.random() * 0.049999999999999989) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.049999999999999989,null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1,null ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998);
		p.scaleX = null ? (0.75 + Math.random() * 0.25) * (Std.random(2) * 2 - 1) : 0.75 + Math.random() * 0.25;
		p.scaleY = null ? (0.4 + Math.random() * 0.6) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 0.6;
		p.rotation = 1.57 + (null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1);
		p.dr = Math.random() * 0.01 * (Std.random(2) * 2 - 1);
		p.set_lifeS(null ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998);
		var d = null ? Math.random() * 0.4 * (Std.random(2) * 2 - 1) : Math.random() * 0.4;
		var d1 = d * p.fps;
		d1 = 0 > d1 ? 0 : d1;
		p.visible = d1 <= 0;
		p.delayF = d1;
	}
	,lazer: function(x) {
		var t = Assets.gameElements.getTileRandom("dot");
		var y = null ? (20 + Math.random() * 10) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 10;
		var _this = this.pool;
		var sb = this.bgAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(33023 >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(33023 >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(33023 & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		var _this1 = p.t;
		_this1.dx = -(0 * _this1.width | 0);
		_this1.dy = -(0.5 * _this1.height | 0);
		p.animXr = 0;
		p.animYr = 0.5;
		p.setFadeS(null ? (0.02 + Math.random() * 0.030000000000000002) * (Std.random(2) * 2 - 1) : 0.02 + Math.random() * 0.030000000000000002,null ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1,null ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998);
		p.scaleX = null ? (50 + Math.random() * 20) * (Std.random(2) * 2 - 1) : 50 + Math.random() * 20;
		p.rotation = null ? Math.random() * 3.14 * (Std.random(2) * 2 - 1) : Math.random() * 3.14;
		p.dr = Math.random() * 0.001 * (Std.random(2) * 2 - 1);
		p.set_lifeS(null ? (0.1 + Math.random() * 0.19999999999999998) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.19999999999999998);
		var d = null ? Math.random() * 0.4 * (Std.random(2) * 2 - 1) : Math.random() * 0.4;
		var d1 = d * p.fps;
		d1 = 0 > d1 ? 0 : d1;
		p.visible = d1 <= 0;
		p.delayF = d1;
	}
	,bullet: function(x,y,dir) {
		var t = Assets.gameElements.getTileRandom("dot");
		var _this = this.pool;
		var sb = this.topNormalSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		p.scaleX = 2;
		p.scaleY = 1;
		p.setFadeS(1,0,null ? (7 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 7 + Math.random() * 3);
		p.dr = dir * (null ? (0.18 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.18 + Math.random() * 0.020000000000000018);
		p.dx = dir * (null ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1);
		p.dy = null ? (-0.2 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : -0.2 + Math.random() * 0.30000000000000004;
		p.gy = 0.04;
		p.frictX = p.frictY = 0.99;
		p.onUpdate = $bind(this,this._hardPhysics);
		p.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
	}
	,charger: function(x,y,dir) {
		var t = Assets.gameElements.getTileRandom("dot");
		var _this = this.pool;
		var sb = this.topNormalSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a);
		p.r = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a1);
		p.g = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a2);
		p.b = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		p.scaleX = 4;
		p.scaleY = 2;
		p.setFadeS(1,0,null ? (7 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 7 + Math.random() * 3);
		p.dr = dir * (null ? (0.11 + Math.random() * 0.020000000000000004) * (Std.random(2) * 2 - 1) : 0.11 + Math.random() * 0.020000000000000004);
		p.dx = dir * 1.1;
		p.dy = -0.8;
		p.gy = 0.04;
		p.frictX = p.frictY = 0.99;
		p.onUpdate = $bind(this,this._hardPhysics);
		p.set_lifeS(null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5);
		var d = 0.25 * p.fps;
		d = 0 > d ? 0 : d;
		p.visible = d <= 0;
		p.delayF = d;
	}
	,envDust: function() {
		var n = 6;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var t = Assets.gameElements.getTileRandom("dot");
			var x = Boot.ME.s2d.width / Const.SCALE;
			var max;
			if(x > .0) {
				var t1 = x + .5 | 0;
				max = t1 < x ? t1 + 1 : t1;
			} else if(x < .0) {
				var t2 = x - .5 | 0;
				max = t2 < x ? t2 + 1 : t2;
			} else {
				max = 0;
			}
			var x1 = null ? Math.random() * max * (Std.random(2) * 2 - 1) : Math.random() * max;
			var x2 = Boot.ME.s2d.height / Const.SCALE;
			var max1;
			if(x2 > .0) {
				var t3 = x2 + .5 | 0;
				max1 = t3 < x2 ? t3 + 1 : t3;
			} else if(x2 < .0) {
				var t4 = x2 - .5 | 0;
				max1 = t4 < x2 ? t4 + 1 : t4;
			} else {
				max1 = 0;
			}
			var y = null ? Math.random() * max1 * (Std.random(2) * 2 - 1) : Math.random() * max1;
			var _this = this.pool;
			var sb = this.topAddSb;
			var p;
			if(_this.nalloc < _this.all.length) {
				var p1 = _this.all[_this.nalloc];
				p1.reset(sb,t,x1,y);
				p1.poolIdx = _this.nalloc;
				_this.nalloc++;
				p = p1;
			} else {
				var best = null;
				var _g2 = 0;
				var _g11 = _this.all;
				while(_g2 < _g11.length) {
					var p2 = _g11[_g2];
					++_g2;
					if(best == null || p2.stamp <= best.stamp) {
						best = p2;
					}
				}
				if(best.onKill != null) {
					best.onKill();
				}
				best.reset(sb,t,x1,y);
				p = best;
			}
			p.setFadeS(null ? (0.07 + Math.random() * 0.049999999999999989) * (Std.random(2) * 2 - 1) : 0.07 + Math.random() * 0.049999999999999989,null ? (0.6 + Math.random() * 0.4) * (Std.random(2) * 2 - 1) : 0.6 + Math.random() * 0.4,null ? (2 + Math.random()) * (Std.random(2) * 2 - 1) : 2 + Math.random());
			p.scaleX = null ? (5 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 5;
			p.scaleXMul = null ? (0.97 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.020000000000000018;
			p.dx = null ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2;
			p.dy = null ? (-1 + Math.random() * 3) * (Std.random(2) * 2 - 1) : -1 + Math.random() * 3;
			p.frictX = p.frictY = null ? (0.94 + Math.random() * 0.030000000000000027) * (Std.random(2) * 2 - 1) : 0.94 + Math.random() * 0.030000000000000027;
			p.gx = null ? (0.01 + Math.random() * 0.019999999999999997) * (Std.random(2) * 2 - 1) : 0.01 + Math.random() * 0.019999999999999997;
			p.gy = null ? (0.01 + Math.random() * 0.01) * (Std.random(2) * 2 - 1) : 0.01 + Math.random() * 0.01;
			p.set_lifeS(null ? (2 + Math.random()) * (Std.random(2) * 2 - 1) : 2 + Math.random());
			p.onUpdate = $bind(this,this._dust);
		}
	}
	,update: function() {
		this.speedMod = Game.ME.getSlowMoFactor();
		mt_Process.prototype.update.call(this);
		var _this = this.cd;
		var frames = Const.INFINITE * this.cd.baseFps;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(79691776)) {
			tmp = true;
		} else {
			var frames1 = frames;
			frames1 = Math.floor(frames1 * 1000) / 1000;
			var cur = _this._getCdObject(79691776);
			if(!(cur != null && frames1 < cur.frames && false)) {
				if(frames1 <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[79691776] = true;
					if(cur != null) {
						cur.frames = frames1;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(79691776,frames1));
					}
				}
			}
			tmp = false;
		}
		if(!tmp) {
			var _g = 0;
			while(_g < 30) {
				var i = _g++;
				this.envDust();
			}
		}
		var _this1 = this.cd;
		var frames2 = 0.06 * this.cd.baseFps;
		var tmp1;
		if(_this1.fastCheck.h.hasOwnProperty(83886080)) {
			tmp1 = true;
		} else {
			var frames3 = frames2;
			frames3 = Math.floor(frames3 * 1000) / 1000;
			var cur1 = _this1._getCdObject(83886080);
			if(!(cur1 != null && frames3 < cur1.frames && false)) {
				if(frames3 <= 0) {
					if(cur1 != null) {
						HxOverrides.remove(_this1.cdList,cur1);
						cur1.frames = 0;
						cur1.cb = null;
						_this1.fastCheck.remove(cur1.k);
					}
				} else {
					_this1.fastCheck.h[83886080] = true;
					if(cur1 != null) {
						cur1.frames = frames3;
					} else {
						_this1.cdList.push(new mt__$Cooldown_CdInst(83886080,frames3));
					}
				}
			}
			tmp1 = false;
		}
		if(!tmp1) {
			this.envDust();
		}
		this.pool.update(Game.ME.getSlowMoDt());
	}
	,__class__: Fx
});
var Game = function(ctx,replayHistory) {
	var _gthis = this;
	mt_Process.call(this,Main.ME);
	Game.ME = this;
	this.createRoot(ctx);
	if(replayHistory != null) {
		this.isReplay = true;
		this.heroHistory = replayHistory.slice();
	} else {
		this.heroHistory = [];
		this.isReplay = false;
	}
	this.scroller = new h2d_Layers(this.root);
	this.vp = new Viewport();
	this.fx = new Fx();
	this.clickTrap = new h2d_Interactive(1,1,Main.ME.root);
	this.clickTrap.onPush = $bind(this,this.onMouseDown);
	this.hud = new h2d_Flow();
	this.root.addChildAt(this.hud,Const.DP_UI);
	this.hud.set_horizontalSpacing(1);
	this.waveId = -1;
	this.level = new Level();
	this.hero = new en_Hero(2,4);
	this.logo();
	var _this = Main.ME.cd;
	var frames = Const.INFINITE * Main.ME.cd.baseFps;
	var tmp;
	if(_this.fastCheck.h.hasOwnProperty(29360128)) {
		tmp = true;
	} else {
		var frames1 = frames;
		frames1 = Math.floor(frames1 * 1000) / 1000;
		var cur = _this._getCdObject(29360128);
		if(!(cur != null && frames1 < cur.frames && false)) {
			if(frames1 <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this.fastCheck.remove(cur.k);
				}
			} else {
				_this.fastCheck.h[29360128] = true;
				if(cur != null) {
					cur.frames = frames1;
				} else {
					_this.cdList.push(new mt__$Cooldown_CdInst(29360128,frames1));
				}
			}
		}
		tmp = false;
	}
	if(!tmp) {
		var _this1 = this.cd;
		var frames2 = 5 * this.cd.baseFps;
		frames2 = Math.floor(frames2 * 1000) / 1000;
		var cur1 = _this1._getCdObject(33554432);
		if(!(cur1 != null && frames2 < cur1.frames && false)) {
			if(frames2 <= 0) {
				if(cur1 != null) {
					HxOverrides.remove(_this1.cdList,cur1);
					cur1.frames = 0;
					cur1.cb = null;
					_this1.fastCheck.remove(cur1.k);
				}
			} else {
				_this1.fastCheck.h[33554432] = true;
				if(cur1 != null) {
					cur1.frames = frames2;
				} else {
					_this1.cdList.push(new mt__$Cooldown_CdInst(33554432,frames2));
				}
			}
		}
		this.delayer.addS(null,function() {
			_gthis.announce("A fast turned-based action game",7367372);
		},1);
	}
	this.vp.repos();
	this.onResize();
};
$hxClasses["Game"] = Game;
Game.__name__ = ["Game"];
Game.__super__ = mt_Process;
Game.prototype = $extend(mt_Process.prototype,{
	updateHud: function() {
		var _this = this.cd;
		var frames = Const.INFINITE * this.cd.baseFps;
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this._getCdObject(20971520);
		if(!(cur != null && frames < cur.frames && false)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this.fastCheck.remove(cur.k);
				}
			} else {
				_this.fastCheck.h[20971520] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this.cdList.push(new mt__$Cooldown_CdInst(20971520,frames));
				}
			}
		}
	}
	,_updateHud: function() {
		if(!this.cd.fastCheck.h.hasOwnProperty(20971520)) {
			return;
		}
		this.hud.removeChildren();
		var _this = this.cd;
		var _g = 0;
		var _g1 = _this.cdList;
		while(_g < _g1.length) {
			var cd = _g1[_g];
			++_g;
			if(cd.k == 20971520) {
				HxOverrides.remove(_this.cdList,cd);
				cd.frames = 0;
				cd.cb = null;
				_this.fastCheck.remove(cd.k);
				break;
			}
		}
		var _g11 = 0;
		var x = this.hero.maxLife;
		var _g2 = x < 6 ? x : 6;
		while(_g11 < _g2) {
			var i = _g11++;
			var p = this.hud;
			var s = new mt_heaps_slib_HSprite(Assets.gameElements,"iconHeart",0);
			if(p != null) {
				p.addChild(s);
			}
			var _this1 = s.pivot;
			_this1.centerFactorX = 0.;
			_this1.centerFactorY = 0.;
			_this1.usingFactor = true;
			_this1.isUndefined = false;
			var e = s;
			var _this2 = e.color;
			var c = (255. | 0) << 24 | (i + 1 <= this.hero.life ? 16777215 : 16711680);
			_this2.x = (c >> 16 & 255) / 255;
			_this2.y = (c >> 8 & 255) / 255;
			_this2.z = (c & 255) / 255;
			_this2.w = (c >>> 24) / 255;
			e.alpha = i + 1 <= this.hero.life ? 1 : 0.8;
			e.blendMode = h2d_BlendMode.Add;
		}
		this.hud.addSpacing(4);
		var _g12 = 0;
		var _g3 = this.hero.maxAmmo;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var p1 = this.hud;
			var s1 = new mt_heaps_slib_HSprite(Assets.gameElements,"iconBullet",0);
			if(p1 != null) {
				p1.addChild(s1);
			}
			var _this3 = s1.pivot;
			_this3.centerFactorX = 0.;
			_this3.centerFactorY = 0.;
			_this3.usingFactor = true;
			_this3.isUndefined = false;
			var e1 = s1;
			var _this4 = e1.color;
			var c1 = (255. | 0) << 24 | (i1 + 1 <= this.hero.ammo ? 16777215 : 16711680);
			_this4.x = (c1 >> 16 & 255) / 255;
			_this4.y = (c1 >> 8 & 255) / 255;
			_this4.z = (c1 & 255) / 255;
			_this4.w = (c1 >>> 24) / 255;
			e1.alpha = i1 + 1 <= this.hero.ammo ? 1 : 0.8;
			e1.blendMode = h2d_BlendMode.Add;
		}
		this.onResize();
	}
	,onMouseDown: function(ev) {
		var m = this.getMouse();
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.onClick(m.x,m.y,ev.button);
		}
	}
	,onResize: function() {
		mt_Process.prototype.onResize.call(this);
		var tmp = mt_Process.CUSTOM_STAGE_WIDTH > 0 ? mt_Process.CUSTOM_STAGE_WIDTH : hxd_Stage.getInstance().get_width();
		this.clickTrap.width = tmp;
		var tmp1 = mt_Process.CUSTOM_STAGE_HEIGHT > 0 ? mt_Process.CUSTOM_STAGE_HEIGHT : hxd_Stage.getInstance().get_height();
		this.clickTrap.height = tmp1;
		var _this = this.hud;
		var v = (mt_Process.CUSTOM_STAGE_WIDTH > 0 ? mt_Process.CUSTOM_STAGE_WIDTH : hxd_Stage.getInstance().get_width()) * 0.5 / Const.SCALE - this.hud.get_outerWidth() * 0.5 | 0;
		_this.posChanged = true;
		_this.x = v;
		var _this1 = this.hud;
		_this1.posChanged = true;
		_this1.y = this.level.hei * Const.GRID | 0;
	}
	,onDispose: function() {
		mt_Process.prototype.onDispose.call(this);
		if(Game.ME == this) {
			Game.ME = null;
		}
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.destroyed = true;
		}
		this.gc();
	}
	,gc: function() {
		var i = 0;
		while(i < Entity.ALL.length) if(Entity.ALL[i].destroyed) {
			Entity.ALL[i].dispose();
		} else {
			++i;
		}
	}
	,postUpdate: function() {
		mt_Process.prototype.postUpdate.call(this);
		this._updateHud();
	}
	,getMouse: function() {
		var gx = hxd_Stage.getInstance().get_mouseX();
		var gy = hxd_Stage.getInstance().get_mouseY();
		var x = gx / Const.SCALE - this.scroller.x | 0;
		var y = gy / Const.SCALE - this.scroller.y | 0;
		return { x : x, y : y, cx : x / Const.GRID | 0, cy : y / Const.GRID | 0};
	}
	,logo: function() {
		var _gthis = this;
		var p = this.root;
		var s = new mt_heaps_slib_HSprite(Assets.gameElements,"logo",0);
		if(p != null) {
			p.addChild(s);
		}
		var _this = s.pivot;
		_this.centerFactorX = 0.;
		_this.centerFactorY = 0.;
		_this.usingFactor = true;
		_this.isUndefined = false;
		var e = s;
		e.posChanged = true;
		e.y = 30;
		var _this1 = e.color;
		var c = (255. | 0) << 24 | 4023746;
		_this1.x = (c >> 16 & 255) / 255;
		_this1.y = (c >> 8 & 255) / 255;
		_this1.z = (c & 255) / 255;
		_this1.w = (c >>> 24) / 255;
		e.blendMode = h2d_BlendMode.Add;
		var _tween = this.tw;
		if(!e.destroyed && e.lib != null && e.groupName != null) {
			var fd = e.frameData;
			e.rawTile.setPos(fd.x,fd.y);
			e.rawTile.setSize(fd.wid,fd.hei);
			var _this2 = e.pivot;
			if(!_this2.isUndefined && !_this2.usingFactor) {
				e.rawTile.dx = -(e.pivot.coordX + fd.realX | 0);
				e.rawTile.dy = -(e.pivot.coordY + fd.realY | 0);
			} else {
				var _this3 = e.pivot;
				if(!_this3.isUndefined && _this3.usingFactor) {
					e.rawTile.dx = -(fd.realWid * e.pivot.centerFactorX + fd.realX | 0);
					e.rawTile.dy = -(fd.realHei * e.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this4 = e.pivot;
			if(!_this4.isUndefined && !_this4.usingFactor) {
				e.rawTile.dx = -(e.pivot.coordX | 0);
				e.rawTile.dy = -(e.pivot.coordY | 0);
			} else {
				var _this5 = e.pivot;
				if(!_this5.isUndefined && _this5.usingFactor) {
					e.rawTile.dx = -(e.rawTile.width * e.pivot.centerFactorX | 0);
					e.rawTile.dy = -(e.rawTile.height * e.pivot.centerFactorY | 0);
				}
			}
		}
		var _tween1 = _tween.create_(function() {
			return e.x;
		},function(_setV) {
			e.posChanged = true;
			e.x = _setV;
		},-e.rawTile.width,12,null,250);
		_tween1.delayMs(500);
		_tween1.onEnd = function() {
			var d = 5000;
			var _tween2 = _gthis.tw.create_(function() {
				return e.alpha;
			},function(_setV1) {
				e.alpha = _setV1;
			},null,0,null,1500);
			_tween2.delayMs(d);
			_tween2.onEnd = $bind(e,e.remove);
		};
	}
	,announce: function(txt,c,permanent) {
		if(permanent == null) {
			permanent = false;
		}
		if(c == null) {
			c = 16777215;
		}
		var _gthis = this;
		var tf = new h2d_Text(Assets.font,this.root);
		tf.set_text(txt);
		tf.set_textColor(c);
		var v = 58 - tf.get_textHeight() | 0;
		tf.posChanged = true;
		tf.y = v;
		var _tween = this.tw.create_(function() {
			return tf.x;
		},function(_setV) {
			tf.posChanged = true;
			tf.x = _setV;
		},-tf.get_textWidth(),12,null,200);
		_tween.delayMs(500);
		_tween.onEnd = function() {
			if(!permanent) {
				var d = 1000 + txt.length * 75;
				var _tween1 = _gthis.tw.create_(function() {
					return tf.alpha;
				},function(_setV1) {
					tf.alpha = _setV1;
				},null,0,null,1500);
				_tween1.delayMs(d);
				_tween1.onEnd = $bind(tf,tf.remove);
			}
		};
	}
	,nextLevel: function() {
		var _gthis = this;
		this.waveId++;
		this.level.waveMobCount = 1;
		if(this.waveId > 6) {
			this.announce("Thank you for playing ^_^\nA 20h game by Sebastien Benard\ndeepnight.net",null,true);
		} else {
			this.announce("Wave " + (this.waveId + 1) + "...",16765212);
			this.delayer.addS(null,function() {
				_gthis.announce("          Fight!",15681552);
			},0.5);
			this.delayer.addS(null,function() {
				_gthis.level.attacheWaveEntities(_gthis.waveId);
			},this.waveId == 0 ? 1 : 1);
		}
	}
	,isSlowMo: function() {
		var tmp;
		if(!this.isReplay) {
			var _this = this.hero;
			tmp = !(_this.life > 0 && !_this.destroyed);
		} else {
			tmp = true;
		}
		if(tmp || this.hero.controlsLocked()) {
			return false;
		}
		var _g = 0;
		var _g1 = en_Mob.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.life > 0 && !e.destroyed && e.canBeShot()) {
				return true;
			}
		}
		return false;
	}
	,getSlowMoDt: function() {
		if(this.isSlowMo()) {
			return this.dt * Const.PAUSE_SLOWMO;
		} else {
			return this.dt;
		}
	}
	,getSlowMoFactor: function() {
		if(this.isSlowMo()) {
			return Const.PAUSE_SLOWMO;
		} else {
			return 1;
		}
	}
	,update: function() {
		mt_Process.prototype.update.call(this);
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.setDt(this.dt);
			if(!e.destroyed) {
				e.preUpdate();
			}
			if(!e.destroyed) {
				e.update();
			}
			if(!e.destroyed) {
				e.postUpdate();
			}
		}
		this.gc();
		if(!this.cd.fastCheck.h.hasOwnProperty(33554432) && this.level.waveMobCount <= 0) {
			this.nextLevel();
		}
		if(Main.ME.keyPressed(27)) {
			Main.ME.restartGame();
		}
		if(Main.ME.keyPressed(77)) {
			mt_deepnight_Sfx.toggleMuteGroup(1);
		}
		if(this.isReplay && this.heroHistory.length > 0 && (this.ftime | 0) >= this.heroHistory[0].t) {
			this.hero.executeAction(this.heroHistory.shift().a);
		}
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Level = function() {
	this.curHue = 0.;
	mt_Process.call(this,Game.ME);
	this.wid = 20;
	this.hei = 7;
	this.createRootInLayers(Game.ME.scroller,Const.DP_BG);
	var mask = new h2d_Graphics(this.root);
	mask.beginFill(0,1);
	mask.drawRect(0,0,this.wid * Const.GRID,this.hei * Const.GRID);
	var p = this.root;
	var s = new mt_heaps_slib_HSprite(Assets.gameElements,"bg",0);
	if(p != null) {
		p.addChild(s);
	}
	var _this = s.pivot;
	_this.centerFactorX = 0.;
	_this.centerFactorY = 0.;
	_this.usingFactor = true;
	_this.isUndefined = false;
	this.bg = s;
	this.debug = new h2d_Graphics(this.root);
	this.debug.beginFill(16776960,1);
	var this1 = new Array(this.wid * this.hei);
	this.collMap = this1;
	var _g1 = 0;
	var _g = this.wid;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = this.hei - 2;
		var _g2 = this.hei;
		while(_g3 < _g2) {
			var y = _g3++;
			this.setColl(x,y,true);
		}
	}
	this.crowd = new h2d_Sprite(this.root);
	this.people = [];
	var getDancer = function() {
		var _g4 = Std.random(3);
		switch(_g4) {
		case 0:
			return "dancingA";
		case 1:
			return "dancingB";
		case 2:
			return "dancingC";
		default:
			return "dancingA";
		}
	};
	var x1 = 10;
	while(x1 < this.wid * Const.GRID) {
		var p1 = this.crowd;
		var s1 = new mt_heaps_slib_HSprite(Assets.gameElements,"dancingA",0);
		if(p1 != null) {
			p1.addChild(s1);
		}
		var _this1 = s1.pivot;
		_this1.centerFactorX = 0.;
		_this1.centerFactorY = 0.;
		_this1.usingFactor = true;
		_this1.isUndefined = false;
		var e = s1;
		if(e._animManager == null) {
			e._animManager = new mt_heaps_slib_AnimManager(e);
			if(e.onAnimManAlloc != null) {
				e.onAnimManAlloc(e._animManager);
			}
		}
		var _this2 = e._animManager.play(getDancer()).loop();
		var s2 = null ? (0.8 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.19999999999999996;
		if(!_this2.destroyed && _this2.stack.length > 0) {
			_this2.stack[_this2.stack.length - 1].speed = s2;
		}
		var y1 = this.hei * Const.GRID - 14;
		var y2 = null ? (25 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 25 + Math.random() * 5;
		e.posChanged = true;
		e.x = x1;
		e.posChanged = true;
		e.y = y1 - y2;
		var _this3 = e.pivot;
		_this3.centerFactorX = 0.5;
		_this3.centerFactorY = 1;
		_this3.usingFactor = true;
		_this3.isUndefined = false;
		var v = null ? (0.6 + Math.random() * 0.099999999999999978) * (Std.random(2) * 2 - 1) : 0.6 + Math.random() * 0.099999999999999978;
		e.posChanged = true;
		e.scaleX = v;
		e.posChanged = true;
		e.scaleY = v;
		var _this4 = e.color;
		var c = (255. | 0) << 24 | 8588879;
		_this4.x = (c >> 16 & 255) / 255;
		_this4.y = (c >> 8 & 255) / 255;
		_this4.z = (c & 255) / 255;
		_this4.w = (c >>> 24) / 255;
		this.people.push(e);
		x1 += null ? (6 + Std.random(10)) * (Std.random(2) * 2 - 1) : 6 + Std.random(10);
	}
	var x2 = 0;
	while(x2 < this.wid * Const.GRID) {
		var p2 = this.crowd;
		var s3 = new mt_heaps_slib_HSprite(Assets.gameElements,"dancingA",0);
		if(p2 != null) {
			p2.addChild(s3);
		}
		var _this5 = s3.pivot;
		_this5.centerFactorX = 0.;
		_this5.centerFactorY = 0.;
		_this5.usingFactor = true;
		_this5.isUndefined = false;
		var e1 = s3;
		if(e1._animManager == null) {
			e1._animManager = new mt_heaps_slib_AnimManager(e1);
			if(e1.onAnimManAlloc != null) {
				e1.onAnimManAlloc(e1._animManager);
			}
		}
		var _this6 = e1._animManager.play(getDancer()).loop();
		var s4 = null ? (0.85 + Math.random() * 0.25000000000000011) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.25000000000000011;
		if(!_this6.destroyed && _this6.stack.length > 0) {
			_this6.stack[_this6.stack.length - 1].speed = s4;
		}
		var y3 = this.hei * Const.GRID - 3;
		var y4 = null ? (25 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 25 + Math.random() * 5;
		e1.posChanged = true;
		e1.x = x2;
		e1.posChanged = true;
		e1.y = y3 - y4;
		var _this7 = e1.pivot;
		_this7.centerFactorX = 0.5;
		_this7.centerFactorY = 1;
		_this7.usingFactor = true;
		_this7.isUndefined = false;
		var _this8 = e1.color;
		var c1 = (255. | 0) << 24 | 6816353;
		_this8.x = (c1 >> 16 & 255) / 255;
		_this8.y = (c1 >> 8 & 255) / 255;
		_this8.z = (c1 & 255) / 255;
		_this8.w = (c1 >>> 24) / 255;
		this.people.push(e1);
		x2 += null ? (6 + Std.random(10)) * (Std.random(2) * 2 - 1) : 6 + Std.random(10);
	}
	var x3 = 6;
	while(x3 < this.wid * Const.GRID) {
		var p3 = this.crowd;
		var s5 = new mt_heaps_slib_HSprite(Assets.gameElements,"dancingA",0);
		if(p3 != null) {
			p3.addChild(s5);
		}
		var _this9 = s5.pivot;
		_this9.centerFactorX = 0.;
		_this9.centerFactorY = 0.;
		_this9.usingFactor = true;
		_this9.isUndefined = false;
		var e2 = s5;
		if(e2._animManager == null) {
			e2._animManager = new mt_heaps_slib_AnimManager(e2);
			if(e2.onAnimManAlloc != null) {
				e2.onAnimManAlloc(e2._animManager);
			}
		}
		var _this10 = e2._animManager.play(getDancer()).loop();
		var s6 = null ? (0.85 + Math.random() * 0.25000000000000011) * (Std.random(2) * 2 - 1) : 0.85 + Math.random() * 0.25000000000000011;
		if(!_this10.destroyed && _this10.stack.length > 0) {
			_this10.stack[_this10.stack.length - 1].speed = s6;
		}
		var y5 = this.hei * Const.GRID;
		var y6 = null ? (25 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 25 + Math.random() * 5;
		e2.posChanged = true;
		e2.x = x3;
		e2.posChanged = true;
		e2.y = y5 - y6;
		var _this11 = e2.pivot;
		_this11.centerFactorX = 0.5;
		_this11.centerFactorY = 1;
		_this11.usingFactor = true;
		_this11.isUndefined = false;
		var _this12 = e2.color;
		var c2 = (255. | 0) << 24 | 2687050;
		_this12.x = (c2 >> 16 & 255) / 255;
		_this12.y = (c2 >> 8 & 255) / 255;
		_this12.z = (c2 & 255) / 255;
		_this12.w = (c2 >>> 24) / 255;
		this.people.push(e2);
		x3 += null ? (6 + Std.random(10)) * (Std.random(2) * 2 - 1) : 6 + Std.random(10);
	}
	var _g11 = 0;
	var _g5 = this.wid;
	while(_g11 < _g5) {
		var cx = _g11++;
		var _this13 = Assets.gameElements;
		var p4 = this.root;
		var frame;
		var _this14 = _this13.groups;
		if(__map_reserved["ground"] != null ? _this14.existsReserved("ground") : _this14.h.hasOwnProperty("ground")) {
			var _this15 = _this13.groups;
			frame = (__map_reserved["ground"] != null ? _this15.getReserved("ground") : _this15.h["ground"]).frames.length > 0;
		} else {
			frame = false;
		}
		if(!frame) {
			throw new js__$Boot_HaxeError("Unknown group " + "ground");
		}
		var _this16 = _this13.groups;
		var s7 = new mt_heaps_slib_HSprite(_this13,"ground",Std.random((__map_reserved["ground"] != null ? _this16.getReserved("ground") : _this16.h["ground"]).frames.length));
		if(p4 != null) {
			p4.addChild(s7);
		}
		var _this17 = s7.pivot;
		_this17.centerFactorX = 0.;
		_this17.centerFactorY = 0.;
		_this17.usingFactor = true;
		_this17.isUndefined = false;
		var e3 = s7;
		e3.posChanged = true;
		e3.x = cx * Const.GRID;
		e3.posChanged = true;
		e3.y = (this.hei - 2) * Const.GRID;
	}
	var s8 = new mt_heaps_slib_HSprite(Assets.gameElements,"bgOver",0);
	var _this18 = s8.pivot;
	_this18.centerFactorX = 0.;
	_this18.centerFactorY = 0.;
	_this18.usingFactor = true;
	_this18.isUndefined = false;
	this.front = s8;
	Game.ME.scroller.addChildAt(this.front,Const.DP_TOP);
	var _this19 = this.front;
	_this19.posChanged = true;
	_this19.x = -32;
};
$hxClasses["Level"] = Level;
Level.__name__ = ["Level"];
Level.__super__ = mt_Process;
Level.prototype = $extend(mt_Process.prototype,{
	onDispose: function() {
		mt_Process.prototype.onDispose.call(this);
		var _this = this.front;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,hue: function(ang,sec) {
		var _gthis = this;
		var _tween = this.tw.create_(function() {
			return _gthis.curHue;
		},function(_setV) {
			_gthis.curHue = _setV;
		},null,ang,null,sec * 1000);
		_tween.onUpdate = function() {
			_gthis.bg.set_colorMatrix(new h3d_Matrix());
			_gthis.bg.get_colorMatrix().identity();
			_gthis.bg.get_colorMatrix().colorHue(_gthis.curHue);
			var _g = 0;
			var _g1 = _gthis.people;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.set_colorMatrix(new h3d_Matrix());
				e.get_colorMatrix().identity();
				e.get_colorMatrix().colorHue(_gthis.curHue);
			}
		};
	}
	,attacheWaveEntities: function(waveId) {
		var _gthis = this;
		Game.ME.fx.allSpots(25,this.wid * Const.GRID);
		var bd = hxd_Res.get_loader().loadCache("levels.png",hxd_res_Image).toBitmap();
		this.pixels = new haxe_ds_IntMap();
		var _g1 = 0;
		var _g = this.hei;
		while(_g1 < _g) {
			var cy = _g1++;
			var _g3 = 0;
			var _g2 = this.wid;
			while(_g3 < _g2) {
				var cx = _g3++;
				var c = bd.getPixel(cx,cy + waveId * 6) & 16777215;
				if(!this.pixels.h.hasOwnProperty(c)) {
					this.pixels.h[c] = [];
				}
				this.pixels.h[c].push(new CPoint(cx,cy));
			}
		}
		var c1 = bd.getPixel(0,waveId * 6) & 16777215;
		var c_r = c1 >> 16;
		var c_g = c1 >> 8 & 255;
		var c_b = c1 & 255;
		var r = c_r / 255;
		var g = c_g / 255;
		var b = c_b / 255;
		var min = r <= g && r <= b ? r : g <= b ? g : b;
		var max = r >= g && r >= b ? r : g >= b ? g : b;
		var delta = max - min;
		var hsl_h = 0.;
		var hsl_s = 0.;
		var hsl_l = 0.;
		hsl_l = max;
		if(delta != 0) {
			hsl_s = delta / max;
			var dr = ((max - r) / 6 + delta / 2) / delta;
			var dg = ((max - g) / 6 + delta / 2) / delta;
			var db = ((max - b) / 6 + delta / 2) / delta;
			if(r == max) {
				hsl_h = db - dg;
			} else if(g == max) {
				hsl_h = 0.33333333333333331 + dr - db;
			} else if(b == max) {
				hsl_h = 0.66666666666666663 + dg - dr;
			}
			if(hsl_h < 0) {
				++hsl_h;
			}
			if(hsl_h > 1) {
				--hsl_h;
			}
		}
		this.hue(hsl_h * 6.28,2.5);
		this.waveMobCount = this.getPixels(16737792).length + this.getPixels(2151932).length;
		var _g4 = 0;
		var _g11 = this.getPixels(7357985);
		while(_g4 < _g11.length) {
			var pt = _g11[_g4];
			++_g4;
			new en_Cover(pt.cx,0);
		}
		var initMob = function(cx1,cy1,cb) {
			_gthis.delayer.addS(null,function() {
				var e = cb();
				e.enterArena(null ? (0.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.5);
				if(_gthis.hasPixel(3554400,cx1 - 1,cy1)) {
					e.dir = -1;
				} else if(_gthis.hasPixel(3554400,cx1 - 1,cy1)) {
					e.dir = 1;
				}
			},_gthis.hasPixel(3554400,cx1,cy1 - 2) ? 7 : _gthis.hasPixel(3554400,cx1,cy1 - 1) ? 3.5 : 0);
		};
		var _g5 = 0;
		var _g12 = this.getPixels(16737792);
		while(_g5 < _g12.length) {
			var pt1 = [_g12[_g5]];
			++_g5;
			initMob(pt1[0].cx,pt1[0].cy,(function(pt2) {
				return function() {
					return new en_m_BasicGun(pt2[0].cx,4);
				};
			})(pt1));
		}
		var _g6 = 0;
		var _g13 = this.getPixels(2151932);
		while(_g6 < _g13.length) {
			var pt3 = [_g13[_g6]];
			++_g6;
			initMob(pt3[0].cx,pt3[0].cy,(function(pt4) {
				return function() {
					return new en_m_Grenader(pt4[0].cx,4);
				};
			})(pt3));
		}
	}
	,getPixels: function(c) {
		if(this.pixels.h.hasOwnProperty(c)) {
			return this.pixels.h[c];
		} else {
			return [];
		}
	}
	,hasPixel: function(c,cx,cy) {
		var _g = 0;
		var _g1 = this.getPixels(c);
		while(_g < _g1.length) {
			var pt = _g1[_g];
			++_g;
			if(pt.cx == cx && pt.cy == cy) {
				return true;
			}
		}
		return false;
	}
	,isValid: function(cx,cy) {
		if(cx >= 0 && cx < this.wid && cy >= 0) {
			return cy < this.hei;
		} else {
			return false;
		}
	}
	,coordId: function(x,y) {
		return x + y * this.wid;
	}
	,hasColl: function(x,y) {
		if(!this.isValid(x,y)) {
			return true;
		} else {
			return this.collMap[this.coordId(x,y)];
		}
	}
	,setColl: function(x,y,v) {
		this.collMap[this.coordId(x,y)] = v;
	}
	,update: function() {
		var game = Game.ME;
		this.speedMod = game.getSlowMoFactor();
		mt_Process.prototype.update.call(this);
		var _g = 0;
		var _g1 = this.people;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e._animManager == null) {
				e._animManager = new mt_heaps_slib_AnimManager(e);
				if(e.onAnimManAlloc != null) {
					e.onAnimManAlloc(e._animManager);
				}
			}
			var _this = e._animManager;
			_this.genSpeed = game.getSlowMoFactor();
		}
		var _this1 = this.cd;
		var frames = 0.5 * this.cd.baseFps;
		var tmp;
		if(_this1.fastCheck.h.hasOwnProperty(100663296)) {
			tmp = true;
		} else {
			var frames1 = frames;
			frames1 = Math.floor(frames1 * 1000) / 1000;
			var cur = _this1._getCdObject(100663296);
			if(!(cur != null && frames1 < cur.frames && false)) {
				if(frames1 <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this1.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this1.fastCheck.remove(cur.k);
					}
				} else {
					_this1.fastCheck.h[100663296] = true;
					if(cur != null) {
						cur.frames = frames1;
					} else {
						_this1.cdList.push(new mt__$Cooldown_CdInst(100663296,frames1));
					}
				}
			}
			tmp = false;
		}
		if(!tmp) {
			Game.ME.fx.flashBangS(8086747,0.04,1);
		}
		var _this2 = this.cd;
		var frames2 = 0.06 * this.cd.baseFps;
		var tmp1;
		if(_this2.fastCheck.h.hasOwnProperty(104857600)) {
			tmp1 = true;
		} else {
			var frames3 = frames2;
			frames3 = Math.floor(frames3 * 1000) / 1000;
			var cur1 = _this2._getCdObject(104857600);
			if(!(cur1 != null && frames3 < cur1.frames && false)) {
				if(frames3 <= 0) {
					if(cur1 != null) {
						HxOverrides.remove(_this2.cdList,cur1);
						cur1.frames = 0;
						cur1.cb = null;
						_this2.fastCheck.remove(cur1.k);
					}
				} else {
					_this2.fastCheck.h[104857600] = true;
					if(cur1 != null) {
						cur1.frames = frames3;
					} else {
						_this2.cdList.push(new mt__$Cooldown_CdInst(104857600,frames3));
					}
				}
			}
			tmp1 = false;
		}
		if(!tmp1) {
			var _g2 = 0;
			while(_g2 < 5) {
				var i = _g2++;
				Game.ME.fx.spotLight(this.wid * Const.GRID * (null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random()),null ? (20 + Math.random() * 10) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 10);
			}
		}
		var _this3 = this.cd;
		var frames4 = 0.06 * this.cd.baseFps;
		var tmp2;
		if(_this3.fastCheck.h.hasOwnProperty(109051904)) {
			tmp2 = true;
		} else {
			var frames5 = frames4;
			frames5 = Math.floor(frames5 * 1000) / 1000;
			var cur2 = _this3._getCdObject(109051904);
			if(!(cur2 != null && frames5 < cur2.frames && false)) {
				if(frames5 <= 0) {
					if(cur2 != null) {
						HxOverrides.remove(_this3.cdList,cur2);
						cur2.frames = 0;
						cur2.cb = null;
						_this3.fastCheck.remove(cur2.k);
					}
				} else {
					_this3.fastCheck.h[109051904] = true;
					if(cur2 != null) {
						cur2.frames = frames5;
					} else {
						_this3.cdList.push(new mt__$Cooldown_CdInst(109051904,frames5));
					}
				}
			}
			tmp2 = false;
		}
		if(!tmp2) {
			var _g3 = 0;
			while(_g3 < 5) {
				var i1 = _g3++;
				Game.ME.fx.lazer(this.wid * Const.GRID * (null ? Math.random() * (Std.random(2) * 2 - 1) : Math.random()));
			}
		}
	}
	,__class__: Level
});
var Main = function() {
	mt_Process.call(this);
	Main.ME = this;
	this.createRoot(Boot.ME.s2d);
	this.cached = new h2d_CachedBitmap(this.root,1,1);
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy16:gameElements.pngty10:levels.pngty22:minecraftiaOutline.pngty3:sfxoy8:gun2.wavty12:explode3.wavty12:explode0.wavty10:cover0.wavty10:grunt3.wavty8:pew1.wavty12:explode1.wavty12:explode2.wavty8:gun1.wavty10:death0.wavty8:gun0.wavty9:land0.wavty10:grunt2.wavty10:grunt0.wavty3:oldoR9ty8:pew3.wavty8:pew2.wavtgy11:reload0.wavtR20ty8:pew0.wavty11:reload1.wavty11:reload2.wavty10:grunt1.wavty10:grunt4.wavtgy18:gameElements.atlasty22:minecraftiaOutline.fnttg"))));
	Assets.init();
	hxd_Timer.wantedFPS = Const.FPS;
	this.console = new Console();
	var _this = Assets.gameElements;
	if(_this.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.screening = new mt_heaps_slib_HSpriteBatch(_this.pages[0],this.cached);
	this.screening.alpha = 0.04;
	this.screening.set_visible(false);
	this.black = new h2d_Bitmap(h2d_Tile.fromColor(Main.BG,1,1),this.root);
	this.black.set_visible(false);
	this.restartGame();
	this.onResize();
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = mt_Process;
Main.prototype = $extend(mt_Process.prototype,{
	isTransitioning: function() {
		return this.cd.fastCheck.h.hasOwnProperty(0);
	}
	,keyPressed: function(k) {
		if(this.console.isActive() || this.isTransitioning()) {
			return false;
		}
		if(this.presses == null) {
			this.presses = new haxe_ds_IntMap();
		}
		if(this.presses.h.hasOwnProperty(k)) {
			return false;
		}
		this.presses.h[k] = true;
		return hxd_Key.isDown(k);
	}
	,setBlack: function(on,cb) {
		var _gthis = this;
		if(on) {
			this.black.set_visible(true);
			var _tween = this.tw.create_(function() {
				return _gthis.black.alpha;
			},function(_setV) {
				_gthis.black.alpha = _setV;
			},0,1,null,600.);
			_tween.onEnd = function() {
				if(cb != null) {
					cb();
				}
			};
		} else {
			var _tween1 = this.tw.create_(function() {
				return _gthis.black.alpha;
			},function(_setV1) {
				_gthis.black.alpha = _setV1;
			},null,0,null,300.);
			_tween1.onEnd = function() {
				_gthis.black.set_visible(false);
				if(cb != null) {
					cb();
				}
			};
		}
	}
	,onResize: function() {
		mt_Process.prototype.onResize.call(this);
		var x = (mt_Process.CUSTOM_STAGE_WIDTH > 0 ? mt_Process.CUSTOM_STAGE_WIDTH : hxd_Stage.getInstance().get_width()) / (20 * Const.GRID);
		var tmp;
		if(x >= 0) {
			tmp = x | 0;
		} else {
			var i = x | 0;
			tmp = x == i ? i : i - 1;
		}
		Const.SCALE = tmp;
		var _this = this.cached;
		var _this1 = this.cached;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.scaleX = _this1.scaleY = Const.SCALE;
		var x1 = Boot.ME.s2d.width / this.cached.scaleX;
		var tmp1;
		if(x1 > .0) {
			var t = x1 + .5 | 0;
			tmp1 = t < x1 ? t + 1 : t;
		} else if(x1 < .0) {
			var t1 = x1 - .5 | 0;
			tmp1 = t1 < x1 ? t1 + 1 : t1;
		} else {
			tmp1 = 0;
		}
		this.cached.set_width(tmp1);
		var x2 = Boot.ME.s2d.height / this.cached.scaleY;
		var tmp2;
		if(x2 > .0) {
			var t2 = x2 + .5 | 0;
			tmp2 = t2 < x2 ? t2 + 1 : t2;
		} else if(x2 < .0) {
			var t3 = x2 - .5 | 0;
			tmp2 = t3 < x2 ? t3 + 1 : t3;
		} else {
			tmp2 = 0;
		}
		this.cached.set_height(tmp2);
		var _this2 = this.black;
		_this2.posChanged = true;
		_this2.scaleX = Boot.ME.s2d.width;
		var _this3 = this.black;
		_this3.posChanged = true;
		_this3.scaleY = Boot.ME.s2d.height;
		this.screening.clear();
		var t4 = Assets.gameElements.getTile("screening");
		var _g1 = 0;
		var x3 = this.cached.height / t4.height;
		var _g;
		if(x3 > .0) {
			var t5 = x3 + .5 | 0;
			_g = t5 < x3 ? t5 + 1 : t5;
		} else if(x3 < .0) {
			var t6 = x3 - .5 | 0;
			_g = t6 < x3 ? t6 + 1 : t6;
		} else {
			_g = 0;
		}
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var x4 = this.cached.width / t4.width;
			var _g2;
			if(x4 > .0) {
				var t7 = x4 + .5 | 0;
				_g2 = t7 < x4 ? t7 + 1 : t7;
			} else if(x4 < .0) {
				var t8 = x4 - .5 | 0;
				_g2 = t8 < x4 ? t8 + 1 : t8;
			} else {
				_g2 = 0;
			}
			while(_g3 < _g2) {
				var x5 = _g3++;
				var e = new mt_heaps_slib_HSpriteBE(this.screening,Assets.gameElements,"screening",0);
				var _this4 = e.pivot;
				_this4.centerFactorX = 0.;
				_this4.centerFactorY = 0.;
				_this4.usingFactor = true;
				_this4.isUndefined = false;
				e.updateTile();
				var be = e;
				be.x = x5 * t4.width;
				be.y = y * t4.height;
			}
		}
	}
	,onDispose: function() {
		mt_Process.prototype.onDispose.call(this);
		if(Main.ME == this) {
			Main.ME = null;
		}
	}
	,restartGame: function(hist) {
		var _gthis = this;
		if(Game.ME != null) {
			var _this = this.cd;
			var frames = Const.INFINITE * this.cd.baseFps;
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this._getCdObject(0);
			if(!(cur != null && frames < cur.frames && false)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[0] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(0,frames));
					}
				}
			}
			this.setBlack(true,function() {
				Game.ME.destroyed = true;
				_gthis.delayer.addS(null,function() {
					var _this1 = _gthis.cd;
					var _g = 0;
					var _g1 = _this1.cdList;
					while(_g < _g1.length) {
						var cd = _g1[_g];
						++_g;
						if(cd.k == 0) {
							HxOverrides.remove(_this1.cdList,cd);
							cd.frames = 0;
							cd.cb = null;
							_this1.fastCheck.remove(cd.k);
							break;
						}
					}
					new Game(new h2d_Sprite(_gthis.cached),hist);
					var _tween = _gthis.tw.create_(function() {
						return Game.ME.root.alpha;
					},function(_setV) {
						Game.ME.root.alpha = _setV;
					},0,1,null,400.);
					_gthis.setBlack(false);
					_gthis.cached.addChild(_gthis.screening);
				},0.5);
			});
		} else {
			var g = new Game(new h2d_Sprite(this.cached),hist);
			var _tween1 = this.tw.create_(function() {
				return Game.ME.root.alpha;
			},function(_setV1) {
				Game.ME.root.alpha = _setV1;
			},0,1,null,400.);
			this.setBlack(false);
			this.cached.addChild(this.screening);
		}
	}
	,postUpdate: function() {
		mt_Process.prototype.postUpdate.call(this);
		this.root.over(this.black);
		var k = this.presses.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if(!hxd_Key.isDown(k1)) {
				this.presses.remove(k1);
			}
		}
	}
	,update: function() {
		mt_Process.prototype.update.call(this);
		if(this.keyPressed(77)) {
			mt_deepnight_Sfx.toggleMuteGroup(1);
		}
	}
	,__class__: Main
});
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Skill = function(id,e) {
	this.id = id;
	this.owner = e;
	this.chargeS = 1;
	this.cooldownS = 1;
	this.curChargeS = -1;
	this.curCdS = -1;
	this.onExecute = function(e1) {
	};
	this.onStart = function() {
	};
	this.onProgress = function(r) {
	};
	this.onInterrupt = function() {
	};
};
$hxClasses["Skill"] = Skill;
Skill.__name__ = ["Skill"];
Skill.prototype = {
	isReady: function() {
		if(!this.isCharging()) {
			return !this.isUnderCd();
		} else {
			return false;
		}
	}
	,isUnderCd: function() {
		return this.curCdS > 0;
	}
	,prepare: function() {
		if(!this.isReady()) {
			return false;
		}
		this.curChargeS = 0;
		this.onStart();
		return true;
	}
	,prepareOn: function(e) {
		if(!this.isReady()) {
			return false;
		}
		this.target = e;
		return this.prepare();
	}
	,setTimers: function(charge,cd,lock) {
		this.chargeS = charge;
		this.cooldownS = cd;
		this.lockAfterS = lock;
	}
	,isCharging: function() {
		return this.curChargeS >= 0;
	}
	,interrupt: function(startCd) {
		if(this.isCharging()) {
			this.curChargeS = -1;
			this.curCdS = -1;
			this.target = null;
			if(startCd) {
				this.curCdS = this.cooldownS;
			}
			this.onInterrupt();
		}
	}
	,update: function(dt) {
		if(this.isUnderCd()) {
			this.curCdS -= dt / Const.FPS;
		}
		if(this.isCharging()) {
			this.curChargeS += dt / Const.FPS;
			var x = this.curChargeS / this.chargeS;
			this.onProgress(x < 0 ? 0 : x > 1 ? 1 : x);
			if(this.curChargeS >= this.chargeS) {
				this.curChargeS = -1;
				this.curCdS = this.cooldownS;
				var t = this.target;
				this.target = null;
				if(this.lockAfterS > 0) {
					this.owner.lockControlsS(this.lockAfterS);
				}
				this.onExecute(t);
			}
		}
	}
	,__class__: Skill
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var Viewport = function() {
	this.dy = 0.;
	this.dx = 0.;
	this.y = 0.;
	this.x = 0.;
	mt_Process.call(this,Game.ME);
};
$hxClasses["Viewport"] = Viewport;
Viewport.__name__ = ["Viewport"];
Viewport.__super__ = mt_Process;
Viewport.prototype = $extend(mt_Process.prototype,{
	repos: function() {
		var _this = Game.ME.hero;
		this.x = (_this.cx + _this.xr) * Const.GRID;
		var _this1 = Game.ME.hero;
		this.y = (_this1.cy + _this1.yr) * Const.GRID - _this1.radius;
	}
	,update: function() {
		mt_Process.prototype.update.call(this);
		var _this = Game.ME.hero;
		var tx = (_this.cx + _this.xr) * Const.GRID;
		var _this1 = Game.ME.hero;
		var ty = (_this1.cy + _this1.yr) * Const.GRID - _this1.radius;
		var n = 1.0;
		var w = 1;
		var _g = 0;
		var _g1 = en_Mob.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!(e.life > 0 && !e.destroyed)) {
				continue;
			}
			tx += (e.cx + e.xr) * Const.GRID * w;
			ty += ((e.cy + e.yr) * Const.GRID - e.radius) * w;
			n += w;
		}
		tx /= n;
		ty /= n;
		var a = Math.atan2(ty - this.y,tx - this.x);
		var ax = this.x;
		var ay = this.y;
		var d = Math.sqrt((ax - tx) * (ax - tx) + (ay - ty) * (ay - ty));
		if(d >= 10) {
			var x = d / 100;
			var s = 0.5 * (x < 0 ? 0 : x > 1 ? 1 : x);
			this.dx += Math.cos(a) * s;
			this.dy += Math.sin(a) * s;
		}
		this.x += this.dx;
		this.y += this.dy;
		this.dx *= 0.97;
		this.dy *= 0.97;
		var ax1 = this.x;
		var ay1 = this.y;
		if(Math.sqrt((ax1 - tx) * (ax1 - tx) + (ay1 - ty) * (ay1 - ty)) <= 20) {
			this.dx *= 0.8;
			this.dy *= 0.8;
		}
		var prioCenter = 0;
		var _this2 = Game.ME.scroller;
		var x1 = Boot.ME.s2d.width / Const.SCALE;
		var v;
		if(x1 > .0) {
			var t = x1 + .5 | 0;
			v = t < x1 ? t + 1 : t;
		} else if(x1 < .0) {
			var t1 = x1 - .5 | 0;
			v = t1 < x1 ? t1 + 1 : t1;
		} else {
			v = 0;
		}
		_this2.posChanged = true;
		_this2.x = -(this.x + prioCenter * Game.ME.level.wid * 0.5 * Const.GRID) / (1 + prioCenter) + v * 0.5 | 0;
		var _this3 = Game.ME.scroller;
		_this3.posChanged = true;
		_this3.y = 0;
		var _this4 = Game.ME.scroller;
		var x2 = Game.ME.scroller.x;
		var x3 = Boot.ME.s2d.width / Const.SCALE;
		var min;
		if(x3 > .0) {
			var t2 = x3 + .5 | 0;
			min = t2 < x3 ? t2 + 1 : t2;
		} else if(x3 < .0) {
			var t3 = x3 - .5 | 0;
			min = t3 < x3 ? t3 + 1 : t3;
		} else {
			min = 0;
		}
		var min1 = -Game.ME.level.wid * Const.GRID + min - 15;
		_this4.posChanged = true;
		_this4.x = x2 < min1 ? min1 : x2 > 15 ? 15 : x2;
	}
	,__class__: Viewport
});
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var en_Cover = function(x,y) {
	var _gthis = this;
	Entity.call(this,x,y);
	en_Cover.ALL.push(this);
	var _this = this.spr;
	if("crate" != _this.groupName) {
		_this.groupName = "crate";
	}
	if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
		var _this1 = _this.lib;
		var k = _this.groupName;
		var tmp;
		if(k == null) {
			tmp = _this1.currentGroup;
		} else {
			var _this2 = _this1.groups;
			tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
		}
		_this.group = tmp;
		var _this3 = _this.lib;
		var k1 = _this.groupName;
		var g;
		if(k1 == null) {
			g = _this3.currentGroup;
		} else {
			var _this4 = _this3.groups;
			g = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
		}
		_this.frameData = g == null ? null : g.frames[0];
		if(_this.frameData == null) {
			throw new js__$Boot_HaxeError("Unknown frame: " + _this.groupName + "(" + 0 + ")");
		}
		if(_this.rawTile == null) {
			_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
		} else {
			_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
		}
		_this.lastPage = _this.frameData.page;
		_this.setFrame(0);
	} else {
		_this.setEmptyTexture();
	}
	this.initLife(3);
	var r = 11;
	this.left = new Area(this,r,function() {
		return (_gthis.cx + _gthis.xr) * Const.GRID - r;
	},function() {
		return (_gthis.cy + _gthis.yr) * Const.GRID - _gthis.radius;
	});
	this.left.color = 38144;
	this.right = new Area(this,r,function() {
		return (_gthis.cx + _gthis.xr) * Const.GRID + r;
	},function() {
		return (_gthis.cy + _gthis.yr) * Const.GRID - _gthis.radius;
	});
	this.right.color = 1572631;
	var _this5 = Game.ME.scroller;
	var s = new mt_heaps_slib_HSprite(Assets.gameElements,"iconShield",0);
	var _this6 = s.pivot;
	_this6.centerFactorX = 0.;
	_this6.centerFactorY = 0.;
	_this6.usingFactor = true;
	_this6.isUndefined = false;
	_this5.addChildAt(this.iconLeft = s,Const.DP_UI);
	var _this7 = this.iconLeft.pivot;
	_this7.centerFactorX = 0.5;
	_this7.centerFactorY = 1;
	_this7.usingFactor = true;
	_this7.isUndefined = false;
	this.iconLeft.blendMode = h2d_BlendMode.Add;
	var _this8 = this.iconLeft.color;
	var c = (255. | 0) << 24 | 1358827;
	_this8.x = (c >> 16 & 255) / 255;
	_this8.y = (c >> 8 & 255) / 255;
	_this8.z = (c & 255) / 255;
	_this8.w = (c >>> 24) / 255;
	var _this9 = Game.ME.scroller;
	var s1 = new mt_heaps_slib_HSprite(Assets.gameElements,"iconShield",0);
	var _this10 = s1.pivot;
	_this10.centerFactorX = 0.;
	_this10.centerFactorY = 0.;
	_this10.usingFactor = true;
	_this10.isUndefined = false;
	_this9.addChildAt(this.iconRight = s1,Const.DP_UI);
	var _this11 = this.iconRight.pivot;
	_this11.centerFactorX = 0.5;
	_this11.centerFactorY = 1;
	_this11.usingFactor = true;
	_this11.isUndefined = false;
	this.iconRight.blendMode = h2d_BlendMode.Add;
	var _this12 = this.iconRight.color;
	var c1 = (255. | 0) << 24 | 1358827;
	_this12.x = (c1 >> 16 & 255) / 255;
	_this12.y = (c1 >> 8 & 255) / 255;
	_this12.z = (c1 & 255) / 255;
	_this12.w = (c1 >>> 24) / 255;
};
$hxClasses["en.Cover"] = en_Cover;
en_Cover.__name__ = ["en","Cover"];
en_Cover.__super__ = Entity;
en_Cover.prototype = $extend(Entity.prototype,{
	onDamage: function(v) {
		Entity.prototype.onDamage.call(this,v);
		Assets.SBANK.cover0(1);
	}
	,onDie: function() {
		Assets.SBANK.explode2(1);
		var _this = this.spr;
		if("crateBroken" != _this.groupName) {
			_this.groupName = "crateBroken";
		}
		if(!_this.destroyed && _this.lib != null && _this.groupName != null) {
			var _this1 = _this.lib;
			var k = _this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			_this.group = tmp;
			var _this3 = _this.lib;
			var k1 = _this.groupName;
			var g;
			if(k1 == null) {
				g = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			_this.frameData = g == null ? null : g.frames[0];
			if(_this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + _this.groupName + "(" + 0 + ")");
			}
			if(_this.rawTile == null) {
				_this.rawTile = _this.lib.pages[_this.frameData.page].clone();
			} else {
				_this.rawTile.setTexture(_this.lib.pages[_this.frameData.page].innerTex);
			}
			_this.lastPage = _this.frameData.page;
			_this.setFrame(0);
		} else {
			_this.setEmptyTexture();
		}
		var _this5 = this.cd;
		var frames = 15 * this.cd.baseFps;
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this5._getCdObject(37748736);
		if(!(cur != null && frames < cur.frames && false)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this5.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this5.fastCheck.remove(cur.k);
				}
			} else {
				_this5.fastCheck.h[37748736] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this5.cdList.push(new mt__$Cooldown_CdInst(37748736,frames));
				}
			}
		}
		Game.ME.fx.woodCover((this.cx + this.xr) * Const.GRID,(this.cy + this.yr) * Const.GRID - this.radius,this.lastHitDir);
	}
	,isBlockingHeroMoves: function() {
		if(this.life > 0) {
			return !this.destroyed;
		} else {
			return false;
		}
	}
	,canHostSomeone: function(side) {
		if(!(this.life > 0 && !this.destroyed) || !(Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0)) {
			return false;
		}
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.cover == this && ((e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) == side) {
				return false;
			}
		}
		return true;
	}
	,coversAnyone: function(side) {
		if(side == null) {
			side = 0;
		}
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.cover == this && (side == 0 || ((e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) == side)) {
				return true;
			}
		}
		return false;
	}
	,onLand: function() {
		Entity.prototype.onLand.call(this);
		var _g = 0;
		var _g1 = en_Cover.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var tmp;
			if(e != this) {
				var ax = this.cx + this.xr;
				var ay = this.cy + this.yr;
				var bx = e.cx + e.xr;
				var by = e.cy + e.yr;
				tmp = Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by)) <= 2;
			} else {
				tmp = false;
			}
			if(tmp) {
				e.hit(999,this,true);
			}
		}
		Assets.SBANK.land0(0.5);
	}
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		HxOverrides.remove(en_Cover.ALL,this);
		var _this = this.iconLeft;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this1 = this.iconRight;
		if(_this1 != null && _this1.parent != null) {
			_this1.parent.removeChild(_this1);
		}
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
		if(!(this.life > 0 && !this.destroyed) && this.cd.fastCheck.h.hasOwnProperty(37748736)) {
			var _this = this.spr;
			var v = this.cd._getRatio(37748736);
			_this.posChanged = true;
			_this.scaleY = v;
		}
		var _this1 = this.iconLeft;
		_this1.posChanged = true;
		_this1.x = (this.cx + this.xr) * Const.GRID - 6;
		_this1.posChanged = true;
		_this1.y = (this.cy + this.yr) * Const.GRID;
		this.iconLeft.set_visible(this.coversAnyone(-1));
		var _this2 = this.iconRight;
		_this2.posChanged = true;
		_this2.x = (this.cx + this.xr) * Const.GRID + 6;
		_this2.posChanged = true;
		_this2.y = (this.cy + this.yr) * Const.GRID;
		this.iconRight.set_visible(this.coversAnyone(1));
	}
	,update: function() {
		Entity.prototype.update.call(this);
		if(!(this.life > 0 && !this.destroyed) && !this.cd.fastCheck.h.hasOwnProperty(37748736)) {
			this.destroyed = true;
		}
	}
	,__class__: en_Cover
});
var en_DeadBody = function(e,sid) {
	var _gthis = this;
	Entity.call(this,e.cx,e.cy);
	this.xr = e.xr;
	this.yr = e.yr;
	this.dx = e.lastHitDir * 0.18;
	var v = -e.lastHitDir;
	this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
	this.gravity *= 0.25;
	this.frict = 0.97;
	this.dy = -0.1;
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new mt_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim(sid + "DeathBounce",2,null,function() {
		if(!(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0)) {
			return _gthis.cd.fastCheck.h.hasOwnProperty(50331648);
		} else {
			return false;
		}
	});
	var _this1 = this.spr;
	if(_this1._animManager == null) {
		_this1._animManager = new mt_heaps_slib_AnimManager(_this1);
		if(_this1.onAnimManAlloc != null) {
			_this1.onAnimManAlloc(_this1._animManager);
		}
	}
	_this1._animManager.registerStateAnim(sid + "DeathFly",1,null,function() {
		return !(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0);
	});
	var _this2 = this.spr;
	if(_this2._animManager == null) {
		_this2._animManager = new mt_heaps_slib_AnimManager(_this2);
		if(_this2.onAnimManAlloc != null) {
			_this2.onAnimManAlloc(_this2._animManager);
		}
	}
	_this2._animManager.registerStateAnim(sid + "DeathGround",0);
	var _this3 = e.spr.color;
	var f = _this3.w;
	var f1 = _this3.x;
	var f2 = _this3.y;
	var f3 = _this3.z;
	var _this4 = this.spr.color;
	var c = (255. | 0) << 24 | (((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0));
	_this4.x = (c >> 16 & 255) / 255;
	_this4.y = (c >> 8 & 255) / 255;
	_this4.z = (c & 255) / 255;
	_this4.w = (c >>> 24) / 255;
	var _this5 = this.cd;
	var frames = 2 * this.cd.baseFps;
	frames = Math.floor(frames * 1000) / 1000;
	var cur = _this5._getCdObject(54525952);
	if(!(cur != null && frames < cur.frames && false)) {
		if(frames <= 0) {
			if(cur != null) {
				HxOverrides.remove(_this5.cdList,cur);
				cur.frames = 0;
				cur.cb = null;
				_this5.fastCheck.remove(cur.k);
			}
		} else {
			_this5.fastCheck.h[54525952] = true;
			if(cur != null) {
				cur.frames = frames;
			} else {
				_this5.cdList.push(new mt__$Cooldown_CdInst(54525952,frames));
			}
		}
	}
	var _this6 = this.cd;
	var _this7 = this.cd;
	var frames1 = (null ? (20 + Math.random() * 5) * (Std.random(2) * 2 - 1) : 20 + Math.random() * 5) * _this7.baseFps;
	frames1 = Math.floor(frames1 * 1000) / 1000;
	var cur1 = _this6._getCdObject(37748736);
	if(!(cur1 != null && frames1 < cur1.frames && false)) {
		if(frames1 <= 0) {
			if(cur1 != null) {
				HxOverrides.remove(_this6.cdList,cur1);
				cur1.frames = 0;
				cur1.cb = null;
				_this6.fastCheck.remove(cur1.k);
			}
		} else {
			_this6.fastCheck.h[37748736] = true;
			if(cur1 != null) {
				cur1.frames = frames1;
			} else {
				_this6.cdList.push(new mt__$Cooldown_CdInst(37748736,frames1));
			}
		}
	}
};
$hxClasses["en.DeadBody"] = en_DeadBody;
en_DeadBody.__name__ = ["en","DeadBody"];
en_DeadBody.__super__ = Entity;
en_DeadBody.prototype = $extend(Entity.prototype,{
	dispose: function() {
		Entity.prototype.dispose.call(this);
	}
	,onLand: function() {
		var x = this.dy;
		if((x < 0 ? -x : x) <= 0.05) {
			this.dy = 0;
			this.frict = 0.8;
		} else {
			this.dy = -this.dy * 0.7;
		}
		var _this = this.cd;
		var frames = Const.INFINITE * this.cd.baseFps;
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this._getCdObject(50331648);
		if(!(cur != null && frames < cur.frames && false)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this.fastCheck.remove(cur.k);
				}
			} else {
				_this.fastCheck.h[50331648] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this.cdList.push(new mt__$Cooldown_CdInst(50331648,frames));
				}
			}
		}
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
		if(this.cd.fastCheck.h.hasOwnProperty(37748736)) {
			var _this = this.spr;
			var v = this.cd._getRatio(37748736);
			_this.posChanged = true;
			_this.scaleY = v;
		}
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var tmp;
		if(this.cd.fastCheck.h.hasOwnProperty(54525952)) {
			var _this = this.cd;
			var frames = 0.03 * this.cd.baseFps;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(58720256)) {
				tmp1 = true;
			} else {
				var frames1 = frames;
				frames1 = Math.floor(frames1 * 1000) / 1000;
				var cur = _this._getCdObject(58720256);
				if(!(cur != null && frames1 < cur.frames && false)) {
					if(frames1 <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this.fastCheck.remove(cur.k);
						}
					} else {
						_this.fastCheck.h[58720256] = true;
						if(cur != null) {
							cur.frames = frames1;
						} else {
							_this.cdList.push(new mt__$Cooldown_CdInst(58720256,frames1));
						}
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			Game.ME.fx.woundBleed((this.cx + this.xr) * Const.GRID - this.dir * 8,(this.cy + this.yr) * Const.GRID - this.radius);
		}
		if(!(Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0)) {
			var _g = 0;
			var _g1 = en_Cover.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var tmp2;
				var ax = (this.cx + this.xr) * Const.GRID;
				var ay = (this.cy + this.yr) * Const.GRID;
				var bx = (e.cx + e.xr) * Const.GRID;
				var by = (e.cy + e.yr) * Const.GRID;
				if(Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by)) <= this.radius + e.radius) {
					var _this1 = e.cd;
					var frames2 = 0.3 * e.cd.baseFps;
					var tmp3;
					if(_this1.fastCheck.h.hasOwnProperty(62914560)) {
						tmp3 = true;
					} else {
						var frames3 = frames2;
						frames3 = Math.floor(frames3 * 1000) / 1000;
						var cur1 = _this1._getCdObject(62914560);
						if(!(cur1 != null && frames3 < cur1.frames && false)) {
							if(frames3 <= 0) {
								if(cur1 != null) {
									HxOverrides.remove(_this1.cdList,cur1);
									cur1.frames = 0;
									cur1.cb = null;
									_this1.fastCheck.remove(cur1.k);
								}
							} else {
								_this1.fastCheck.h[62914560] = true;
								if(cur1 != null) {
									cur1.frames = frames3;
								} else {
									_this1.cdList.push(new mt__$Cooldown_CdInst(62914560,frames3));
								}
							}
						}
						tmp3 = false;
					}
					tmp2 = !tmp3;
				} else {
					tmp2 = false;
				}
				if(tmp2 && (this.dx > 0 && ((e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) == 1 || this.dx < 0 && ((e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) == -1)) {
					e.hit(2,this,true);
				}
			}
			var _g2 = 0;
			var _g11 = en_Mob.ALL;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				var tmp4;
				var tmp5;
				if(e1.life > 0 && !e1.destroyed) {
					var ax1 = (this.cx + this.xr) * Const.GRID;
					var ay1 = (this.cy + this.yr) * Const.GRID;
					var bx1 = (e1.cx + e1.xr) * Const.GRID;
					var by1 = (e1.cy + e1.yr) * Const.GRID;
					tmp5 = Math.sqrt((ax1 - bx1) * (ax1 - bx1) + (ay1 - by1) * (ay1 - by1)) <= this.radius + e1.radius;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					var _this2 = e1.cd;
					var frames4 = 0.4 * e1.cd.baseFps;
					var tmp6;
					if(_this2.fastCheck.h.hasOwnProperty(62914560)) {
						tmp6 = true;
					} else {
						var frames5 = frames4;
						frames5 = Math.floor(frames5 * 1000) / 1000;
						var cur2 = _this2._getCdObject(62914560);
						if(!(cur2 != null && frames5 < cur2.frames && false)) {
							if(frames5 <= 0) {
								if(cur2 != null) {
									HxOverrides.remove(_this2.cdList,cur2);
									cur2.frames = 0;
									cur2.cb = null;
									_this2.fastCheck.remove(cur2.k);
								}
							} else {
								_this2.fastCheck.h[62914560] = true;
								if(cur2 != null) {
									cur2.frames = frames5;
								} else {
									_this2.cdList.push(new mt__$Cooldown_CdInst(62914560,frames5));
								}
							}
						}
						tmp6 = false;
					}
					tmp4 = !tmp6;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					var _this3 = e1.cd;
					var frames6 = e1.cd.baseFps;
					var tmp7;
					if(_this3.fastCheck.h.hasOwnProperty(67108864)) {
						tmp7 = true;
					} else {
						var frames7 = frames6;
						frames7 = Math.floor(frames7 * 1000) / 1000;
						var cur3 = _this3._getCdObject(67108864);
						if(!(cur3 != null && frames7 < cur3.frames && false)) {
							if(frames7 <= 0) {
								if(cur3 != null) {
									HxOverrides.remove(_this3.cdList,cur3);
									cur3.frames = 0;
									cur3.cb = null;
									_this3.fastCheck.remove(cur3.k);
								}
							} else {
								_this3.fastCheck.h[67108864] = true;
								if(cur3 != null) {
									cur3.frames = frames7;
								} else {
									_this3.cdList.push(new mt__$Cooldown_CdInst(67108864,frames7));
								}
							}
						}
						tmp7 = false;
					}
					if(!tmp7) {
						e1.hit(1,this,true);
					}
					e1.violentBump(((e1.cx + e1.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) * 0.4,-0.2,1.75);
				}
			}
		}
		if(!this.cd.fastCheck.h.hasOwnProperty(37748736)) {
			this.destroyed = true;
		}
	}
	,__class__: en_DeadBody
});
var en_Grenade = function(e) {
	Entity.call(this,e.cx,e.cy);
	this.xr = e.xr;
	this.yr = e.yr;
	var v = e.dir;
	this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
	this.gravity *= 0.25;
	this.frict = 0.98;
	var _this = this.cd;
	var frames = 1.25 * this.cd.baseFps;
	frames = Math.floor(frames * 1000) / 1000;
	var cur = _this._getCdObject(88080384);
	if(!(cur != null && frames < cur.frames && false)) {
		if(frames <= 0) {
			if(cur != null) {
				HxOverrides.remove(_this.cdList,cur);
				cur.frames = 0;
				cur.cb = null;
				_this.fastCheck.remove(cur.k);
			}
		} else {
			_this.fastCheck.h[88080384] = true;
			if(cur != null) {
				cur.frames = frames;
			} else {
				_this.cdList.push(new mt__$Cooldown_CdInst(88080384,frames));
			}
		}
	}
	this.radius = 5;
	this.range = Const.GRID;
	var _this1 = this.spr;
	if("grenade" != _this1.groupName) {
		_this1.groupName = "grenade";
	}
	if(!_this1.destroyed && _this1.lib != null && _this1.groupName != null) {
		var _this2 = _this1.lib;
		var k = _this1.groupName;
		var tmp;
		if(k == null) {
			tmp = _this2.currentGroup;
		} else {
			var _this3 = _this2.groups;
			tmp = __map_reserved[k] != null ? _this3.getReserved(k) : _this3.h[k];
		}
		_this1.group = tmp;
		var _this4 = _this1.lib;
		var k1 = _this1.groupName;
		var g;
		if(k1 == null) {
			g = _this4.currentGroup;
		} else {
			var _this5 = _this4.groups;
			g = __map_reserved[k1] != null ? _this5.getReserved(k1) : _this5.h[k1];
		}
		_this1.frameData = g == null ? null : g.frames[0];
		if(_this1.frameData == null) {
			throw new js__$Boot_HaxeError("Unknown frame: " + _this1.groupName + "(" + 0 + ")");
		}
		if(_this1.rawTile == null) {
			_this1.rawTile = _this1.lib.pages[_this1.frameData.page].clone();
		} else {
			_this1.rawTile.setTexture(_this1.lib.pages[_this1.frameData.page].innerTex);
		}
		_this1.lastPage = _this1.frameData.page;
		_this1.setFrame(0);
	} else {
		_this1.setEmptyTexture();
	}
	var _this6 = this.spr.pivot;
	_this6.centerFactorX = 0.5;
	_this6.centerFactorY = 0.5;
	_this6.usingFactor = true;
	_this6.isUndefined = false;
};
$hxClasses["en.Grenade"] = en_Grenade;
en_Grenade.__name__ = ["en","Grenade"];
en_Grenade.__super__ = Entity;
en_Grenade.prototype = $extend(Entity.prototype,{
	dispose: function() {
		Entity.prototype.dispose.call(this);
	}
	,onLand: function() {
		this.frict = 0.93;
		this.dy = -this.dy * 0.8;
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
		var _g = this.spr;
		_g.posChanged = true;
		_g.y -= 3;
		var _g1 = this.spr;
		_g1.posChanged = true;
		_g1.rotation += this.dx * 2;
	}
	,update: function() {
		Entity.prototype.update.call(this);
		var tmp;
		var cd = this.cd._getCdObject(88080384);
		if((cd == null ? 0 : cd.frames) / this.cd.baseFps <= 0.5) {
			var _this = this.cd;
			var frames = 0.1 * this.cd.baseFps;
			var tmp1;
			if(_this.fastCheck.h.hasOwnProperty(92274688)) {
				tmp1 = true;
			} else {
				var frames1 = frames;
				frames1 = Math.floor(frames1 * 1000) / 1000;
				var cur = _this._getCdObject(92274688);
				if(!(cur != null && frames1 < cur.frames && false)) {
					if(frames1 <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this.fastCheck.remove(cur.k);
						}
					} else {
						_this.fastCheck.h[92274688] = true;
						if(cur != null) {
							cur.frames = frames1;
						} else {
							_this.cdList.push(new mt__$Cooldown_CdInst(92274688,frames1));
						}
					}
				}
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			Game.ME.fx.warnZone((this.cx + this.xr) * Const.GRID,(this.cy + this.yr) * Const.GRID - this.radius,this.range);
		}
		if(!this.cd.fastCheck.h.hasOwnProperty(88080384)) {
			Game.ME.fx.grenade((this.cx + this.xr) * Const.GRID,(this.cy + this.yr) * Const.GRID - this.radius,this.range);
			Assets.SBANK.explode3(1);
			var e = Game.ME.hero;
			var ax = (this.cx + this.xr) * Const.GRID;
			var ay = (this.cy + this.yr) * Const.GRID;
			var bx = (e.cx + e.xr) * Const.GRID;
			var by = (e.cy + e.yr) * Const.GRID;
			if(Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by)) <= this.range) {
				var e1 = Game.ME.hero;
				Game.ME.hero.violentBump(((e1.cx + e1.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) * 0.28,-0.2,0.5);
				Game.ME.hero.hit(2,this,true);
			}
			var _g = 0;
			var _g1 = en_Cover.ALL;
			while(_g < _g1.length) {
				var e2 = _g1[_g];
				++_g;
				var ax1 = (this.cx + this.xr) * Const.GRID;
				var ay1 = (this.cy + this.yr) * Const.GRID;
				var bx1 = (e2.cx + e2.xr) * Const.GRID;
				var by1 = (e2.cy + e2.yr) * Const.GRID;
				if(Math.sqrt((ax1 - bx1) * (ax1 - bx1) + (ay1 - by1) * (ay1 - by1)) <= this.range) {
					e2.hit(999,this,true);
				}
			}
			this.destroyed = true;
		}
	}
	,__class__: en_Grenade
});
var en_Action = $hxClasses["en.Action"] = { __ename__ : true, __constructs__ : ["None","BlindShot","HeadShot","Move","TakeCover","Wait","Reload"] };
en_Action.None = ["None",0];
en_Action.None.toString = $estr;
en_Action.None.__enum__ = en_Action;
en_Action.BlindShot = function(e) { var $x = ["BlindShot",1,e]; $x.__enum__ = en_Action; $x.toString = $estr; return $x; };
en_Action.HeadShot = function(e) { var $x = ["HeadShot",2,e]; $x.__enum__ = en_Action; $x.toString = $estr; return $x; };
en_Action.Move = function(x,y) { var $x = ["Move",3,x,y]; $x.__enum__ = en_Action; $x.toString = $estr; return $x; };
en_Action.TakeCover = function(e,side) { var $x = ["TakeCover",4,e,side]; $x.__enum__ = en_Action; $x.toString = $estr; return $x; };
en_Action.Wait = function(sec) { var $x = ["Wait",5,sec]; $x.__enum__ = en_Action; $x.toString = $estr; return $x; };
en_Action.Reload = ["Reload",6];
en_Action.Reload.toString = $estr;
en_Action.Reload.__enum__ = en_Action;
en_Action.__empty_constructs__ = [en_Action.None,en_Action.Reload];
var en_Hero = function(x,y) {
	var _gthis = this;
	Entity.call(this,x,y);
	this.afterMoveAction = en_Action.None;
	Game.ME.scroller.addChildAt(this.spr,Const.DP_HERO);
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new mt_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("heroPush",11,null,function() {
		if(!(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0)) {
			return _gthis.isStunned();
		} else {
			return false;
		}
	});
	var _this1 = this.spr;
	if(_this1._animManager == null) {
		_this1._animManager = new mt_heaps_slib_AnimManager(_this1);
		if(_this1.onAnimManAlloc != null) {
			_this1.onAnimManAlloc(_this1._animManager);
		}
	}
	_this1._animManager.registerStateAnim("heroStun",10,null,function() {
		return _gthis.cd.fastCheck.h.hasOwnProperty(8388608);
	});
	var _this2 = this.spr;
	if(_this2._animManager == null) {
		_this2._animManager = new mt_heaps_slib_AnimManager(_this2);
		if(_this2.onAnimManAlloc != null) {
			_this2.onAnimManAlloc(_this2._animManager);
		}
	}
	_this2._animManager.registerStateAnim("heroCover",5,null,function() {
		return _gthis.cover != null;
	});
	var _this3 = this.spr;
	if(_this3._animManager == null) {
		_this3._animManager = new mt_heaps_slib_AnimManager(_this3);
		if(_this3.onAnimManAlloc != null) {
			_this3.onAnimManAlloc(_this3._animManager);
		}
	}
	_this3._animManager.registerStateAnim("heroRun",2,null,function() {
		if(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0 && _gthis.moveTarget != null) {
			return !_gthis.movementLocked();
		} else {
			return false;
		}
	});
	var _this4 = this.spr;
	if(_this4._animManager == null) {
		_this4._animManager = new mt_heaps_slib_AnimManager(_this4);
		if(_this4.onAnimManAlloc != null) {
			_this4.onAnimManAlloc(_this4._animManager);
		}
	}
	_this4._animManager.registerStateAnim("heroBrake",1,null,function() {
		return _gthis.cd.fastCheck.h.hasOwnProperty(16777216);
	});
	var _this5 = this.spr;
	if(_this5._animManager == null) {
		_this5._animManager = new mt_heaps_slib_AnimManager(_this5);
		if(_this5.onAnimManAlloc != null) {
			_this5.onAnimManAlloc(_this5._animManager);
		}
	}
	_this5._animManager.registerStateAnim("heroIdle",0);
	var s = new mt_heaps_slib_HSprite(Assets.gameElements,"iconMove",0);
	var _this6 = s.pivot;
	_this6.centerFactorX = 0.;
	_this6.centerFactorY = 0.;
	_this6.usingFactor = true;
	_this6.isUndefined = false;
	this.icon = s;
	Game.ME.scroller.addChildAt(this.icon,Const.DP_UI);
	var _this7 = this.icon.pivot;
	_this7.centerFactorX = 0.5;
	_this7.centerFactorY = 0.5;
	_this7.usingFactor = true;
	_this7.isUndefined = false;
	this.icon.blendMode = h2d_BlendMode.Add;
	this.isAffectBySlowMo = false;
	this.setAmmo(6);
	this.initLife(3);
	var s1 = this.createSkill("blindShot");
	s1.setTimers(0.1,0,0.22);
	s1.onStart = function() {
		var e = s1.target;
		var v = (e.cx + e.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v > 0 ? 1 : v < 0 ? -1 : _gthis.dir;
		var _this8 = _gthis.spr;
		if(_this8._animManager == null) {
			_this8._animManager = new mt_heaps_slib_AnimManager(_this8);
			if(_this8.onAnimManAlloc != null) {
				_this8.onAnimManAlloc(_this8._animManager);
			}
		}
		_this8._animManager.play("heroBlind").loop();
	};
	s1.onExecute = function(e1) {
		if(!_gthis.useAmmo()) {
			var _this9 = _gthis.spr;
			if(_this9._animManager == null) {
				_this9._animManager = new mt_heaps_slib_AnimManager(_this9);
				if(_this9.onAnimManAlloc != null) {
					_this9.onAnimManAlloc(_this9._animManager);
				}
			}
			_this9._animManager.play("heroBlindShoot");
			return;
		}
		if(e1.hit(1,_gthis)) {
			var r = e1.getDiminishingReturnFactor("blindShot",1,3);
			e1.dx *= 0.3;
			e1.dx += ((e1.cx + e1.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1) * (null ? (0.03 + Math.random() * 0.020000000000000004) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.020000000000000004) * r;
			e1.stunS(1.1 * r);
			Game.ME.fx.bloodHit(_gthis.get_shootX(),_gthis.get_shootY(),(e1.cx + e1.xr) * Const.GRID,(e1.cy + e1.yr) * Const.GRID - e1.radius);
		}
		Game.ME.fx.shoot(_gthis.get_shootX(),_gthis.get_shootY(),(e1.cx + e1.xr) * Const.GRID,(e1.cy + e1.yr) * Const.GRID - e1.radius,2588888);
		Assets.SBANK.pew2(0.5);
		Assets.SBANK.gun1(1);
		Game.ME.fx.bullet(_gthis.get_shootX() - _gthis.dir * 5,_gthis.get_shootY(),-_gthis.dir);
		Game.ME.fx.flashBangS(4684506,0.1,0.1);
		if(_gthis.cover == null) {
			_gthis.dx += 0.03 * -_gthis.dir;
		}
		var _this10 = _gthis.spr;
		if(_this10._animManager == null) {
			_this10._animManager = new mt_heaps_slib_AnimManager(_this10);
			if(_this10.onAnimManAlloc != null) {
				_this10.onAnimManAlloc(_this10._animManager);
			}
		}
		_this10._animManager.play("heroBlindShoot");
	};
	var s2 = this.createSkill("headShot");
	s2.setTimers(0.85,0,0.1);
	s2.onStart = function() {
		var e2 = s2.target;
		var v1 = (e2.cx + e2.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v1 > 0 ? 1 : v1 < 0 ? -1 : _gthis.dir;
		var _this11 = _gthis.spr;
		if(_this11._animManager == null) {
			_this11._animManager = new mt_heaps_slib_AnimManager(_this11);
			if(_this11.onAnimManAlloc != null) {
				_this11.onAnimManAlloc(_this11._animManager);
			}
		}
		_this11._animManager.play("heroAim").loop();
	};
	s2.onExecute = function(e3) {
		if(!_gthis.useAmmo()) {
			var _this12 = _gthis.spr;
			if(_this12._animManager == null) {
				_this12._animManager = new mt_heaps_slib_AnimManager(_this12);
				if(_this12.onAnimManAlloc != null) {
					_this12.onAnimManAlloc(_this12._animManager);
				}
			}
			_this12._animManager.play("heroAimShoot");
			return;
		}
		Game.ME.fx.flashBangS(4684506,0.1,0.1);
		if(e3.hit(5,_gthis,true)) {
			Game.ME.fx.headShot(_gthis.get_shootX(),_gthis.get_shootY(),e3.get_headX(),e3.get_headY(),(e3.cx + e3.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1);
		}
		Game.ME.fx.shoot(_gthis.get_shootX(),_gthis.get_shootY(),e3.get_headX(),e3.get_headY(),2588888);
		Game.ME.fx.bullet(_gthis.get_shootX() - _gthis.dir * 5,_gthis.get_shootY(),_gthis.dir);
		Assets.SBANK.gun0(1);
		Assets.SBANK.pew0(0.5);
		if(_gthis.cover == null) {
			_gthis.dx += 0.03 * -_gthis.dir;
		}
		var _this13 = _gthis.spr;
		if(_this13._animManager == null) {
			_this13._animManager = new mt_heaps_slib_AnimManager(_this13);
			if(_this13.onAnimManAlloc != null) {
				_this13.onAnimManAlloc(_this13._animManager);
			}
		}
		_this13._animManager.play("heroAimShoot");
	};
};
$hxClasses["en.Hero"] = en_Hero;
en_Hero.__name__ = ["en","Hero"];
en_Hero.__super__ = Entity;
en_Hero.prototype = $extend(Entity.prototype,{
	setAmmo: function(v) {
		this.ammo = this.maxAmmo = v;
		Game.ME.updateHud();
	}
	,useAmmo: function() {
		if(this.ammo <= 0) {
			Game.ME.announce("Reload!");
			Game.ME.fx.noAmmo(this.get_shootX(),this.get_shootY(),this.dir);
			this.lockControlsS(0.2);
			return false;
		} else {
			this.ammo--;
			Game.ME.updateHud();
			return true;
		}
	}
	,onDamage: function(v) {
		Entity.prototype.onDamage.call(this,v);
		Game.ME.updateHud();
		Game.ME.fx.flashBangS(16711680,0.2,0.2);
		var _this = this.spr;
		if(_this._animManager == null) {
			_this._animManager = new mt_heaps_slib_AnimManager(_this);
			if(_this.onAnimManAlloc != null) {
				_this.onAnimManAlloc(_this._animManager);
			}
		}
		_this._animManager.playOverlap("heroHit");
	}
	,onDie: function() {
		Entity.prototype.onDie.call(this);
		new en_DeadBody(this,"hero");
		Game.ME.announce("ESCAPE to restart",16711680,true);
	}
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		var _this = this.icon;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,get_shootY: function() {
		var _g = !(this.life > 0 && !this.destroyed) || this.spr == null || this.spr.destroyed ? "" : this.spr.groupName;
		switch(_g) {
		case "heroAim":
			return (this.cy + this.yr) * Const.GRID - 21;
		case "heroBlind":
			return (this.cy + this.yr) * Const.GRID - 16;
		default:
			return Entity.prototype.get_shootY.call(this);
		}
	}
	,controlsLocked: function() {
		var _g = 0;
		var _g1 = this.skills;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.isCharging()) {
				return true;
			}
		}
		if(!(Entity.prototype.controlsLocked.call(this) || this.moveTarget != null)) {
			return !(Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0);
		} else {
			return true;
		}
	}
	,onClick: function(x,y,bt) {
		Entity.prototype.onClick.call(this,x,y,bt);
		if(this.controlsLocked()) {
			return;
		}
		this.executeAction(this.getActionAt(x,y));
	}
	,getActionAt: function(x,y) {
		var a = en_Action.None;
		var x1 = y - (this.cy + this.yr) * Const.GRID;
		if((x1 < 0 ? -x1 : x1) <= 1.5 * Const.GRID) {
			var ok = true;
			var _g = 0;
			var _g1 = Entity.ALL;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var tmp;
				if(e.isBlockingHeroMoves()) {
					var x2 = x - (e.cx + e.xr) * Const.GRID;
					tmp = (x2 < 0 ? -x2 : x2) <= Const.GRID;
				} else {
					tmp = false;
				}
				if(tmp) {
					ok = false;
					break;
				}
			}
			if(ok) {
				a = en_Action.Move(x,(this.cy + this.yr) * Const.GRID);
			}
		}
		var tmp1;
		var tmp2;
		if(this.ammo >= this.maxAmmo) {
			var x3 = (this.cx + this.xr) * Const.GRID - x;
			tmp2 = (x3 < 0 ? -x3 : x3) <= Const.GRID * 0.3;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var x4 = (this.cy + this.yr) * Const.GRID - this.radius - y;
			tmp1 = (x4 < 0 ? -x4 : x4) <= Const.GRID * 0.7;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			a = en_Action.Wait(0.6);
		}
		var _g2 = 0;
		var _g11 = en_Cover.ALL;
		while(_g2 < _g11.length) {
			var e1 = _g11[_g2];
			++_g2;
			if(e1.left.contains(x,y) && e1.canHostSomeone(-1)) {
				a = en_Action.TakeCover(e1,-1);
			}
			if(e1.right.contains(x,y) && e1.canHostSomeone(1)) {
				a = en_Action.TakeCover(e1,1);
			}
		}
		var best = null;
		var _g3 = 0;
		var _g12 = en_Mob.ALL;
		while(_g3 < _g12.length) {
			var e2 = _g12[_g3];
			++_g3;
			var tmp3;
			if(e2.canBeShot() && (e2.head.contains(x,y) || e2.torso.contains(x,y) || e2.legs.contains(x,y))) {
				if(best != null) {
					var ax = (e2.cx + e2.xr) * Const.GRID;
					var ay = (e2.cy + e2.yr) * Const.GRID;
					var ax1 = (best.cx + best.xr) * Const.GRID;
					var ay1 = (best.cy + best.yr) * Const.GRID;
					tmp3 = Math.sqrt((ax - x) * (ax - x) + (ay - y) * (ay - y)) <= Math.sqrt((ax1 - x) * (ax1 - x) + (ay1 - y) * (ay1 - y));
				} else {
					tmp3 = true;
				}
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				best = e2;
			}
		}
		if(best != null) {
			if(best.head.contains(x,y)) {
				a = en_Action.HeadShot(best);
			} else {
				a = en_Action.BlindShot(best);
			}
		}
		var tmp4;
		var tmp5;
		if(this.ammo < this.maxAmmo) {
			var x5 = (this.cx + this.xr) * Const.GRID - x;
			tmp5 = (x5 < 0 ? -x5 : x5) <= Const.GRID * 0.3;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			var x6 = (this.cy + this.yr) * Const.GRID - this.radius - y;
			tmp4 = (x6 < 0 ? -x6 : x6) <= Const.GRID * 0.7;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			a = en_Action.Reload;
		}
		return a;
	}
	,executeAction: function(a) {
		if(!Game.ME.isReplay) {
			Game.ME.heroHistory.push({ t : Game.ME.ftime | 0, a : a});
		}
		switch(a[1]) {
		case 0:
			break;
		case 1:
			var e = a[2];
			this.getSkill("blindShot").prepareOn(e);
			break;
		case 2:
			var e1 = a[2];
			this.getSkill("headShot").prepareOn(e1);
			break;
		case 3:
			var y = a[3];
			var x = a[2];
			var _this = this.spr;
			if(_this._animManager == null) {
				_this._animManager = new mt_heaps_slib_AnimManager(_this);
				if(_this.onAnimManAlloc != null) {
					_this.onAnimManAlloc(_this._animManager);
				}
			}
			_this._animManager.stopWithStateAnims();
			this.moveTarget = new FPoint(x,y);
			this.afterMoveAction = en_Action.None;
			this.leaveCover();
			break;
		case 4:
			var side = a[3];
			var c = a[2];
			var _this1 = this.spr;
			if(_this1._animManager == null) {
				_this1._animManager = new mt_heaps_slib_AnimManager(_this1);
				if(_this1.onAnimManAlloc != null) {
					_this1.onAnimManAlloc(_this1._animManager);
				}
			}
			_this1._animManager.stopWithStateAnims();
			if(c.canHostSomeone(side)) {
				var x1 = (c.cx + c.xr) * Const.GRID + side * 10;
				var y1 = (c.cy + c.yr) * Const.GRID - c.radius;
				var ax = (this.cx + this.xr) * Const.GRID;
				var ay = (this.cy + this.yr) * Const.GRID;
				if(Math.sqrt((ax - x1) * (ax - x1) + (ay - y1) * (ay - y1)) >= 20) {
					this.moveTarget = new FPoint((c.cx + c.xr) * Const.GRID + side * 10,(this.cy + this.yr) * Const.GRID);
					this.afterMoveAction = a;
					this.leaveCover();
				} else {
					this.startCover(c,side);
				}
			}
			break;
		case 5:
			var t = a[2];
			var _this2 = this.spr;
			if(_this2._animManager == null) {
				_this2._animManager = new mt_heaps_slib_AnimManager(_this2);
				if(_this2.onAnimManAlloc != null) {
					_this2.onAnimManAlloc(_this2._animManager);
				}
			}
			_this2._animManager.stopWithStateAnims();
			this.lockControlsS(t);
			break;
		case 6:
			var _this3 = this.spr;
			if(_this3._animManager == null) {
				_this3._animManager = new mt_heaps_slib_AnimManager(_this3);
				if(_this3.onAnimManAlloc != null) {
					_this3.onAnimManAlloc(_this3._animManager);
				}
			}
			_this3._animManager.stopWithStateAnims();
			var _this4 = this.spr;
			if(_this4._animManager == null) {
				_this4._animManager = new mt_heaps_slib_AnimManager(_this4);
				if(_this4.onAnimManAlloc != null) {
					_this4.onAnimManAlloc(_this4._animManager);
				}
			}
			_this4._animManager.play("heroReload");
			Assets.SBANK.reload0(1);
			var f = Assets.SBANK.reload1;
			var tmp = function() {
				return f(1);
			};
			Game.ME.delayer.addS(null,tmp,0.25);
			var f1 = Assets.SBANK.reload1;
			var tmp1 = function() {
				return f1(1);
			};
			Game.ME.delayer.addS(null,tmp1,0.7);
			var _this5 = Game.ME.hero;
			var _this6 = Game.ME.hero;
			Game.ME.fx.charger((_this5.cx + _this5.xr) * Const.GRID - this.dir * 6,(_this6.cy + _this6.yr) * Const.GRID - _this6.radius - 4,-this.dir);
			var _this7 = this.cd;
			var frames = 0.8 * this.cd.baseFps;
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this7._getCdObject(8388608);
			if(!(cur != null && frames < cur.frames && false)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this7.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this7.fastCheck.remove(cur.k);
					}
				} else {
					_this7.fastCheck.h[8388608] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this7.cdList.push(new mt__$Cooldown_CdInst(8388608,frames));
					}
				}
			}
			this.lockControlsS(0.8);
			this.setAmmo(this.maxAmmo);
			break;
		}
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
	}
	,update: function() {
		Entity.prototype.update.call(this);
		if(this.cover != null && !this.hasSkillCharging() && !this.controlsLocked()) {
			var e = this.cover;
			var v = (e.cx + e.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1;
			this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
		}
		var m = Game.ME.getMouse();
		var a = this.getActionAt(m.x,m.y);
		this.icon.alpha = 0.7;
		this.icon.set_visible(true);
		var _this = this.icon.color;
		var c = (255. | 0) << 24 | 16777215;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		switch(a[1]) {
		case 0:
			this.icon.set_visible(false);
			break;
		case 1:
			var e1 = a[2];
			var _this1 = this.icon;
			var x = e1.torso.getX();
			var y = e1.torso.getY() + 3;
			_this1.posChanged = true;
			_this1.x = x;
			_this1.posChanged = true;
			_this1.y = y;
			var _this2 = this.icon;
			var g = e1.isCoveredFrom(this) ? "iconShootCover" : "iconShoot";
			if(g != null && g != _this2.groupName) {
				_this2.groupName = g;
			}
			if(!_this2.destroyed && _this2.lib != null && _this2.groupName != null) {
				var _this3 = _this2.lib;
				var k = _this2.groupName;
				var tmp;
				if(k == null) {
					tmp = _this3.currentGroup;
				} else {
					var _this4 = _this3.groups;
					tmp = __map_reserved[k] != null ? _this4.getReserved(k) : _this4.h[k];
				}
				_this2.group = tmp;
				var _this5 = _this2.lib;
				var k1 = _this2.groupName;
				var g1;
				if(k1 == null) {
					g1 = _this5.currentGroup;
				} else {
					var _this6 = _this5.groups;
					g1 = __map_reserved[k1] != null ? _this6.getReserved(k1) : _this6.h[k1];
				}
				_this2.frameData = g1 == null ? null : g1.frames[0];
				if(_this2.frameData == null) {
					throw new js__$Boot_HaxeError("Unknown frame: " + _this2.groupName + "(" + 0 + ")");
				}
				if(_this2.rawTile == null) {
					_this2.rawTile = _this2.lib.pages[_this2.frameData.page].clone();
				} else {
					_this2.rawTile.setTexture(_this2.lib.pages[_this2.frameData.page].innerTex);
				}
				_this2.lastPage = _this2.frameData.page;
				_this2.setFrame(0);
			} else {
				_this2.setEmptyTexture();
			}
			var _this7 = this.icon;
			var col = e1.isCoveredFrom(this) ? 16711680 : 16777215;
			var _this8 = _this7.color;
			var c1 = (255. | 0) << 24 | col;
			_this8.x = (c1 >> 16 & 255) / 255;
			_this8.y = (c1 >> 8 & 255) / 255;
			_this8.z = (c1 & 255) / 255;
			_this8.w = (c1 >>> 24) / 255;
			break;
		case 2:
			var e2 = a[2];
			var _this9 = this.icon;
			var x1 = e2.head.getX();
			var y1 = e2.head.getY();
			_this9.posChanged = true;
			_this9.x = x1;
			_this9.posChanged = true;
			_this9.y = y1;
			var _this10 = this.icon;
			if("iconShoot" != _this10.groupName) {
				_this10.groupName = "iconShoot";
			}
			if(!_this10.destroyed && _this10.lib != null && _this10.groupName != null) {
				var _this11 = _this10.lib;
				var k2 = _this10.groupName;
				var tmp1;
				if(k2 == null) {
					tmp1 = _this11.currentGroup;
				} else {
					var _this12 = _this11.groups;
					tmp1 = __map_reserved[k2] != null ? _this12.getReserved(k2) : _this12.h[k2];
				}
				_this10.group = tmp1;
				var _this13 = _this10.lib;
				var k3 = _this10.groupName;
				var g2;
				if(k3 == null) {
					g2 = _this13.currentGroup;
				} else {
					var _this14 = _this13.groups;
					g2 = __map_reserved[k3] != null ? _this14.getReserved(k3) : _this14.h[k3];
				}
				_this10.frameData = g2 == null ? null : g2.frames[0];
				if(_this10.frameData == null) {
					throw new js__$Boot_HaxeError("Unknown frame: " + _this10.groupName + "(" + 0 + ")");
				}
				if(_this10.rawTile == null) {
					_this10.rawTile = _this10.lib.pages[_this10.frameData.page].clone();
				} else {
					_this10.rawTile.setTexture(_this10.lib.pages[_this10.frameData.page].innerTex);
				}
				_this10.lastPage = _this10.frameData.page;
				_this10.setFrame(0);
			} else {
				_this10.setEmptyTexture();
			}
			var _this15 = this.icon.color;
			var c2 = (255. | 0) << 24 | 16754176;
			_this15.x = (c2 >> 16 & 255) / 255;
			_this15.y = (c2 >> 8 & 255) / 255;
			_this15.z = (c2 & 255) / 255;
			_this15.w = (c2 >>> 24) / 255;
			break;
		case 3:
			this.icon.set_visible(false);
			break;
		case 4:
			var side = a[3];
			var e3 = a[2];
			var _this16 = this.icon;
			_this16.posChanged = true;
			_this16.x = (e3.cx + e3.xr) * Const.GRID + side * 14;
			_this16.posChanged = true;
			_this16.y = (e3.cy + e3.yr) * Const.GRID - 6;
			var _this17 = this.icon;
			var g3 = "iconCover" + (side == -1 ? "Left" : "Right");
			if(g3 != null && g3 != _this17.groupName) {
				_this17.groupName = g3;
			}
			if(!_this17.destroyed && _this17.lib != null && _this17.groupName != null) {
				var _this18 = _this17.lib;
				var k4 = _this17.groupName;
				var tmp2;
				if(k4 == null) {
					tmp2 = _this18.currentGroup;
				} else {
					var _this19 = _this18.groups;
					tmp2 = __map_reserved[k4] != null ? _this19.getReserved(k4) : _this19.h[k4];
				}
				_this17.group = tmp2;
				var _this20 = _this17.lib;
				var k5 = _this17.groupName;
				var g4;
				if(k5 == null) {
					g4 = _this20.currentGroup;
				} else {
					var _this21 = _this20.groups;
					g4 = __map_reserved[k5] != null ? _this21.getReserved(k5) : _this21.h[k5];
				}
				_this17.frameData = g4 == null ? null : g4.frames[0];
				if(_this17.frameData == null) {
					throw new js__$Boot_HaxeError("Unknown frame: " + _this17.groupName + "(" + 0 + ")");
				}
				if(_this17.rawTile == null) {
					_this17.rawTile = _this17.lib.pages[_this17.frameData.page].clone();
				} else {
					_this17.rawTile.setTexture(_this17.lib.pages[_this17.frameData.page].innerTex);
				}
				_this17.lastPage = _this17.frameData.page;
				_this17.setFrame(0);
			} else {
				_this17.setEmptyTexture();
			}
			break;
		case 5:
			var _this22 = this.icon;
			_this22.posChanged = true;
			_this22.x = (this.cx + this.xr) * Const.GRID;
			_this22.posChanged = true;
			_this22.y = (this.cy + this.yr) * Const.GRID;
			var _this23 = this.icon;
			if("iconWait" != _this23.groupName) {
				_this23.groupName = "iconWait";
			}
			if(!_this23.destroyed && _this23.lib != null && _this23.groupName != null) {
				var _this24 = _this23.lib;
				var k6 = _this23.groupName;
				var tmp3;
				if(k6 == null) {
					tmp3 = _this24.currentGroup;
				} else {
					var _this25 = _this24.groups;
					tmp3 = __map_reserved[k6] != null ? _this25.getReserved(k6) : _this25.h[k6];
				}
				_this23.group = tmp3;
				var _this26 = _this23.lib;
				var k7 = _this23.groupName;
				var g5;
				if(k7 == null) {
					g5 = _this26.currentGroup;
				} else {
					var _this27 = _this26.groups;
					g5 = __map_reserved[k7] != null ? _this27.getReserved(k7) : _this27.h[k7];
				}
				_this23.frameData = g5 == null ? null : g5.frames[0];
				if(_this23.frameData == null) {
					throw new js__$Boot_HaxeError("Unknown frame: " + _this23.groupName + "(" + 0 + ")");
				}
				if(_this23.rawTile == null) {
					_this23.rawTile = _this23.lib.pages[_this23.frameData.page].clone();
				} else {
					_this23.rawTile.setTexture(_this23.lib.pages[_this23.frameData.page].innerTex);
				}
				_this23.lastPage = _this23.frameData.page;
				_this23.setFrame(0);
			} else {
				_this23.setEmptyTexture();
			}
			break;
		case 6:
			var _this28 = this.icon;
			_this28.posChanged = true;
			_this28.x = (this.cx + this.xr) * Const.GRID;
			_this28.posChanged = true;
			_this28.y = (this.cy + this.yr) * Const.GRID;
			var _this29 = this.icon;
			if("iconReload" != _this29.groupName) {
				_this29.groupName = "iconReload";
			}
			if(!_this29.destroyed && _this29.lib != null && _this29.groupName != null) {
				var _this30 = _this29.lib;
				var k8 = _this29.groupName;
				var tmp4;
				if(k8 == null) {
					tmp4 = _this30.currentGroup;
				} else {
					var _this31 = _this30.groups;
					tmp4 = __map_reserved[k8] != null ? _this31.getReserved(k8) : _this31.h[k8];
				}
				_this29.group = tmp4;
				var _this32 = _this29.lib;
				var k9 = _this29.groupName;
				var g6;
				if(k9 == null) {
					g6 = _this32.currentGroup;
				} else {
					var _this33 = _this32.groups;
					g6 = __map_reserved[k9] != null ? _this33.getReserved(k9) : _this33.h[k9];
				}
				_this29.frameData = g6 == null ? null : g6.frames[0];
				if(_this29.frameData == null) {
					throw new js__$Boot_HaxeError("Unknown frame: " + _this29.groupName + "(" + 0 + ")");
				}
				if(_this29.rawTile == null) {
					_this29.rawTile = _this29.lib.pages[_this29.frameData.page].clone();
				} else {
					_this29.rawTile.setTexture(_this29.lib.pages[_this29.frameData.page].innerTex);
				}
				_this29.lastPage = _this29.frameData.page;
				_this29.setFrame(0);
			} else {
				_this29.setEmptyTexture();
			}
			break;
		}
		if(!this.controlsLocked() && Main.ME.keyPressed(82) && this.ammo < this.maxAmmo) {
			this.executeAction(en_Action.Reload);
		}
		if(this.moveTarget != null && !this.movementLocked()) {
			var x2 = (this.cx + this.xr) * Const.GRID - this.moveTarget.x;
			if((x2 < 0 ? -x2 : x2) <= 5) {
				this.executeAction(this.afterMoveAction);
				this.moveTarget = null;
				this.afterMoveAction = en_Action.None;
				this.dx *= 0.3;
				var _this34 = this.cd;
				var frames = 0.2 * this.cd.baseFps;
				frames = Math.floor(frames * 1000) / 1000;
				var cur = _this34._getCdObject(16777216);
				if(!(cur != null && frames < cur.frames && false)) {
					if(frames <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this34.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this34.fastCheck.remove(cur.k);
						}
					} else {
						_this34.fastCheck.h[16777216] = true;
						if(cur != null) {
							cur.frames = frames;
						} else {
							_this34.cdList.push(new mt__$Cooldown_CdInst(16777216,frames));
						}
					}
				}
			} else {
				var s = 0.02;
				if(this.moveTarget.x > (this.cx + this.xr) * Const.GRID) {
					this.dir = 1;
					this.dx += s * this.dt;
				}
				if(this.moveTarget.x < (this.cx + this.xr) * Const.GRID) {
					this.dir = -1;
					this.dx -= s * this.dt;
				}
			}
		}
	}
	,__class__: en_Hero
});
var en_Mob = function(x,y) {
	this.tx = -1;
	Entity.call(this,x,y);
	en_Mob.ALL.push(this);
	Game.ME.scroller.addChildAt(this.spr,Const.DP_MOBS);
	this.hitSounds = [Assets.SBANK.grunt0,Assets.SBANK.grunt1,Assets.SBANK.grunt2,Assets.SBANK.grunt3,Assets.SBANK.grunt4];
	mt_deepnight_Lib.shuffleArray(this.hitSounds,Std.random);
	this.initLife(4);
	this.lifeBar.set_visible(true);
};
$hxClasses["en.Mob"] = en_Mob;
en_Mob.__name__ = ["en","Mob"];
en_Mob.__super__ = Entity;
en_Mob.prototype = $extend(Entity.prototype,{
	playHitSound: function() {
		var s = this.hitSounds.shift();
		s(0.7);
		var _this = this.hitSounds;
		var pos = this.hitSounds.length;
		var pos1 = null ? Std.random(3) * (Std.random(2) * 2 - 1) : Std.random(3);
		_this.splice(pos - pos1,0,s);
	}
	,enterArena: function(t) {
		var _gthis = this;
		var v = this.cx < Game.ME.level.wid * 0.5 ? 1 : -1;
		this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
		this.spr.alpha = 0;
		var _this = this.cd;
		var frames = 0.5 * this.cd.baseFps;
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this._getCdObject(41943040);
		if(!(cur != null && frames < cur.frames && false)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this.fastCheck.remove(cur.k);
				}
			} else {
				_this.fastCheck.h[41943040] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this.cdList.push(new mt__$Cooldown_CdInst(41943040,frames));
				}
			}
		}
		var cd = this.cd._getCdObject(41943040);
		if(cd == null) {
			throw new js__$Boot_HaxeError("cannot bind onComplete(" + 41943040 + "): cooldown " + 41943040 + " isn't running");
		}
		cd.cb = function() {
			var e = Game.ME.hero;
			var v1 = (e.cx + e.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
			_gthis.dir = v1 > 0 ? 1 : v1 < 0 ? -1 : _gthis.dir;
		};
		var cd1 = this.cd._getCdObject(41943040);
		this.lockControlsS(t + (cd1 == null ? 0 : cd1.frames) / this.cd.baseFps);
	}
	,onDie: function() {
		Entity.prototype.onDie.call(this);
		Game.ME.level.waveMobCount--;
	}
	,canBeShot: function() {
		return !this.cd.fastCheck.h.hasOwnProperty(41943040);
	}
	,isBlockingHeroMoves: function() {
		return true;
	}
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		HxOverrides.remove(en_Mob.ALL,this);
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
		if(this.cd.fastCheck.h.hasOwnProperty(41943040)) {
			var tmp = this.cd._getRatio(41943040);
			this.spr.alpha = 1 - tmp;
		}
	}
	,goto: function(x,onDone) {
		this.tx = x;
		this.onArrive = onDone;
	}
	,update: function() {
		var _gthis = this;
		Entity.prototype.update.call(this);
		if(this.tx != -1 && !this.cd.fastCheck.h.hasOwnProperty(41943040) && !this.movementLocked() && !this.controlsLocked() && !this.hasSkillCharging()) {
			if(this.cover != null) {
				this.leaveCover();
			}
			var s = 0.015;
			if(this.tx > this.cx) {
				this.dir = 1;
				this.dx += s * this.dt;
			}
			if(this.tx < this.cx) {
				this.dir = -1;
				this.dx -= s * this.dt;
			}
			if(this.tx == this.cx) {
				this.tx = -1;
				if(this.onArrive != null) {
					var cb = this.onArrive;
					this.onArrive = null;
					cb();
				}
			}
		}
		if(this.cd.fastCheck.h.hasOwnProperty(41943040)) {
			this.dx = this.dir * 0.05;
		}
		if(this.cover == null && this.tx == -1 && !this.controlsLocked() && !this.hasSkillCharging()) {
			var _g = 0;
			var _g1 = en_Cover.ALL;
			while(_g < _g1.length) {
				var e = [_g1[_g]];
				++_g;
				var tmp;
				var ax = this.cx + this.xr;
				var ay = this.cy + this.yr;
				var bx = e[0].cx + e[0].xr;
				var by = e[0].cy + e[0].yr;
				if(Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by)) <= 3) {
					var e1 = Game.ME.hero;
					tmp = e[0].canHostSomeone(-((e1.cx + e1.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1));
				} else {
					tmp = false;
				}
				if(tmp && !e[0].coversAnyone()) {
					var e2 = Game.ME.hero;
					this.goto(e[0].cx - ((e2.cx + e2.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1),(function(e3) {
						return function() {
							var e4 = Game.ME.hero;
							_gthis.startCover(e3[0],-((e4.cx + e4.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1));
						};
					})(e));
				}
			}
		}
		var tmp1;
		if(Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0 && !this.movementLocked() && !this.controlsLocked() && (!this.hasSkillCharging() || this.canInterruptSkill())) {
			var e5 = Game.ME.hero;
			var ax1 = this.cx + this.xr;
			var ay1 = this.cy + this.yr;
			var bx1 = e5.cx + e5.xr;
			var by1 = e5.cy + e5.yr;
			tmp1 = Math.sqrt((ax1 - bx1) * (ax1 - bx1) + (ay1 - by1) * (ay1 - by1)) <= 1.75;
		} else {
			tmp1 = false;
		}
		if(tmp1 && Game.ME.hero.moveTarget == null && !this.cd.fastCheck.h.hasOwnProperty(46137344)) {
			var tmp2;
			if(this.cover != null) {
				var e6 = this.cover;
				var e7 = Game.ME.hero;
				tmp2 = ((e6.cx + e6.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) != ((e7.cx + e7.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1);
			} else {
				tmp2 = true;
			}
			if(tmp2) {
				this.leaveCover();
				var _g2 = 0;
				var _g11 = this.skills;
				while(_g2 < _g11.length) {
					var s1 = _g11[_g2];
					++_g2;
					s1.interrupt(false);
				}
				var e8 = Game.ME.hero;
				this.dx = -((e8.cx + e8.xr) * Const.GRID <= (this.cx + this.xr) * Const.GRID ? -1 : 1) * 0.12;
				this.dy = -0.15;
				var _this = this.cd;
				var frames = 0.6 * this.cd.baseFps;
				frames = Math.floor(frames * 1000) / 1000;
				var cur = _this._getCdObject(46137344);
				if(!(cur != null && frames < cur.frames && false)) {
					if(frames <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this.fastCheck.remove(cur.k);
						}
					} else {
						_this.fastCheck.h[46137344] = true;
						if(cur != null) {
							cur.frames = frames;
						} else {
							_this.cdList.push(new mt__$Cooldown_CdInst(46137344,frames));
						}
					}
				}
			}
		}
	}
	,__class__: en_Mob
});
var en_m_BasicGun = function(x,y) {
	var _gthis = this;
	en_Mob.call(this,x,y);
	this.initLife(3);
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new mt_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("aRun",3,null,function() {
		return _gthis.cd.fastCheck.h.hasOwnProperty(41943040);
	});
	var _this1 = this.spr;
	if(_this1._animManager == null) {
		_this1._animManager = new mt_heaps_slib_AnimManager(_this1);
		if(_this1.onAnimManAlloc != null) {
			_this1.onAnimManAlloc(_this1._animManager);
		}
	}
	_this1._animManager.registerStateAnim("aPush",2,null,function() {
		if(!(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0)) {
			return _gthis.isStunned();
		} else {
			return false;
		}
	});
	var _this2 = this.spr;
	if(_this2._animManager == null) {
		_this2._animManager = new mt_heaps_slib_AnimManager(_this2);
		if(_this2.onAnimManAlloc != null) {
			_this2.onAnimManAlloc(_this2._animManager);
		}
	}
	_this2._animManager.registerStateAnim("aStun",1,null,function() {
		return _gthis.isStunned();
	});
	var _this3 = this.spr;
	if(_this3._animManager == null) {
		_this3._animManager = new mt_heaps_slib_AnimManager(_this3);
		if(_this3.onAnimManAlloc != null) {
			_this3.onAnimManAlloc(_this3._animManager);
		}
	}
	_this3._animManager.registerStateAnim("aIdle",0);
	var s = this.createSkill("shoot");
	s.setTimers(1,0.7,0.3);
	s.onStart = function() {
		var e = s.target;
		var v = (e.cx + e.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v > 0 ? 1 : v < 0 ? -1 : _gthis.dir;
		var _this4 = _gthis.spr;
		if(_this4._animManager == null) {
			_this4._animManager = new mt_heaps_slib_AnimManager(_this4);
			if(_this4.onAnimManAlloc != null) {
				_this4.onAnimManAlloc(_this4._animManager);
			}
		}
		_this4._animManager.play("aAim").loop();
	};
	s.onProgress = function(t) {
		var e1 = s.target;
		var v1 = (e1.cx + e1.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v1 > 0 ? 1 : v1 < 0 ? -1 : _gthis.dir;
	};
	s.onInterrupt = function() {
		var _this5 = _gthis.spr;
		if(_this5._animManager == null) {
			_this5._animManager = new mt_heaps_slib_AnimManager(_this5);
			if(_this5.onAnimManAlloc != null) {
				_this5.onAnimManAlloc(_this5._animManager);
			}
		}
		_this5._animManager.stopWithStateAnims();
	};
	s.onExecute = function(e2) {
		var v2 = (e2.cx + e2.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v2 > 0 ? 1 : v2 < 0 ? -1 : _gthis.dir;
		_gthis.dy = -0.1;
		if(e2.hit(1,_gthis)) {
			e2.dx *= 0.3;
			e2.dx += ((e2.cx + e2.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1) * (null ? (0.03 + Math.random() * 0.03) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.03);
			e2.lockMovementsS(0.3);
			e2.lockControlsS(0.3);
			Game.ME.fx.bloodHit(_gthis.get_shootX(),_gthis.get_shootY(),(e2.cx + e2.xr) * Const.GRID,(e2.cy + e2.yr) * Const.GRID - e2.radius);
		}
		Assets.SBANK.pew2(1);
		Game.ME.fx.shoot(_gthis.get_shootX(),_gthis.get_shootY(),(e2.cx + e2.xr) * Const.GRID,(e2.cy + e2.yr) * Const.GRID - e2.radius,16711680);
		var _this6 = _gthis.spr;
		if(_this6._animManager == null) {
			_this6._animManager = new mt_heaps_slib_AnimManager(_this6);
			if(_this6.onAnimManAlloc != null) {
				_this6.onAnimManAlloc(_this6._animManager);
			}
		}
		var _this7 = _this6._animManager.play("aAimShoot");
		var durationFrames = Const.FPS * 0.2;
		_this7.play("aBlind",99999,true);
		if(!_this7.destroyed && _this7.stack.length > 0) {
			_this7.stack[_this7.stack.length - 1].playDuration = durationFrames;
		}
	};
	this.lockControlsS(null ? (0.3 + Math.random() * 1.3) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.3);
};
$hxClasses["en.m.BasicGun"] = en_m_BasicGun;
en_m_BasicGun.__name__ = ["en","m","BasicGun"];
en_m_BasicGun.__super__ = en_Mob;
en_m_BasicGun.prototype = $extend(en_Mob.prototype,{
	onDie: function() {
		en_Mob.prototype.onDie.call(this);
		new en_DeadBody(this,"a");
	}
	,get_shootY: function() {
		var _g = !(this.life > 0 && !this.destroyed) || this.spr == null || this.spr.destroyed ? "" : this.spr.groupName;
		switch(_g) {
		case "aAim":
			return (this.cy + this.yr) * Const.GRID - 18;
		case "aBlind":
			return (this.cy + this.yr) * Const.GRID - 13;
		default:
			return en_Mob.prototype.get_shootY.call(this);
		}
	}
	,get_headY: function() {
		if(this.spr != null && !this.spr.destroyed) {
			var tmp = en_Mob.prototype.get_headY.call(this);
			var _g = this.spr.groupName;
			return tmp + (_g == "aStun" ? 7 : 0);
		}
		return en_Mob.prototype.get_headY.call(this);
	}
	,onDamage: function(v) {
		en_Mob.prototype.onDamage.call(this,v);
		var _this = this.spr;
		if(_this._animManager == null) {
			_this._animManager = new mt_heaps_slib_AnimManager(_this);
			if(_this.onAnimManAlloc != null) {
				_this.onAnimManAlloc(_this._animManager);
			}
		}
		_this._animManager.playOverlap("aHit");
		this.playHitSound();
		if(this.getDiminishingReturnFactor("hitInterrupt",3,3) > 0) {
			this.interruptSkills(true);
		}
	}
	,update: function() {
		en_Mob.prototype.update.call(this);
		var _this = Game.ME.cd;
		var frames = Const.INFINITE * Game.ME.cd.baseFps;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(96468992)) {
			tmp = true;
		} else {
			var frames1 = frames;
			frames1 = Math.floor(frames1 * 1000) / 1000;
			var cur = _this._getCdObject(96468992);
			if(!(cur != null && frames1 < cur.frames && false)) {
				if(frames1 <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[96468992] = true;
					if(cur != null) {
						cur.frames = frames1;
					} else {
						_this.cdList.push(new mt__$Cooldown_CdInst(96468992,frames1));
					}
				}
			}
			tmp = false;
		}
		if(!tmp) {
			this.setLabel("Wick is here!\nKill him!");
		}
		if(!this.controlsLocked() && (Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0) && this.tx == -1) {
			var tmp1;
			if(this.getSkill("shoot").isReady()) {
				var _this1 = Game.ME.hero;
				tmp1 = _this1.life > 0 && !_this1.destroyed;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				this.getSkill("shoot").prepareOn(Game.ME.hero);
			}
		}
	}
	,__class__: en_m_BasicGun
});
var en_m_Grenader = function(x,y) {
	var _gthis = this;
	en_Mob.call(this,x,y);
	this.initLife(6);
	var _this = this.spr;
	if(_this._animManager == null) {
		_this._animManager = new mt_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("bPush",2,null,function() {
		if(!(Game.ME.level.hasColl(_gthis.cx,_gthis.cy + 1) && _gthis.yr >= 1 && _gthis.dy == 0)) {
			return _gthis.cd.fastCheck.h.hasOwnProperty(62914560);
		} else {
			return false;
		}
	});
	var _this1 = this.spr;
	if(_this1._animManager == null) {
		_this1._animManager = new mt_heaps_slib_AnimManager(_this1);
		if(_this1.onAnimManAlloc != null) {
			_this1.onAnimManAlloc(_this1._animManager);
		}
	}
	_this1._animManager.registerStateAnim("bStun",1,null,function() {
		return _gthis.isStunned();
	});
	var _this2 = this.spr;
	if(_this2._animManager == null) {
		_this2._animManager = new mt_heaps_slib_AnimManager(_this2);
		if(_this2.onAnimManAlloc != null) {
			_this2.onAnimManAlloc(_this2._animManager);
		}
	}
	_this2._animManager.registerStateAnim("bIdle",0);
	var s = this.createSkill("shoot");
	s.setTimers(0.6,0,3);
	s.onStart = function() {
		var e = s.target;
		var v = (e.cx + e.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v > 0 ? 1 : v < 0 ? -1 : _gthis.dir;
		var _this3 = _gthis.spr;
		if(_this3._animManager == null) {
			_this3._animManager = new mt_heaps_slib_AnimManager(_this3);
			if(_this3.onAnimManAlloc != null) {
				_this3.onAnimManAlloc(_this3._animManager);
			}
		}
		_this3._animManager.play("bBlind").loop();
	};
	s.onProgress = function(t) {
		var e1 = s.target;
		var v1 = (e1.cx + e1.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1;
		_gthis.dir = v1 > 0 ? 1 : v1 < 0 ? -1 : _gthis.dir;
	};
	s.onInterrupt = function() {
		var _this4 = _gthis.spr;
		if(_this4._animManager == null) {
			_this4._animManager = new mt_heaps_slib_AnimManager(_this4);
			if(_this4.onAnimManAlloc != null) {
				_this4.onAnimManAlloc(_this4._animManager);
			}
		}
		_this4._animManager.stopWithStateAnims();
	};
	s.onExecute = function(e2) {
		_gthis.dy = -0.1;
		var g = new en_Grenade(_gthis);
		g.setPosPixel(_gthis.get_shootX(),_gthis.get_shootY());
		var x1 = e2.cx - _gthis.cx;
		g.dx = ((e2.cx + e2.xr) * Const.GRID <= (_gthis.cx + _gthis.xr) * Const.GRID ? -1 : 1) * 0.2 * (x1 < 0 ? -x1 : x1) / 7;
		g.dy = -0.05;
		var _this5 = _gthis.spr;
		if(_this5._animManager == null) {
			_this5._animManager = new mt_heaps_slib_AnimManager(_this5);
			if(_this5.onAnimManAlloc != null) {
				_this5.onAnimManAlloc(_this5._animManager);
			}
		}
		_this5._animManager.play("bBlindShoot");
	};
};
$hxClasses["en.m.Grenader"] = en_m_Grenader;
en_m_Grenader.__name__ = ["en","m","Grenader"];
en_m_Grenader.__super__ = en_Mob;
en_m_Grenader.prototype = $extend(en_Mob.prototype,{
	onDie: function() {
		en_Mob.prototype.onDie.call(this);
		new en_DeadBody(this,"b");
	}
	,get_shootY: function() {
		return (this.cy + this.yr) * Const.GRID - 12;
	}
	,get_headY: function() {
		if(this.spr != null && !this.spr.destroyed) {
			var tmp = en_Mob.prototype.get_headY.call(this);
			var _g = this.spr.groupName;
			return tmp + (_g == "bStun" ? 11 : 0);
		}
		return en_Mob.prototype.get_headY.call(this);
	}
	,onDamage: function(v) {
		en_Mob.prototype.onDamage.call(this,v);
		var _this = this.spr;
		if(_this._animManager == null) {
			_this._animManager = new mt_heaps_slib_AnimManager(_this);
			if(_this.onAnimManAlloc != null) {
				_this.onAnimManAlloc(_this._animManager);
			}
		}
		_this._animManager.playOverlap("bHit");
		if(this.getDiminishingReturnFactor("hitInterrupt",3,3) > 0) {
			this.interruptSkills(true);
		}
	}
	,update: function() {
		en_Mob.prototype.update.call(this);
		var tmp;
		if(this.tx == -1 && !this.controlsLocked() && (Game.ME.level.hasColl(this.cx,this.cy + 1) && this.yr >= 1 && this.dy == 0) && this.getSkill("shoot").isReady()) {
			var _this = Game.ME.hero;
			tmp = _this.life > 0 && !_this.destroyed;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.getSkill("shoot").prepareOn(Game.ME.hero);
		}
	}
	,__class__: en_m_Grenader
});
var format_gif_Block = $hxClasses["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"] };
format_gif_Block.BFrame = function(frame) { var $x = ["BFrame",0,frame]; $x.__enum__ = format_gif_Block; $x.toString = $estr; return $x; };
format_gif_Block.BExtension = function(extension) { var $x = ["BExtension",1,extension]; $x.__enum__ = format_gif_Block; $x.toString = $estr; return $x; };
format_gif_Block.BEOF = ["BEOF",2];
format_gif_Block.BEOF.toString = $estr;
format_gif_Block.BEOF.__enum__ = format_gif_Block;
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxClasses["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"] };
format_gif_Extension.EGraphicControl = function(gce) { var $x = ["EGraphicControl",0,gce]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EComment = function(text) { var $x = ["EComment",1,text]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EText = function(pte) { var $x = ["EText",2,pte]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EApplicationExtension = function(ext) { var $x = ["EApplicationExtension",3,ext]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EUnknown = function(id,data) { var $x = ["EUnknown",4,id,data]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxClasses["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"] };
format_gif_ApplicationExtension.AENetscapeLooping = function(loops) { var $x = ["AENetscapeLooping",0,loops]; $x.__enum__ = format_gif_ApplicationExtension; $x.toString = $estr; return $x; };
format_gif_ApplicationExtension.AEUnknown = function(name,version,data) { var $x = ["AEUnknown",1,name,version,data]; $x.__enum__ = format_gif_ApplicationExtension; $x.toString = $estr; return $x; };
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxClasses["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"] };
format_gif_Version.GIF87a = ["GIF87a",0];
format_gif_Version.GIF87a.toString = $estr;
format_gif_Version.GIF87a.__enum__ = format_gif_Version;
format_gif_Version.GIF89a = ["GIF89a",1];
format_gif_Version.GIF89a.toString = $estr;
format_gif_Version.GIF89a.__enum__ = format_gif_Version;
format_gif_Version.Unknown = function(version) { var $x = ["Unknown",2,version]; $x.__enum__ = format_gif_Version; $x.toString = $estr; return $x; };
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxClasses["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"] };
format_gif_DisposalMethod.UNSPECIFIED = ["UNSPECIFIED",0];
format_gif_DisposalMethod.UNSPECIFIED.toString = $estr;
format_gif_DisposalMethod.UNSPECIFIED.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.NO_ACTION = ["NO_ACTION",1];
format_gif_DisposalMethod.NO_ACTION.toString = $estr;
format_gif_DisposalMethod.NO_ACTION.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.FILL_BACKGROUND = ["FILL_BACKGROUND",2];
format_gif_DisposalMethod.FILL_BACKGROUND.toString = $estr;
format_gif_DisposalMethod.FILL_BACKGROUND.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.RENDER_PREVIOUS = ["RENDER_PREVIOUS",3];
format_gif_DisposalMethod.RENDER_PREVIOUS.toString = $estr;
format_gif_DisposalMethod.RENDER_PREVIOUS.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.UNDEFINED = function(index) { var $x = ["UNDEFINED",4,index]; $x.__enum__ = format_gif_DisposalMethod; $x.toString = $estr; return $x; };
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = ["format","gif","Reader"];
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 73;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 70;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b3 = this.readBlock();
			blocks.add(b3);
			if(b3 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g1 = 0;
		var _g = clearCode;
		while(_g1 < _g) {
			var i = _g1++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item & 255;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			var _g = (packed & 28) >> 2;
			switch(_g) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v & 255;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1 & 255;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2 & 255;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = ["format","gif","Tools"];
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod[1]) {
			case 2:
				var _g1 = 0;
				var _g = pixels.length;
				while(_g1 < _g) {
					var i = _g1++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g11 = 0;
				var _g2 = pixels.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2] & 255;
						bytes.b[writeCaret + 1] = ct.b[index + 1] & 255;
						bytes.b[writeCaret + 2] = ct.b[index] & 255;
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block[2];
			if(ext[1] == 0) {
				var g = ext[2];
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_mp3_SamplingRate = $hxClasses["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"] };
format_mp3_SamplingRate.SR_8000 = ["SR_8000",0];
format_mp3_SamplingRate.SR_8000.toString = $estr;
format_mp3_SamplingRate.SR_8000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_11025 = ["SR_11025",1];
format_mp3_SamplingRate.SR_11025.toString = $estr;
format_mp3_SamplingRate.SR_11025.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_12000 = ["SR_12000",2];
format_mp3_SamplingRate.SR_12000.toString = $estr;
format_mp3_SamplingRate.SR_12000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_22050 = ["SR_22050",3];
format_mp3_SamplingRate.SR_22050.toString = $estr;
format_mp3_SamplingRate.SR_22050.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_24000 = ["SR_24000",4];
format_mp3_SamplingRate.SR_24000.toString = $estr;
format_mp3_SamplingRate.SR_24000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_32000 = ["SR_32000",5];
format_mp3_SamplingRate.SR_32000.toString = $estr;
format_mp3_SamplingRate.SR_32000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_44100 = ["SR_44100",6];
format_mp3_SamplingRate.SR_44100.toString = $estr;
format_mp3_SamplingRate.SR_44100.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_48000 = ["SR_48000",7];
format_mp3_SamplingRate.SR_48000.toString = $estr;
format_mp3_SamplingRate.SR_48000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_Bad = ["SR_Bad",8];
format_mp3_SamplingRate.SR_Bad.toString = $estr;
format_mp3_SamplingRate.SR_Bad.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxClasses["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"] };
format_mp3_Bitrate.BR_8 = ["BR_8",0];
format_mp3_Bitrate.BR_8.toString = $estr;
format_mp3_Bitrate.BR_8.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_16 = ["BR_16",1];
format_mp3_Bitrate.BR_16.toString = $estr;
format_mp3_Bitrate.BR_16.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_24 = ["BR_24",2];
format_mp3_Bitrate.BR_24.toString = $estr;
format_mp3_Bitrate.BR_24.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_32 = ["BR_32",3];
format_mp3_Bitrate.BR_32.toString = $estr;
format_mp3_Bitrate.BR_32.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_40 = ["BR_40",4];
format_mp3_Bitrate.BR_40.toString = $estr;
format_mp3_Bitrate.BR_40.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_48 = ["BR_48",5];
format_mp3_Bitrate.BR_48.toString = $estr;
format_mp3_Bitrate.BR_48.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_56 = ["BR_56",6];
format_mp3_Bitrate.BR_56.toString = $estr;
format_mp3_Bitrate.BR_56.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_64 = ["BR_64",7];
format_mp3_Bitrate.BR_64.toString = $estr;
format_mp3_Bitrate.BR_64.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_80 = ["BR_80",8];
format_mp3_Bitrate.BR_80.toString = $estr;
format_mp3_Bitrate.BR_80.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_96 = ["BR_96",9];
format_mp3_Bitrate.BR_96.toString = $estr;
format_mp3_Bitrate.BR_96.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_112 = ["BR_112",10];
format_mp3_Bitrate.BR_112.toString = $estr;
format_mp3_Bitrate.BR_112.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_128 = ["BR_128",11];
format_mp3_Bitrate.BR_128.toString = $estr;
format_mp3_Bitrate.BR_128.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_144 = ["BR_144",12];
format_mp3_Bitrate.BR_144.toString = $estr;
format_mp3_Bitrate.BR_144.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_160 = ["BR_160",13];
format_mp3_Bitrate.BR_160.toString = $estr;
format_mp3_Bitrate.BR_160.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_176 = ["BR_176",14];
format_mp3_Bitrate.BR_176.toString = $estr;
format_mp3_Bitrate.BR_176.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_192 = ["BR_192",15];
format_mp3_Bitrate.BR_192.toString = $estr;
format_mp3_Bitrate.BR_192.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_224 = ["BR_224",16];
format_mp3_Bitrate.BR_224.toString = $estr;
format_mp3_Bitrate.BR_224.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_256 = ["BR_256",17];
format_mp3_Bitrate.BR_256.toString = $estr;
format_mp3_Bitrate.BR_256.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_288 = ["BR_288",18];
format_mp3_Bitrate.BR_288.toString = $estr;
format_mp3_Bitrate.BR_288.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_320 = ["BR_320",19];
format_mp3_Bitrate.BR_320.toString = $estr;
format_mp3_Bitrate.BR_320.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_352 = ["BR_352",20];
format_mp3_Bitrate.BR_352.toString = $estr;
format_mp3_Bitrate.BR_352.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_384 = ["BR_384",21];
format_mp3_Bitrate.BR_384.toString = $estr;
format_mp3_Bitrate.BR_384.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_416 = ["BR_416",22];
format_mp3_Bitrate.BR_416.toString = $estr;
format_mp3_Bitrate.BR_416.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_448 = ["BR_448",23];
format_mp3_Bitrate.BR_448.toString = $estr;
format_mp3_Bitrate.BR_448.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_Free = ["BR_Free",24];
format_mp3_Bitrate.BR_Free.toString = $estr;
format_mp3_Bitrate.BR_Free.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_Bad = ["BR_Bad",25];
format_mp3_Bitrate.BR_Bad.toString = $estr;
format_mp3_Bitrate.BR_Bad.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = ["format","mp3","MPEG"];
format_mp3_MPEG.enum2Num = function(m) {
	switch(m[1]) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr[1]) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br[1]) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = ["format","mp3","CLayer"];
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = ["format","mp3","CChannelMode"];
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = ["format","mp3","CEmphasis"];
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_MPEGVersion = $hxClasses["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"] };
format_mp3_MPEGVersion.MPEG_V1 = ["MPEG_V1",0];
format_mp3_MPEGVersion.MPEG_V1.toString = $estr;
format_mp3_MPEGVersion.MPEG_V1.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_V2 = ["MPEG_V2",1];
format_mp3_MPEGVersion.MPEG_V2.toString = $estr;
format_mp3_MPEGVersion.MPEG_V2.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_V25 = ["MPEG_V25",2];
format_mp3_MPEGVersion.MPEG_V25.toString = $estr;
format_mp3_MPEGVersion.MPEG_V25.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_Reserved = ["MPEG_Reserved",3];
format_mp3_MPEGVersion.MPEG_Reserved.toString = $estr;
format_mp3_MPEGVersion.MPEG_Reserved.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxClasses["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"] };
format_mp3_Layer.LayerReserved = ["LayerReserved",0];
format_mp3_Layer.LayerReserved.toString = $estr;
format_mp3_Layer.LayerReserved.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer3 = ["Layer3",1];
format_mp3_Layer.Layer3.toString = $estr;
format_mp3_Layer.Layer3.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer2 = ["Layer2",2];
format_mp3_Layer.Layer2.toString = $estr;
format_mp3_Layer.Layer2.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer1 = ["Layer1",3];
format_mp3_Layer.Layer1.toString = $estr;
format_mp3_Layer.Layer1.__enum__ = format_mp3_Layer;
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxClasses["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"] };
format_mp3_ChannelMode.Stereo = ["Stereo",0];
format_mp3_ChannelMode.Stereo.toString = $estr;
format_mp3_ChannelMode.Stereo.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.JointStereo = ["JointStereo",1];
format_mp3_ChannelMode.JointStereo.toString = $estr;
format_mp3_ChannelMode.JointStereo.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.DualChannel = ["DualChannel",2];
format_mp3_ChannelMode.DualChannel.toString = $estr;
format_mp3_ChannelMode.DualChannel.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.Mono = ["Mono",3];
format_mp3_ChannelMode.Mono.toString = $estr;
format_mp3_ChannelMode.Mono.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxClasses["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"] };
format_mp3_Emphasis.NoEmphasis = ["NoEmphasis",0];
format_mp3_Emphasis.NoEmphasis.toString = $estr;
format_mp3_Emphasis.NoEmphasis.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.Ms50_15 = ["Ms50_15",1];
format_mp3_Emphasis.Ms50_15.toString = $estr;
format_mp3_Emphasis.Ms50_15.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.CCIT_J17 = ["CCIT_J17",2];
format_mp3_Emphasis.CCIT_J17.toString = $estr;
format_mp3_Emphasis.CCIT_J17.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.InvalidEmphasis = ["InvalidEmphasis",3];
format_mp3_Emphasis.InvalidEmphasis.toString = $estr;
format_mp3_Emphasis.InvalidEmphasis.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxClasses["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"] };
format_mp3_FrameType.FT_MP3 = ["FT_MP3",0];
format_mp3_FrameType.FT_MP3.toString = $estr;
format_mp3_FrameType.FT_MP3.__enum__ = format_mp3_FrameType;
format_mp3_FrameType.FT_NONE = ["FT_NONE",1];
format_mp3_FrameType.FT_NONE.toString = $estr;
format_mp3_FrameType.FT_NONE.__enum__ = format_mp3_FrameType;
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = ["format","mp3","Reader"];
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( ex ) {
			var ex1 = (ex instanceof js__$Boot_HaxeError) ? ex.val : ex;
			if((ex1 instanceof haxe_io_Eof)) {
				var ex2 = ex1;
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw ex;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft[1]) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof haxe_io_Eof)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = ["format","mp3","Tools"];
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
var format_png_Color = $hxClasses["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"] };
format_png_Color.ColGrey = function(alpha) { var $x = ["ColGrey",0,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColTrue = function(alpha) { var $x = ["ColTrue",1,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColIndexed = ["ColIndexed",2];
format_png_Color.ColIndexed.toString = $estr;
format_png_Color.ColIndexed.__enum__ = format_png_Color;
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxClasses["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"] };
format_png_Chunk.CEnd = ["CEnd",0];
format_png_Chunk.CEnd.toString = $estr;
format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
format_png_Chunk.CHeader = function(h) { var $x = ["CHeader",1,h]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CData = function(b) { var $x = ["CData",2,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CPalette = function(b) { var $x = ["CPalette",3,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CUnknown = function(id,data) { var $x = ["CUnknown",4,id,data]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = ["format","png","Reader"];
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 80;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 78;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b3 = 71;
		if(this.i.readByte() != b3) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b4 = 13;
		if(this.i.readByte() != b4) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b5 = 10;
		if(this.i.readByte() != b5) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b6 = 26;
		if(this.i.readByte() != b6) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b7 = 10;
		if(this.i.readByte() != b7) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c = new haxe_crypto_Crc32();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				c.byte(HxOverrides.cca(id,i));
			}
			c.update(data,0,data.length);
			if(c.get() != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = ["format","png","Tools"];
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 1) {
			var h = c[2];
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 3) {
			var b = c[2];
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g[1]) {
	case 0:
		var alpha = _g[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head1 = d.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var t = val1;
				if(t[1] == 4) {
					if(t[2] == "tRNS") {
						var data1 = t[3];
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g21 = width;
					while(_g3 < _g21) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = data.b[r++] & 255;
					}
				} else {
					var _g31 = 0;
					var _g22 = width;
					while(_g31 < _g22) {
						var x1 = _g31++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = (v1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g32 = 0;
					var _g23 = width;
					while(_g32 < _g23) {
						var x2 = _g32++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						ca += data.b[r++];
						bgra.b[w++] = ca & 255;
					}
				} else {
					var _g33 = 0;
					var _g24 = width;
					while(_g33 < _g24) {
						var x3 = _g33++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = (cv == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g34 = 0;
					var _g25 = width;
					while(_g34 < _g25) {
						var x4 = _g34++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1] & 255;
					}
				} else {
					var _g35 = 0;
					var _g26 = width;
					while(_g35 < _g26) {
						var x5 = _g35++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = (v3 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g36 = 0;
					var _g27 = width;
					while(_g36 < _g27) {
						var x6 = _g36++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1 & 255;
					}
				} else {
					var _g37 = 0;
					var _g28 = width;
					while(_g37 < _g28) {
						var x7 = _g37++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = (cv1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g38 = 0;
					var _g29 = width;
					while(_g38 < _g29) {
						var x8 = _g38++;
						var b1 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b1 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b1;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[pos] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						var b2 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b2 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b2;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b2 : c2) + data.b[pos1] & 255;
						bgra.b[w++] = ca2 & 255;
					}
				} else {
					var _g39 = 0;
					var _g210 = width;
					while(_g39 < _g210) {
						var x9 = _g39++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b3 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b3;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b3 : c3) + data.b[pos2] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = (cv2 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g_head2 = d.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var t1 = val2;
				if(t1[1] == 4) {
					if(t1[2] == "tRNS") {
						var data2 = t1[3];
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g11 = 0;
		var _g4 = h.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g310 = 0;
					var _g211 = width1;
					while(_g310 < _g211) {
						var x10 = _g310++;
						bgra.b[w++] = data.b[r + 2] & 255;
						bgra.b[w++] = data.b[r + 1] & 255;
						bgra.b[w++] = data.b[r] & 255;
						bgra.b[w++] = data.b[r + 3] & 255;
						r += 4;
					}
				} else {
					var _g311 = 0;
					var _g212 = width1;
					while(_g311 < _g212) {
						var x11 = _g311++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr = data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g312 = 0;
					var _g213 = width1;
					while(_g312 < _g213) {
						var x12 = _g312++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g313 = 0;
					var _g214 = width1;
					while(_g313 < _g214) {
						var x13 = _g313++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g314 = 0;
					var _g215 = width1;
					while(_g314 < _g215) {
						var x14 = _g314++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5] & 255;
						++w;
						r += 4;
					}
				} else {
					var _g315 = 0;
					var _g216 = width1;
					while(_g315 < _g216) {
						var x15 = _g315++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb & 255;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg & 255;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr & 255;
						++w;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g316 = 0;
					var _g217 = width1;
					while(_g316 < _g217) {
						var x16 = _g316++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g317 = 0;
					var _g218 = width1;
					while(_g317 < _g218) {
						var x17 = _g317++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g318 = 0;
					var _g219 = width1;
					while(_g318 < _g219) {
						var x18 = _g318++;
						var b4 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b4 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b4;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b5 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b5 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b5;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b6 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b6;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b7 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b7;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b7 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g319 = 0;
					var _g220 = width1;
					while(_g319 < _g220) {
						var x19 = _g319++;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b8 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b8;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b8 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b9 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b9;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b9 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b10 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b10;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b10 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g_head3 = d.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var t2 = val3;
			if(t2[1] == 4) {
				if(t2[2] == "tRNS") {
					var data3 = t2[3];
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rline = h.width * h.colbits >> 3;
		var _g12 = 0;
		var _g5 = h.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g320 = 0;
				var _g221 = width2;
				while(_g320 < _g221) {
					var x20 = _g320++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g321 = 0;
				var _g222 = width2;
				while(_g321 < _g222) {
					var x21 = _g321++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9] & 255;
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g322 = 0;
				var _g223 = width2;
				while(_g322 < _g223) {
					var x22 = _g322++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12 & 255;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g323 = 0;
				var _g224 = width2;
				while(_g323 < _g224) {
					var x23 = _g323++;
					var v7 = data.b[r];
					var b11 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - 1];
					var k10 = c13 + b11 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b11;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b11 : c14) + v7 & 255;
					data.b[r++] = c13 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g13 = 0;
			var _g6 = h.height;
			while(_g13 < _g6) {
				var y3 = _g13++;
				++r1;
				var _g324 = 0;
				var _g225 = h.width;
				while(_g324 < _g225) {
					var x24 = _g324++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c15 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c15 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c15] : 255) & 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g14 = 0;
			var _g7 = h.height;
			while(_g14 < _g7) {
				var y4 = _g14++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var _g325 = 0;
				var _g226 = h.width;
				while(_g325 < _g226) {
					var x25 = _g325++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c16 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c16 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c16] : 255) & 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = ["format","tools","BitsInput"];
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k1 = this.i.readByte();
		if(this.nbits >= 24) {
			if(n >= 31) {
				throw new js__$Boot_HaxeError("Bits error");
			}
			var c1 = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c1 | k1 << c1;
			this.bits = k1;
			this.nbits = c1;
			return d;
		}
		this.bits = this.bits << 8 | k1;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = ["format","tools","Inflate"];
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxClasses["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"] };
format_wav_WAVEFormat.WF_PCM = ["WF_PCM",0];
format_wav_WAVEFormat.WF_PCM.toString = $estr;
format_wav_WAVEFormat.WF_PCM.__enum__ = format_wav_WAVEFormat;
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = ["format","wav","Reader"];
format_wav_Reader.prototype = {
	read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw new js__$Boot_HaxeError("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw new js__$Boot_HaxeError("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw new js__$Boot_HaxeError("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format1;
		var _g = this.i.readUInt16();
		switch(_g) {
		case 1:case 3:
			format1 = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw new js__$Boot_HaxeError("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw new js__$Boot_HaxeError("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data = this.i.readAll();
		if(data.length > datalen) {
			data = data.sub(0,datalen);
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data};
	}
	,__class__: format_wav_Reader
};
var h2d_Drawable = function(parent) {
	h2d_Sprite.call(this,parent);
	this.blendMode = h2d_BlendMode.Alpha;
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = ["h2d","Drawable"];
h2d_Drawable.__super__ = h2d_Sprite;
h2d_Drawable.prototype = $extend(h2d_Sprite.prototype,{
	set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,get_colorMatrix: function() {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	,set_colorMatrix: function(m) {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d_shader_ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = (s1 instanceof stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = tile;
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = ["h2d","Bitmap"];
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
		}
	}
	,draw: function(ctx) {
		this.emitTile(ctx,this.tile);
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxClasses["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","SoftAdd","Multiply","Erase","Screen"] };
h2d_BlendMode.None = ["None",0];
h2d_BlendMode.None.toString = $estr;
h2d_BlendMode.None.__enum__ = h2d_BlendMode;
h2d_BlendMode.Alpha = ["Alpha",1];
h2d_BlendMode.Alpha.toString = $estr;
h2d_BlendMode.Alpha.__enum__ = h2d_BlendMode;
h2d_BlendMode.Add = ["Add",2];
h2d_BlendMode.Add.toString = $estr;
h2d_BlendMode.Add.__enum__ = h2d_BlendMode;
h2d_BlendMode.SoftAdd = ["SoftAdd",3];
h2d_BlendMode.SoftAdd.toString = $estr;
h2d_BlendMode.SoftAdd.__enum__ = h2d_BlendMode;
h2d_BlendMode.Multiply = ["Multiply",4];
h2d_BlendMode.Multiply.toString = $estr;
h2d_BlendMode.Multiply.__enum__ = h2d_BlendMode;
h2d_BlendMode.Erase = ["Erase",5];
h2d_BlendMode.Erase.toString = $estr;
h2d_BlendMode.Erase.__enum__ = h2d_BlendMode;
h2d_BlendMode.Screen = ["Screen",6];
h2d_BlendMode.Screen.toString = $estr;
h2d_BlendMode.Screen.__enum__ = h2d_BlendMode;
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen];
var h2d_CachedBitmap = function(parent,width,height) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	h2d_Drawable.call(this,parent);
	this.set_width(width);
	this.set_height(height);
};
$hxClasses["h2d.CachedBitmap"] = h2d_CachedBitmap;
h2d_CachedBitmap.__name__ = ["h2d","CachedBitmap"];
h2d_CachedBitmap.__super__ = h2d_Drawable;
h2d_CachedBitmap.prototype = $extend(h2d_Drawable.prototype,{
	clean: function() {
		if(this.tile != null) {
			this.tile.dispose();
			this.tile = null;
		}
	}
	,onRemove: function() {
		this.clean();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,set_width: function(w) {
		this.clean();
		this.width = w;
		return w;
	}
	,set_height: function(h) {
		this.clean();
		this.height = h;
		return h;
	}
	,getTile: function(ctx) {
		if(this.tile == null) {
			var scene = ctx == null ? this.getScene() : ctx.scene;
			if(scene == null) {
				return null;
			}
			var tw = this.width < 0 ? scene.width : this.width;
			var th = this.height < 0 ? scene.height : this.height;
			if(tw != 0 && th != 0) {
				var tex = new h3d_mat_Texture(tw,th,[h3d_mat_TextureFlags.Target]);
				this.renderDone = false;
				this.tile = h2d_Tile.fromTexture(tex);
			}
		}
		return this.tile;
	}
	,syncPosRec: function(s) {
		s.calcAbsPos();
		s.posChanged = true;
		var _g = 0;
		var _g1 = s.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.syncPosRec(c);
		}
	}
	,draw: function(ctx) {
		if(this.tile != null) {
			this.emitTile(ctx,this.tile);
		}
	}
	,drawRec: function(ctx) {
		var scene = ctx.scene;
		if(this.tile != null && (this.width < 0 && scene.width != this.tile.width || this.height < 0 && scene.height != this.tile.height)) {
			this.clean();
		}
		var tile = this.getTile(ctx);
		if((!this.freezed || !this.renderDone) && tile != null) {
			var oldA = this.matA;
			var oldB = this.matB;
			var oldC = this.matC;
			var oldD = this.matD;
			var oldX = this.absX;
			var oldY = this.absY;
			this.matA = 1;
			this.matB = 0;
			this.matC = 0;
			this.matD = 1;
			this.absX = 0;
			this.absY = 0;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.syncPosRec(c);
			}
			ctx.pushTarget(tile.innerTex);
			ctx.engine.clear(0);
			var old = ctx.globalAlpha;
			ctx.globalAlpha = 1;
			var _g2 = 0;
			var _g11 = this.children;
			while(_g2 < _g11.length) {
				var c1 = _g11[_g2];
				++_g2;
				c1.drawRec(ctx);
			}
			ctx.globalAlpha = old;
			ctx.popTarget();
			this.matA = oldA;
			this.matB = oldB;
			this.matC = oldC;
			this.matD = oldD;
			this.absX = oldX;
			this.absY = oldY;
			this.renderDone = true;
		}
		this.draw(ctx);
	}
	,__class__: h2d_CachedBitmap
});
var h2d_ConsoleArg = $hxClasses["h2d.ConsoleArg"] = { __ename__ : true, __constructs__ : ["AInt","AFloat","AString","ABool","AEnum"] };
h2d_ConsoleArg.AInt = ["AInt",0];
h2d_ConsoleArg.AInt.toString = $estr;
h2d_ConsoleArg.AInt.__enum__ = h2d_ConsoleArg;
h2d_ConsoleArg.AFloat = ["AFloat",1];
h2d_ConsoleArg.AFloat.toString = $estr;
h2d_ConsoleArg.AFloat.__enum__ = h2d_ConsoleArg;
h2d_ConsoleArg.AString = ["AString",2];
h2d_ConsoleArg.AString.toString = $estr;
h2d_ConsoleArg.AString.__enum__ = h2d_ConsoleArg;
h2d_ConsoleArg.ABool = ["ABool",3];
h2d_ConsoleArg.ABool.toString = $estr;
h2d_ConsoleArg.ABool.__enum__ = h2d_ConsoleArg;
h2d_ConsoleArg.AEnum = function(values) { var $x = ["AEnum",4,values]; $x.__enum__ = h2d_ConsoleArg; $x.toString = $estr; return $x; };
h2d_ConsoleArg.__empty_constructs__ = [h2d_ConsoleArg.AInt,h2d_ConsoleArg.AFloat,h2d_ConsoleArg.AString,h2d_ConsoleArg.ABool];
var h2d_FlowAlign = $hxClasses["h2d.FlowAlign"] = { __ename__ : true, __constructs__ : ["Top","Left","Right","Middle","Bottom"] };
h2d_FlowAlign.Top = ["Top",0];
h2d_FlowAlign.Top.toString = $estr;
h2d_FlowAlign.Top.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Left = ["Left",1];
h2d_FlowAlign.Left.toString = $estr;
h2d_FlowAlign.Left.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Right = ["Right",2];
h2d_FlowAlign.Right.toString = $estr;
h2d_FlowAlign.Right.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Middle = ["Middle",3];
h2d_FlowAlign.Middle.toString = $estr;
h2d_FlowAlign.Middle.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Bottom = ["Bottom",4];
h2d_FlowAlign.Bottom.toString = $estr;
h2d_FlowAlign.Bottom.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowProperties = function(elt) {
	this.constraint = true;
	this.calculatedHeight = 0;
	this.calculatedWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = ["h2d","FlowProperties"];
h2d_FlowProperties.prototype = {
	set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
		}
		return this.isAbsolute = a;
	}
	,__class__: h2d_FlowProperties
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = ["h2d","col","Bounds"];
h2d_col_Bounds.prototype = {
	__class__: h2d_col_Bounds
};
var h2d_Flow = function(parent) {
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.multiline = false;
	this.isInline = true;
	this.borderHeight = 0;
	this.borderWidth = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = false;
	this.needReflow = true;
	h2d_Sprite.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = ["h2d","Flow"];
h2d_Flow.__super__ = h2d_Sprite;
h2d_Flow.prototype = $extend(h2d_Sprite.prototype,{
	getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,get_outerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth) - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight) - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		if(this.getProperties(s).isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,addSpacing: function(v) {
		var last = this.properties.length - 1;
		while(last >= 0 && this.properties[last].isAbsolute) --last;
		if(this.isVertical) {
			if(last >= 0) {
				this.properties[last].paddingBottom += v;
			} else {
				var _g = this;
				_g.set_paddingTop(_g.paddingTop + v);
			}
		} else if(last >= 0) {
			this.properties[last].paddingRight += v;
		} else {
			var _g1 = this;
			_g1.set_paddingLeft(_g1.paddingLeft + v);
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		var fp = this.getProperties(s);
		h2d_Sprite.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Sprite.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,sync: function(ctx) {
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Sprite.prototype.sync.call(this,ctx);
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			tmp = a > b ? b : a;
		}
		this.realMaxWidth = tmp;
		var tmp1;
		if(this.maxHeight == null) {
			tmp1 = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp1 = this.maxHeight;
		} else {
			var a1 = this.maxHeight;
			var b1 = this.constraintHeight;
			tmp1 = a1 > b1 ? b1 : a1;
		}
		this.realMaxHeight = tmp1;
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				this.interactive = new h2d_Interactive(0,0,this);
				this.interactive.set_cursor(hxd_Cursor.Default);
				this.properties[this.properties.length - 1].set_isAbsolute(true);
				if(!this.needReflow) {
					this.interactive.width = this.calculatedWidth;
					this.interactive.height = this.calculatedHeight;
				}
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderWidth,this.borderHeight);
				this.addChildAt(background,0);
				this.properties[0].set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth));
					background.set_height(Math.ceil(this.calculatedHeight));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : Math.floor(this.realMaxWidth);
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : Math.floor(this.realMaxHeight);
		var maxWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
		var maxHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
		var cw;
		var ch;
		if(!this.isVertical) {
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = this.paddingLeft + this.borderWidth;
			var x = startX;
			var y = this.paddingTop + this.borderHeight;
			cw = x;
			var maxLineHeight = 0;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.minHeight != null && !this.multiline ? this.minHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2) : 0;
			var tmpBounds = h2d_Flow.tmpBounds;
			var lastIndex = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var p = this.properties[i];
				if(p.isAbsolute) {
					continue;
				}
				var c = this.children[i];
				if(!c.visible) {
					continue;
				}
				c.constraintSize(isConstraintWidth && p.constraint ? (maxWidth - (p.paddingLeft + p.paddingRight)) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxHeight - (p.paddingTop + p.paddingBottom)) / Math.abs(c.scaleX) : -1);
				var b = c.getSize(tmpBounds);
				var br = false;
				p.calculatedWidth = Math.ceil(b.xMax) + p.paddingLeft + p.paddingRight;
				p.calculatedHeight = Math.ceil(b.yMax) + p.paddingTop + p.paddingBottom;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(this.multiline && x + p.calculatedWidth > maxWidth && x > startX) {
					br = true;
					if(maxLineHeight < minLineHeight) {
						maxLineHeight = minLineHeight;
					} else if(_gthis.overflow && minLineHeight != 0) {
						maxLineHeight = minLineHeight;
					}
					var _g11 = lastIndex;
					var _g2 = i;
					while(_g11 < _g2) {
						var i1 = _g11++;
						var p1 = _gthis.properties[i1];
						if(p1.isAbsolute) {
							continue;
						}
						var c1 = _gthis.children[i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
						c1.posChanged = true;
						c1.y = y + p1.offsetY + p1.paddingTop;
						switch(a[1]) {
						case 3:
							var _g21 = c1;
							_g21.posChanged = true;
							_g21.y += (maxLineHeight - p1.calculatedHeight) * 0.5 | 0;
							break;
						case 4:
							var _g22 = c1;
							_g22.posChanged = true;
							_g22.y += maxLineHeight - (p1.calculatedHeight | 0);
							break;
						default:
						}
					}
					lastIndex = i;
					y += maxLineHeight + this.verticalSpacing;
					maxLineHeight = 0;
					x = startX;
				}
				p.isBreak = br;
				x += p.calculatedWidth;
				if(x > cw) {
					cw = x;
				}
				x += this.horizontalSpacing;
				if(p.calculatedHeight > maxLineHeight) {
					maxLineHeight = p.calculatedHeight;
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var _g12 = lastIndex;
			var _g3 = maxIndex;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var p2 = _gthis.properties[i2];
				if(p2.isAbsolute) {
					continue;
				}
				var c2 = _gthis.children[i2];
				if(!c2.visible) {
					continue;
				}
				var a1 = p2.verticalAlign != null ? p2.verticalAlign : valign;
				c2.posChanged = true;
				c2.y = y + p2.offsetY + p2.paddingTop;
				switch(a1[1]) {
				case 3:
					var _g23 = c2;
					_g23.posChanged = true;
					_g23.y += (maxLineHeight - p2.calculatedHeight) * 0.5 | 0;
					break;
				case 4:
					var _g24 = c2;
					_g24.posChanged = true;
					_g24.y += maxLineHeight - (p2.calculatedHeight | 0);
					break;
				default:
				}
			}
			lastIndex = maxIndex;
			cw += this.paddingRight + this.borderWidth;
			ch = y + maxLineHeight + this.paddingBottom + this.borderHeight;
			if(this.minWidth != null && cw < this.minWidth) {
				cw = this.minWidth;
			}
			var endX = cw - (this.paddingRight + this.borderWidth);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var _g13 = 0;
			var _g4 = this.children.length;
			while(_g13 < _g4) {
				var i3 = _g13++;
				var p3 = this.properties[i3];
				if(p3.isAbsolute || !this.children[i3].visible) {
					continue;
				}
				if(p3.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p3.horizontalAlign == null ? halign : p3.horizontalAlign;
				switch(align[1]) {
				case 2:
					if(midSpace != 0) {
						xmin += midSpace;
						midSpace = 0;
					}
					xmax -= p3.calculatedWidth;
					px = xmax;
					xmax -= this.horizontalSpacing;
					break;
				case 3:
					if(midSpace == 0) {
						var remSize = p3.calculatedWidth;
						var _g31 = i3 + 1;
						var _g25 = this.children.length;
						while(_g31 < _g25) {
							var j = _g31++;
							var p4 = this.properties[j];
							if(p4.isAbsolute || !this.children[j].visible) {
								continue;
							}
							if(p4.isBreak) {
								break;
							}
							remSize += this.horizontalSpacing + p4.calculatedWidth;
						}
						midSpace = (xmax - xmin - remSize) * 0.5 | 0;
						xmin += midSpace;
					}
					px = xmin;
					xmin += p3.calculatedWidth + this.horizontalSpacing;
					break;
				default:
					if(midSpace != 0) {
						xmin += midSpace;
						midSpace = 0;
					}
					px = xmin;
					xmin += p3.calculatedWidth + this.horizontalSpacing;
				}
				var _this = this.children[i3];
				_this.posChanged = true;
				_this.x = px + p3.offsetX + p3.paddingLeft;
			}
		} else {
			var halign1 = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign1 = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = this.paddingTop + this.borderHeight;
			var y1 = startY;
			var x1 = this.paddingLeft + this.borderWidth;
			ch = y1;
			var maxColWidth = 0;
			var minColWidth = this.colWidth != null ? this.colWidth : this.minWidth != null && !this.multiline ? this.minWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2) : 0;
			var tmpBounds1 = h2d_Flow.tmpBounds;
			var lastIndex1 = 0;
			var _g14 = 0;
			var _g5 = this.children.length;
			while(_g14 < _g5) {
				var i4 = _g14++;
				var p5 = this.properties[i4];
				if(p5.isAbsolute) {
					continue;
				}
				var c3 = this.children[i4];
				if(!c3.visible) {
					continue;
				}
				c3.constraintSize(isConstraintWidth && p5.constraint ? (maxWidth - (p5.paddingLeft + p5.paddingRight)) / Math.abs(c3.scaleX) : -1,isConstraintHeight && p5.constraint ? (maxHeight - (p5.paddingTop + p5.paddingBottom)) / Math.abs(c3.scaleY) : -1);
				var b1 = c3.getSize(tmpBounds1);
				var br1 = false;
				p5.calculatedWidth = Math.ceil(b1.xMax) + p5.paddingLeft + p5.paddingRight;
				p5.calculatedHeight = Math.ceil(b1.yMax) + p5.paddingTop + p5.paddingBottom;
				if(p5.minWidth != null && p5.calculatedWidth < p5.minWidth) {
					p5.calculatedWidth = p5.minWidth;
				}
				if(p5.minHeight != null && p5.calculatedHeight < p5.minHeight) {
					p5.calculatedHeight = p5.minHeight;
				}
				if(this.multiline && y1 + p5.calculatedHeight > maxHeight && y1 > startY) {
					br1 = true;
					if(maxColWidth < minColWidth) {
						maxColWidth = minColWidth;
					} else if(_gthis.overflow && minColWidth != 0) {
						maxColWidth = minColWidth;
					}
					var _g15 = lastIndex1;
					var _g6 = i4;
					while(_g15 < _g6) {
						var i5 = _g15++;
						var p6 = _gthis.properties[i5];
						if(p6.isAbsolute) {
							continue;
						}
						var c4 = _gthis.children[i5];
						if(!c4.visible) {
							continue;
						}
						var a2 = p6.horizontalAlign != null ? p6.horizontalAlign : halign1;
						c4.posChanged = true;
						c4.x = x1 + p6.offsetX + p6.paddingLeft;
						switch(a2[1]) {
						case 2:
							var _g26 = c4;
							_g26.posChanged = true;
							_g26.x += maxColWidth - p6.calculatedWidth;
							break;
						case 3:
							var _g27 = c4;
							_g27.posChanged = true;
							_g27.x += (maxColWidth - p6.calculatedWidth) * 0.5 | 0;
							break;
						default:
						}
					}
					lastIndex1 = i4;
					x1 += maxColWidth + this.horizontalSpacing;
					maxColWidth = 0;
					y1 = startY;
				}
				p5.isBreak = br1;
				c3.posChanged = true;
				c3.y = y1 + p5.offsetY + p5.paddingTop;
				y1 += p5.calculatedHeight;
				if(y1 > ch) {
					ch = y1;
				}
				y1 += this.verticalSpacing;
				if(p5.calculatedWidth > maxColWidth) {
					maxColWidth = p5.calculatedWidth;
				}
			}
			var maxIndex1 = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var _g16 = lastIndex1;
			var _g7 = maxIndex1;
			while(_g16 < _g7) {
				var i6 = _g16++;
				var p7 = _gthis.properties[i6];
				if(p7.isAbsolute) {
					continue;
				}
				var c5 = _gthis.children[i6];
				if(!c5.visible) {
					continue;
				}
				var a3 = p7.horizontalAlign != null ? p7.horizontalAlign : halign1;
				c5.posChanged = true;
				c5.x = x1 + p7.offsetX + p7.paddingLeft;
				switch(a3[1]) {
				case 2:
					var _g28 = c5;
					_g28.posChanged = true;
					_g28.x += maxColWidth - p7.calculatedWidth;
					break;
				case 3:
					var _g29 = c5;
					_g29.posChanged = true;
					_g29.x += (maxColWidth - p7.calculatedWidth) * 0.5 | 0;
					break;
				default:
				}
			}
			lastIndex1 = maxIndex1;
			ch += this.paddingBottom + this.borderHeight;
			cw = x1 + maxColWidth + this.paddingRight + this.borderWidth;
			if(this.minHeight != null && ch < this.minHeight) {
				ch = this.minHeight;
			}
			var endY = ch - (this.paddingBottom + this.borderHeight);
			var ymin = startY;
			var ymax = endY;
			var midSpace1 = 0;
			var _g17 = 0;
			var _g8 = this.children.length;
			while(_g17 < _g8) {
				var i7 = _g17++;
				var p8 = this.properties[i7];
				if(p8.isAbsolute || !this.children[i7].visible) {
					continue;
				}
				if(p8.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace1 = 0;
				}
				var py;
				var align1 = p8.verticalAlign == null ? valign1 : p8.verticalAlign;
				switch(align1[1]) {
				case 3:
					if(midSpace1 == 0) {
						var remSize1 = p8.calculatedHeight;
						var _g32 = i7 + 1;
						var _g210 = this.children.length;
						while(_g32 < _g210) {
							var j1 = _g32++;
							var p9 = this.properties[j1];
							if(p9.isAbsolute || !this.children[j1].visible) {
								continue;
							}
							if(p9.isBreak) {
								break;
							}
							remSize1 += this.verticalSpacing + p9.calculatedHeight;
						}
						midSpace1 = (ymax - ymin - remSize1) * 0.5 | 0;
						ymin += midSpace1;
					}
					py = ymin;
					ymin += p8.calculatedHeight + this.verticalSpacing;
					break;
				case 4:
					if(midSpace1 != 0) {
						ymin += midSpace1;
						midSpace1 = 0;
					}
					ymax -= p8.calculatedHeight;
					py = ymax;
					ymax -= this.verticalSpacing;
					break;
				default:
					if(midSpace1 != 0) {
						ymin += midSpace1;
						midSpace1 = 0;
					}
					py = ymin;
					ymin += p8.calculatedHeight + this.verticalSpacing;
				}
				var _this1 = this.children[i7];
				_this1.posChanged = true;
				_this1.y = py + p8.offsetY + p8.paddingTop;
			}
		}
		if(this.minWidth != null && cw < this.minWidth) {
			cw = this.minWidth;
		}
		if(this.minHeight != null && ch < this.minHeight) {
			ch = this.minHeight;
		}
		if(this.overflow) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw));
			this.background.set_height(Math.ceil(ch));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		this.set_needReflow(false);
		if(this.debug) {
			this.debugGraphics.clear();
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(this.paddingLeft != 0 || this.paddingRight != 0 || this.paddingTop != 0 || this.paddingBottom != 0 || this.borderWidth != 0 || this.borderHeight != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(this.paddingLeft + this.borderWidth,this.paddingTop + this.borderHeight,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g18 = 0;
			var _g9 = this.children.length;
			while(_g18 < _g9) {
				var i8 = _g18++;
				var p10 = this.properties[i8];
				var c6 = this.children[i8];
				if(p10.isAbsolute || !c6.visible) {
					continue;
				}
				this.debugGraphics.drawRect(c6.x,c6.y,p10.calculatedWidth,p10.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = ["h2d","Kerning"];
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = ["h2d","FontChar"];
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_Font = function(name,size) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = ["h2d","Font"];
h2d_Font.prototype = {
	hasChar: function(code) {
		return this.glyphs.h[code] != null;
	}
	,__class__: h2d_Font
};
var h2d__$Graphics_GPoint = function(x,y,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["h2d._Graphics.GPoint"] = h2d__$Graphics_GPoint;
h2d__$Graphics_GPoint.__name__ = ["h2d","_Graphics","GPoint"];
h2d__$Graphics_GPoint.prototype = {
	__class__: h2d__$Graphics_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = ["hxd","impl","_Serializable","NoSerializeSupport"];
var h3d_prim_Primitive = function() { };
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = ["h3d","prim","Primitive"];
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads[1]) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)).split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	this.buffers = [];
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = ["h2d","_Graphics","GraphicsContent"];
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = ["h2d","Graphics"];
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g1 = 0;
		var _g = points.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h2d__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h2d__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					this.content.index.push(this.pindex);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext);
					this.content.index.push(pnext + 1);
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this2 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this2.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this2.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this2.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this2.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this2.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this2.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this2.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this2.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					var _this3 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this3.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this3.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this3.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this3.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this3.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this3.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this3.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this3.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					var _this4 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this4.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this4.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this4.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this4.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this4.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this4.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this4.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this4.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					this.content.index.push(this.pindex);
					this.content.index.push(pnext1);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(pnext1);
					this.content.index.push(pnext1 + 1);
				} else {
					var _this5 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this5.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this5.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this5.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this5.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this5.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this5.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this5.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this5.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					var _this6 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this6.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this6.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this6.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this6.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this6.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this6.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this6.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this6.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					var _this7 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this7.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this7.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this7.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this7.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this7.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this7.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this7.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this7.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext1);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext1);
					this.content.index.push(pnext1 + 1);
				}
				this.content.index.push(this.pindex);
				this.content.index.push(this.pindex + 1);
				this.content.index.push(this.pindex + 2);
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g1 = 1;
			var _g = pts.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				this.content.index.push(i0);
				this.content.index.push(i0 + i);
				this.content.index.push(i0 + i + 1);
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d__Graphics_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				this.content.index.push(i1 + i0);
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x2 = x + w;
		var y1 = y + h;
		this.addVertex(x2,y1,this.curR,this.curG,this.curB,this.curA,x2 * this.ma + y1 * this.mc + this.mx,x2 * this.mb + y1 * this.md + this.my);
		var y2 = y + h;
		this.addVertex(x,y2,this.curR,this.curG,this.curB,this.curA,x * this.ma + y2 * this.mc + this.mx,x * this.mb + y2 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		this.flush();
	}
	,drawCircle: function(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.2831853071795862 / nsegments;
		var _g1 = 0;
		var _g = nsegments + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i * angle;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				var newSize1 = this2.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(this2.array);
				this2.array = newArray1;
			}
			this2.array[this2.pos++] = y;
			var this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				var newSize2 = this3.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(this3.array);
				this3.array = newArray2;
			}
			this3.array[this3.pos++] = u;
			var this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				var newSize3 = this4.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(this4.array);
				this4.array = newArray3;
			}
			this4.array[this4.pos++] = v;
			var this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				var newSize4 = this5.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(this5.array);
				this5.array = newArray4;
			}
			this5.array[this5.pos++] = r;
			var this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				var newSize5 = this6.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(this6.array);
				this6.array = newArray5;
			}
			this6.array[this6.pos++] = g;
			var this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				var newSize6 = this7.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(this7.array);
				this7.array = newArray6;
			}
			this7.array[this7.pos++] = b;
			var this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				var newSize7 = this8.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(this8.array);
				this8.array = newArray7;
			}
			this8.array[this8.pos++] = a;
		}
		this.tmpPoints.push(new h2d__$Graphics_GPoint(x,y,this.lineR,this.lineG,this.lineB,this.lineA));
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,__class__: h2d_Graphics
});
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = ["h2d","Text"];
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			_this1.x = oldR;
			_this1.y = oldG;
			_this1.z = oldB;
			_this1.w = oldA;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.rebuild();
		return t1;
	}
	,rebuild: function() {
		this.calcDone = false;
		if(this.allocated && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,calcTextWidth: function(text) {
		if(this.calcDone) {
			var ow = this.calcWidth;
			var oh = this.calcHeight;
			var osh = this.calcSizeHeight;
			var ox = this.calcXMin;
			var oy = this.calcYMin;
			this.initGlyphs(text,false);
			var w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	,splitText: function(text,leftMargin,afterData) {
		if(afterData == null) {
			afterData = 0;
		}
		if(leftMargin == null) {
			leftMargin = 0;
		}
		if(this.realMaxWidth < 0) {
			return text;
		}
		var lines = [];
		var rest = text;
		var restPos = 0;
		var x = leftMargin;
		var prevChar = -1;
		var _g1 = 0;
		var _g = text.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cc = HxOverrides.cca(text,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = _this.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(this.font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > this.realMaxWidth) {
					lines.push("");
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= this.realMaxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var _this1 = this.font;
					var c1 = _this1.glyphs.h[cc1];
					if(c1 == null) {
						c1 = _this1.charset.resolveChar(cc1,_this1.glyphs);
						if(c1 == null) {
							c1 = _this1.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(this.font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > this.realMaxWidth || !breakFound && size + afterData > this.realMaxWidth) {
					newline = true;
					if(this.font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > this.realMaxWidth) {
				lines.push("");
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0;
		var y = 0;
		var xMax = 0;
		var xMin = 0;
		var prevChar = -1;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align[1]) {
		case 1:case 2:case 3:case 4:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? this.calcWidth : this.realMaxWidth < 0 ? 0 : this.realMaxWidth | 0;
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 1 : 0;
			var _g1 = 0;
			var _g = lines.length;
			while(_g1 < _g) {
				var i = _g1++;
				lines[i] = max - lines[i] >> k;
			}
			x = lines.shift();
			xMin = x;
			break;
		default:
		}
		var dl = this.font.lineHeight + this.lineSpacing;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var yMin = 0;
		var t = this.splitText(text);
		var _g11 = 0;
		var _g2 = t.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(e != null) {
				if(rebuild) {
					var _this1 = this.glyphs;
					_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
				}
				if(y == 0 && e.t.dy < yMin) {
					yMin = e.t.dy;
				}
				x += esize + this.letterSpacing;
			}
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				if(calcLines) {
					lines.push(x);
				}
				switch(align[1]) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines.shift();
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(calcLines) {
			lines.push(x);
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,get_textHeight: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.realMaxWidth >= 0 ? 0 : this.calcXMin;
			y = this.calcYMin;
			w = this.realMaxWidth >= 0 ? this.realMaxWidth : this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_HtmlText = function(font,parent) {
	this.elements = [];
	h2d_Text.call(this,font,parent);
};
$hxClasses["h2d.HtmlText"] = h2d_HtmlText;
h2d_HtmlText.__name__ = ["h2d","HtmlText"];
h2d_HtmlText.__super__ = h2d_Text;
h2d_HtmlText.prototype = $extend(h2d_Text.prototype,{
	draw: function(ctx) {
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			if(this.dropMatrix == null) {
				this.dropMatrix = new h3d_shader_ColorMatrix();
			}
			this.addShader(this.dropMatrix);
			var m = this.dropMatrix.matrix__;
			m.zero();
			m._41 = (this.dropShadow.color >> 16 & 255) / 255;
			m._42 = (this.dropShadow.color >> 8 & 255) / 255;
			m._43 = (this.dropShadow.color & 255) / 255;
			m._44 = this.dropShadow.alpha;
			this.glyphs.drawWith(ctx,this);
			this.removeShader(this.dropMatrix);
			this.absX = oldX;
			this.absY = oldY;
		} else {
			this.dropMatrix = null;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,loadImage: function(url) {
		return null;
	}
	,loadFont: function(name) {
		return this.font;
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
			this.elements = [];
		}
		this.glyphs.setDefaultColor(this.textColor);
		this.xPos = 0;
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc;
		try {
			doc = Xml.parse(text);
		} catch( e1 ) {
			throw new js__$Boot_HaxeError("Could not parse " + text + " (" + Std.string((e1 instanceof js__$Boot_HaxeError) ? e1.val : e1) + ")");
		}
		var sizes = [];
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + doc.nodeType);
		}
		var e2 = HxOverrides.iter(doc.children);
		while(e2.hasNext()) {
			var e3 = e2.next();
			this.buildSizes(e3,sizes);
		}
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + doc.nodeType);
		}
		var e4 = HxOverrides.iter(doc.children);
		while(e4.hasNext()) {
			var e5 = e4.next();
			this.addNode(e5,this.font,rebuild,sizes);
		}
		var x = this.xPos;
		var y = this.yPos;
		this.calcWidth = x > this.xMax ? x : this.xMax;
		this.calcHeight = y > 0 && x == 0 ? y - this.lineSpacing : y + this.font.lineHeight;
		this.calcSizeHeight = y > 0 && x == 0 ? y + (this.font.baseLine - this.font.lineHeight - this.lineSpacing) : y + this.font.baseLine;
		this.calcDone = true;
	}
	,buildSizes: function(e,sizes) {
		if(e.nodeType == Xml.Element) {
			var len = 0;
			var prevFont = this.font;
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e.nodeType);
			}
			var _g = e.nodeName.toLowerCase();
			switch(_g) {
			case "br":
				len = -1;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					var _g1 = a1.toLowerCase();
					if(_g1 == "face") {
						this.set_font(this.loadFont(v));
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				len = (i == null ? 8 : i.width) + this.letterSpacing;
				break;
			default:
			}
			sizes.push(len);
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + e.nodeType);
			}
			var child = HxOverrides.iter(e.children);
			while(child.hasNext()) {
				var child1 = child.next();
				this.buildSizes(child1,sizes);
			}
			this.set_font(prevFont);
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + e.nodeType);
			}
			var text = this.htmlToText(e.nodeValue);
			var prevChar = -1;
			var xPos = 0;
			var _g11 = 0;
			var _g2 = text.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var cc = HxOverrides.cca(text,i1);
				var stop = false;
				var _this = this.font;
				var c = _this.glyphs.h[cc];
				if(c == null) {
					c = _this.charset.resolveChar(cc,_this.glyphs);
					if(c == null) {
						c = _this.defaultChar;
					}
				}
				var e1 = c;
				var sz = e1.getKerningOffset(prevChar) + e1.width;
				if(cc == 10 || this.font.charset.isBreakChar(cc)) {
					if(cc != 10 && !this.font.charset.isSpace(cc)) {
						xPos += sz;
					}
					sizes.push(-(xPos + 1));
					return;
				}
				xPos += sz + this.letterSpacing;
			}
			sizes.push(xPos);
		}
	}
	,htmlToText: function(t) {
		var _this_r = new RegExp("[\r\n\t ]+","g".split("u").join(""));
		t = t.replace(_this_r," ");
		t = new EReg("&([A-Za-z]+);","g").map(t,function(r) {
			var _g = r.matched(1).toLowerCase();
			switch(_g) {
			case "gt":
				return ">";
			case "lt":
				return "<";
			case "nbsp":
				return String.fromCharCode(160);
			default:
				return r.matched(0);
			}
		});
		return t;
	}
	,remainingSize: function(sizes) {
		var size = 0;
		var _g1 = this.sizePos;
		var _g = sizes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = sizes[i];
			if(s < 0) {
				size += -s - 1;
				return size;
			}
			size += s;
		}
		return size;
	}
	,addNode: function(e,font,rebuild,sizes) {
		this.sizePos++;
		if(e.nodeType == Xml.Element) {
			var prevColor = null;
			var prevGlyphs = null;
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e.nodeType);
			}
			var _g = e.nodeName.toLowerCase();
			switch(_g) {
			case "br":
				if(this.xPos > this.xMax) {
					this.xMax = this.xPos;
				}
				this.xPos = 0;
				this.yPos += font.lineHeight + this.lineSpacing;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					var _g1 = a1.toLowerCase();
					switch(_g1) {
					case "color":
						if(prevColor == null) {
							var _this = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
						}
						if(HxOverrides.cca(v,0) == 35 && v.length == 4) {
							v = "#" + v.charAt(1) + v.charAt(1) + v.charAt(2) + v.charAt(2) + v.charAt(3) + v.charAt(3);
						}
						this.glyphs.setDefaultColor(Std.parseInt("0x" + HxOverrides.substr(v,1,null)));
						break;
					case "face":
						font = this.loadFont(v);
						if(prevGlyphs == null) {
							prevGlyphs = this.glyphs;
						}
						var prev = this.glyphs;
						this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
						var _this1 = this.glyphs.curColor;
						var v1 = prev.curColor;
						_this1.x = v1.x;
						_this1.y = v1.y;
						_this1.z = v1.z;
						_this1.w = v1.w;
						this.elements.push(this.glyphs);
						break;
					case "opacity":
						if(prevColor == null) {
							var _this2 = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this2.x,_this2.y,_this2.z,_this2.w);
						}
						var _g2 = this.glyphs.curColor;
						_g2.w *= parseFloat(v);
						break;
					default:
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				if(this.realMaxWidth >= 0 && this.xPos + i.width + this.letterSpacing + this.remainingSize(sizes) > this.realMaxWidth && this.xPos > 0) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					this.xPos = 0;
					this.yPos += font.lineHeight + this.lineSpacing;
				}
				var py = this.yPos + font.baseLine - i.height;
				if(py + i.dy < this.calcYMin) {
					this.calcYMin = py + i.dy;
				}
				if(rebuild) {
					var b = new h2d_Bitmap(i,this);
					b.posChanged = true;
					b.x = this.xPos;
					b.posChanged = true;
					b.y = py;
					this.elements.push(b);
				}
				this.xPos += i.width + this.letterSpacing;
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + e.nodeType);
			}
			var child = HxOverrides.iter(e.children);
			while(child.hasNext()) {
				var child1 = child.next();
				this.addNode(child1,font,rebuild,sizes);
			}
			if(prevGlyphs != null) {
				this.glyphs = prevGlyphs;
			}
			if(prevColor != null) {
				var _this3 = this.glyphs.curColor;
				_this3.x = prevColor.x;
				_this3.y = prevColor.y;
				_this3.z = prevColor.z;
				_this3.w = prevColor.w;
			}
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + e.nodeType);
			}
			var t = this.splitText(this.htmlToText(e.nodeValue),this.xPos,this.remainingSize(sizes));
			var prevChar = -1;
			var dy = this.font.baseLine - font.baseLine;
			var _g11 = 0;
			var _g3 = t.length;
			while(_g11 < _g3) {
				var i1 = _g11++;
				var cc = HxOverrides.cca(t,i1);
				if(cc == 10) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					this.xPos = 0;
					this.yPos += font.lineHeight + this.lineSpacing;
					prevChar = -1;
					continue;
				}
				var c = font.glyphs.h[cc];
				if(c == null) {
					c = font.charset.resolveChar(cc,font.glyphs);
					if(c == null) {
						c = font.defaultChar;
					}
				}
				var e1 = c;
				this.xPos += e1.getKerningOffset(prevChar);
				if(rebuild) {
					var _this4 = this.glyphs;
					_this4.content.add(this.xPos,this.yPos + dy,_this4.curColor.x,_this4.curColor.y,_this4.curColor.z,_this4.curColor.w,e1.t);
				}
				if(this.yPos == 0 && e1.t.dy + dy < this.calcYMin) {
					this.calcYMin = e1.t.dy + dy;
				}
				this.xPos += e1.width + this.letterSpacing;
				prevChar = cc;
			}
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		this.rebuild();
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if((i instanceof h2d_Bitmap)) {
					i.set_visible(false);
				}
			}
		}
		h2d_Text.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(forSize) {
			var _g2 = 0;
			var _g11 = this.elements;
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				i1.set_visible(true);
			}
		}
	}
	,__class__: h2d_HtmlText
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = ["hxd","Interactive"];
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent) {
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = ["h2d","Interactive"];
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onParentChanged: function() {
		h2d_Drawable.prototype.onParentChanged.call(this);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = (p instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		var _g = e.kind;
		switch(_g[1]) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			if(!e.cancel && this.cursor != null) {
				hxd_System.setCursor(this.cursor);
			}
			break;
		case 4:
			this.mouseDownButton = -1;
			this.onOut(e);
			if(!e.cancel) {
				hxd_System.setCursor(hxd_Cursor.Default);
			}
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				e.kind = hxd_EventKind.ERelease;
				this.onRelease(e);
				e.kind = hxd_EventKind.EReleaseOutside;
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.isOver() && this.cursor != null) {
			hxd_System.setCursor(this.cursor);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentOver == this;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Sprite.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = ["h2d","Layers"];
h2d_Layers.__super__ = h2d_Sprite;
h2d_Layers.prototype = $extend(h2d_Sprite.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Sprite.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g1 = layer;
		var _g = this.layerCount;
		while(_g1 < _g) {
			var i = _g1++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				break;
			}
		}
	}
	,over: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g5 = i;
						var _g4 = l - 1;
						while(_g5 < _g4) {
							var p = _g5++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						break;
					}
				}
				break;
			}
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	h2d_Sprite.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = ["h2d","Mask"];
h2d_Mask.__super__ = h2d_Sprite;
h2d_Mask.prototype = $extend(h2d_Sprite.prototype,{
	onParentChanged: function() {
		h2d_Sprite.prototype.onParentChanged.call(this);
		this.updateMask();
	}
	,onAdd: function() {
		h2d_Sprite.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = (p instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX;
		var y1 = this.absY;
		var x2 = this.width * this.matA + this.height * this.matC + this.absX;
		var y2 = this.width * this.matB + this.height * this.matD + this.absY;
		var tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Sprite.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Sprite.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = ["h3d","impl","RenderContext"];
h3d_impl_RenderContext.prototype = {
	__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.currentBlend = h2d_BlendMode.Alpha;
	this.pass.setBlendMode(this.currentBlend);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = ["h2d","RenderContext"];
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		_this1.x = 0.5 / this.engine.width;
		_this1.y = 0.5 / this.engine.height;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		_this2.x = -this.scene.width * 0.5;
		_this2.y = -this.scene.height * 0.5;
		_this2.z = 2 / this.scene.width;
		_this2.w = -2 / this.scene.height;
		var _this3 = this.baseShader.filterMatrixA__;
		_this3.x = 1;
		_this3.y = 0;
		_this3.z = 0;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		_this4.x = 0;
		_this4.y = 1;
		_this4.z = 0;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		_this.x = 0.5 / (t == null ? this.engine.width : t.width);
		_this.y = 0.5 / (t == null ? this.engine.height : t.height);
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		_this1.x = -width * 0.5 - startX;
		_this1.y = -height * 0.5 - startY;
		_this1.z = 2 / width;
		_this1.w = -2 / height;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t = tinf == null ? null : tinf.t;
			var startX = tinf == null ? 0 : tinf.x;
			var startY = tinf == null ? 0 : tinf.y;
			var width = tinf == null ? this.scene.width : tinf.w;
			var height = tinf == null ? this.scene.height : tinf.h;
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			_this.x = 0.5 / (t == null ? this.engine.width : t.width);
			_this.y = 0.5 / (t == null ? this.engine.height : t.height);
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			_this1.x = -width * 0.5 - startX;
			_this1.y = -height * 0.5 - startY;
			_this1.z = 2 / width;
			_this1.w = -2 / height;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width / this.scene.width;
		var scaleY = this.engine.height / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX) * scaleX + 1e-10 | 0,(y - this.curY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			_this.x = 1;
			_this.y = 1;
			_this.z = 1;
			_this.w = 1;
		} else {
			var _this1 = this.baseShader.color__;
			_this1.x = obj.color.x;
			_this1.y = obj.color.y;
			_this1.z = obj.color.z;
			_this1.w = obj.color.w * this.globalAlpha;
		}
		var _this2 = this.baseShader.absoluteMatrixA__;
		_this2.x = obj.matA;
		_this2.y = obj.matC;
		_this2.z = obj.absX;
		_this2.w = 1.;
		var _this3 = this.baseShader.absoluteMatrixB__;
		_this3.x = obj.matB;
		_this3.y = obj.matD;
		_this3.z = obj.absY;
		_this3.w = 1.;
		this.beforeDraw();
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			_this.x = 1;
			_this.y = 1;
			_this.z = 1;
			_this.w = 1;
		} else {
			var _this1 = this.baseShader.color__;
			_this1.x = obj.color.x;
			_this1.y = obj.color.y;
			_this1.z = obj.color.z;
			_this1.w = obj.color.w * this.globalAlpha;
		}
		var _this2 = this.baseShader.absoluteMatrixA__;
		_this2.x = tile.width * obj.matA;
		_this2.y = tile.height * obj.matC;
		_this2.z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		_this2.w = 1.;
		var _this3 = this.baseShader.absoluteMatrixB__;
		_this3.x = tile.width * obj.matB;
		_this3.y = tile.height * obj.matD;
		_this3.z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		_this3.w = 1.;
		var _this4 = this.baseShader.uvPos__;
		_this4.x = tile.u;
		_this4.y = tile.v;
		_this4.z = tile.u2 - tile.u;
		_this4.w = tile.v2 - tile.v;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v1 = 0;
			if(k.pos == k.array.length) {
				var newSize1 = k.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(k.array);
				k.array = newArray1;
			}
			k.array[k.pos++] = v1;
			var v2 = 0;
			if(k.pos == k.array.length) {
				var newSize2 = k.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(k.array);
				k.array = newArray2;
			}
			k.array[k.pos++] = v2;
			var v3 = 0;
			if(k.pos == k.array.length) {
				var newSize3 = k.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(k.array);
				k.array = newArray3;
			}
			k.array[k.pos++] = v3;
			var v4 = 1;
			if(k.pos == k.array.length) {
				var newSize4 = k.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(k.array);
				k.array = newArray4;
			}
			k.array[k.pos++] = v4;
			var v5 = 1;
			if(k.pos == k.array.length) {
				var newSize5 = k.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(k.array);
				k.array = newArray5;
			}
			k.array[k.pos++] = v5;
			var v6 = 1;
			if(k.pos == k.array.length) {
				var newSize6 = k.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(k.array);
				k.array = newArray6;
			}
			k.array[k.pos++] = v6;
			var v7 = 1;
			if(k.pos == k.array.length) {
				var newSize7 = k.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(k.array);
				k.array = newArray7;
			}
			k.array[k.pos++] = v7;
			var v8 = 0;
			if(k.pos == k.array.length) {
				var newSize8 = k.array.length << 1;
				if(newSize8 < 128) {
					newSize8 = 128;
				}
				var newArray8 = new Float32Array(newSize8);
				newArray8.set(k.array);
				k.array = newArray8;
			}
			k.array[k.pos++] = v8;
			var v9 = 1;
			if(k.pos == k.array.length) {
				var newSize9 = k.array.length << 1;
				if(newSize9 < 128) {
					newSize9 = 128;
				}
				var newArray9 = new Float32Array(newSize9);
				newArray9.set(k.array);
				k.array = newArray9;
			}
			k.array[k.pos++] = v9;
			var v10 = 0;
			if(k.pos == k.array.length) {
				var newSize10 = k.array.length << 1;
				if(newSize10 < 128) {
					newSize10 = 128;
				}
				var newArray10 = new Float32Array(newSize10);
				newArray10.set(k.array);
				k.array = newArray10;
			}
			k.array[k.pos++] = v10;
			var v11 = 1;
			if(k.pos == k.array.length) {
				var newSize11 = k.array.length << 1;
				if(newSize11 < 128) {
					newSize11 = 128;
				}
				var newArray11 = new Float32Array(newSize11);
				newArray11.set(k.array);
				k.array = newArray11;
			}
			k.array[k.pos++] = v11;
			var v12 = 1;
			if(k.pos == k.array.length) {
				var newSize12 = k.array.length << 1;
				if(newSize12 < 128) {
					newSize12 = 128;
				}
				var newArray12 = new Float32Array(newSize12);
				newArray12.set(k.array);
				k.array = newArray12;
			}
			k.array[k.pos++] = v12;
			var v13 = 1;
			if(k.pos == k.array.length) {
				var newSize13 = k.array.length << 1;
				if(newSize13 < 128) {
					newSize13 = 128;
				}
				var newArray13 = new Float32Array(newSize13);
				newArray13.set(k.array);
				k.array = newArray13;
			}
			k.array[k.pos++] = v13;
			var v14 = 1;
			if(k.pos == k.array.length) {
				var newSize14 = k.array.length << 1;
				if(newSize14 < 128) {
					newSize14 = 128;
				}
				var newArray14 = new Float32Array(newSize14);
				newArray14.set(k.array);
				k.array = newArray14;
			}
			k.array[k.pos++] = v14;
			var v15 = 1;
			if(k.pos == k.array.length) {
				var newSize15 = k.array.length << 1;
				if(newSize15 < 128) {
					newSize15 = 128;
				}
				var newArray15 = new Float32Array(newSize15);
				newArray15.set(k.array);
				k.array = newArray15;
			}
			k.array[k.pos++] = v15;
			var v16 = 1;
			if(k.pos == k.array.length) {
				var newSize16 = k.array.length << 1;
				if(newSize16 < 128) {
					newSize16 = 128;
				}
				var newArray16 = new Float32Array(newSize16);
				newArray16.set(k.array);
				k.array = newArray16;
			}
			k.array[k.pos++] = v16;
			var v17 = 0;
			if(k.pos == k.array.length) {
				var newSize17 = k.array.length << 1;
				if(newSize17 < 128) {
					newSize17 = 128;
				}
				var newArray17 = new Float32Array(newSize17);
				newArray17.set(k.array);
				k.array = newArray17;
			}
			k.array[k.pos++] = v17;
			var v18 = 1;
			if(k.pos == k.array.length) {
				var newSize18 = k.array.length << 1;
				if(newSize18 < 128) {
					newSize18 = 128;
				}
				var newArray18 = new Float32Array(newSize18);
				newArray18.set(k.array);
				k.array = newArray18;
			}
			k.array[k.pos++] = v18;
			var v19 = 0;
			if(k.pos == k.array.length) {
				var newSize19 = k.array.length << 1;
				if(newSize19 < 128) {
					newSize19 = 128;
				}
				var newArray19 = new Float32Array(newSize19);
				newArray19.set(k.array);
				k.array = newArray19;
			}
			k.array[k.pos++] = v19;
			var v20 = 1;
			if(k.pos == k.array.length) {
				var newSize20 = k.array.length << 1;
				if(newSize20 < 128) {
					newSize20 = 128;
				}
				var newArray20 = new Float32Array(newSize20);
				newArray20.set(k.array);
				k.array = newArray20;
			}
			k.array[k.pos++] = v20;
			var v21 = 1;
			if(k.pos == k.array.length) {
				var newSize21 = k.array.length << 1;
				if(newSize21 < 128) {
					newSize21 = 128;
				}
				var newArray21 = new Float32Array(newSize21);
				newArray21.set(k.array);
				k.array = newArray21;
			}
			k.array[k.pos++] = v21;
			var v22 = 1;
			if(k.pos == k.array.length) {
				var newSize22 = k.array.length << 1;
				if(newSize22 < 128) {
					newSize22 = 128;
				}
				var newArray22 = new Float32Array(newSize22);
				newArray22.set(k.array);
				k.array = newArray22;
			}
			k.array[k.pos++] = v22;
			var v23 = 1;
			if(k.pos == k.array.length) {
				var newSize23 = k.array.length << 1;
				if(newSize23 < 128) {
					newSize23 = 128;
				}
				var newArray23 = new Float32Array(newSize23);
				newArray23.set(k.array);
				k.array = newArray23;
			}
			k.array[k.pos++] = v23;
			var v24 = 1;
			if(k.pos == k.array.length) {
				var newSize24 = k.array.length << 1;
				if(newSize24 < 128) {
					newSize24 = 128;
				}
				var newArray24 = new Float32Array(newSize24);
				newArray24.set(k.array);
				k.array = newArray24;
			}
			k.array[k.pos++] = v24;
			var v25 = 1;
			if(k.pos == k.array.length) {
				var newSize25 = k.array.length << 1;
				if(newSize25 < 128) {
					newSize25 = 128;
				}
				var newArray25 = new Float32Array(newSize25);
				newArray25.set(k.array);
				k.array = newArray25;
			}
			k.array[k.pos++] = v25;
			var v26 = 1;
			if(k.pos == k.array.length) {
				var newSize26 = k.array.length << 1;
				if(newSize26 < 128) {
					newSize26 = 128;
				}
				var newArray26 = new Float32Array(newSize26);
				newArray26.set(k.array);
				k.array = newArray26;
			}
			k.array[k.pos++] = v26;
			var v27 = 1;
			if(k.pos == k.array.length) {
				var newSize27 = k.array.length << 1;
				if(newSize27 < 128) {
					newSize27 = 128;
				}
				var newArray27 = new Float32Array(newSize27);
				newArray27.set(k.array);
				k.array = newArray27;
			}
			k.array[k.pos++] = v27;
			var v28 = 1;
			if(k.pos == k.array.length) {
				var newSize28 = k.array.length << 1;
				if(newSize28 < 128) {
					newSize28 = 128;
				}
				var newArray28 = new Float32Array(newSize28);
				newArray28.set(k.array);
				k.array = newArray28;
			}
			k.array[k.pos++] = v28;
			var v29 = 1;
			if(k.pos == k.array.length) {
				var newSize29 = k.array.length << 1;
				if(newSize29 < 128) {
					newSize29 = 128;
				}
				var newArray29 = new Float32Array(newSize29);
				newArray29.set(k.array);
				k.array = newArray29;
			}
			k.array[k.pos++] = v29;
			var v30 = 1;
			if(k.pos == k.array.length) {
				var newSize30 = k.array.length << 1;
				if(newSize30 < 128) {
					newSize30 = 128;
				}
				var newArray30 = new Float32Array(newSize30);
				newArray30.set(k.array);
				k.array = newArray30;
			}
			k.array[k.pos++] = v30;
			var v31 = 1;
			if(k.pos == k.array.length) {
				var newSize31 = k.array.length << 1;
				if(newSize31 < 128) {
					newSize31 = 128;
				}
				var newArray31 = new Float32Array(newSize31);
				newArray31.set(k.array);
				k.array = newArray31;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this5 = this.engine;
		_this5.renderBuffer(this.fixedBuffer,_this5.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d__$TileGroup_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = ["h2d","TileGroup"];
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderW,borderH,parent) {
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderWidth(borderW);
	this.set_borderHeight(borderH);
	this.set_width(tile.width);
	this.set_height(tile.height);
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = ["h2d","ScaleGrid"];
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	set_width: function(w) {
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderWidth: function(w) {
		this.borderWidth = w;
		this.clear();
		return w;
	}
	,set_borderHeight: function(h) {
		this.borderHeight = h;
		this.clear();
		return h;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.content.isEmpty()) {
			this.updateContent();
		}
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
	}
	,updateContent: function() {
		var bw = this.borderWidth;
		var bh = this.borderHeight;
		var _this = this.content;
		var color = this.curColor;
		var t = this.tile.sub(0,0,bw,bh);
		_this.add(0,0,color.x,color.y,color.z,color.w,t);
		var _this1 = this.content;
		var x = this.width - bw;
		var color1 = this.curColor;
		var t1 = this.tile.sub(this.tile.width - bw,0,bw,bh);
		_this1.add(x,0,color1.x,color1.y,color1.z,color1.w,t1);
		var _this2 = this.content;
		var y = this.height - bh;
		var color2 = this.curColor;
		var t2 = this.tile.sub(0,this.tile.height - bh,bw,bh);
		_this2.add(0,y,color2.x,color2.y,color2.z,color2.w,t2);
		var _this3 = this.content;
		var x1 = this.width - bw;
		var y1 = this.height - bh;
		var color3 = this.curColor;
		var t3 = this.tile.sub(this.tile.width - bw,this.tile.height - bh,bw,bh);
		_this3.add(x1,y1,color3.x,color3.y,color3.z,color3.w,t3);
		var sizeX = this.tile.width - bw * 2;
		var sizeY = this.tile.height - bh * 2;
		if(!this.tileBorders) {
			var w = this.width - bw * 2;
			var h = this.height - bh * 2;
			var t4 = this.tile.sub(bw,0,sizeX,bh);
			t4.scaleToSize(w,bh);
			var color4 = this.curColor;
			this.content.add(bw,0,color4.x,color4.y,color4.z,color4.w,t4);
			var t5 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
			t5.scaleToSize(w,bh);
			var color5 = this.curColor;
			this.content.add(bw,h + bh,color5.x,color5.y,color5.z,color5.w,t5);
			var t6 = this.tile.sub(0,bh,bw,sizeY);
			t6.scaleToSize(bw,h);
			var color6 = this.curColor;
			this.content.add(0,bh,color6.x,color6.y,color6.z,color6.w,t6);
			var t7 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
			t7.scaleToSize(bw,h);
			var color7 = this.curColor;
			this.content.add(w + bw,bh,color7.x,color7.y,color7.z,color7.w,t7);
		} else {
			var rw = (this.width - bw * 2) / sizeX | 0;
			var _g1 = 0;
			var _g = rw;
			while(_g1 < _g) {
				var x2 = _g1++;
				var _this4 = this.content;
				var color8 = this.curColor;
				var t8 = this.tile.sub(bw,0,sizeX,bh);
				_this4.add(bw + x2 * sizeX,0,color8.x,color8.y,color8.z,color8.w,t8);
				var _this5 = this.content;
				var y2 = this.height - bh;
				var color9 = this.curColor;
				var t9 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
				_this5.add(bw + x2 * sizeX,y2,color9.x,color9.y,color9.z,color9.w,t9);
			}
			var dx = this.width - bw * 2 - rw * sizeX;
			if(dx > 0) {
				var _this6 = this.content;
				var color10 = this.curColor;
				var t10 = this.tile.sub(bw,0,dx,bh);
				_this6.add(bw + rw * sizeX,0,color10.x,color10.y,color10.z,color10.w,t10);
				var _this7 = this.content;
				var y3 = this.height - bh;
				var color11 = this.curColor;
				var t11 = this.tile.sub(bw,this.tile.height - bh,dx,bh);
				_this7.add(bw + rw * sizeX,y3,color11.x,color11.y,color11.z,color11.w,t11);
			}
			var rh = (this.height - bh * 2) / sizeY | 0;
			var _g11 = 0;
			var _g2 = rh;
			while(_g11 < _g2) {
				var y4 = _g11++;
				var _this8 = this.content;
				var color12 = this.curColor;
				var t12 = this.tile.sub(0,bh,bw,sizeY);
				_this8.add(0,bh + y4 * sizeY,color12.x,color12.y,color12.z,color12.w,t12);
				var _this9 = this.content;
				var x3 = this.width - bw;
				var color13 = this.curColor;
				var t13 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
				_this9.add(x3,bh + y4 * sizeY,color13.x,color13.y,color13.z,color13.w,t13);
			}
			var dy = this.height - bh * 2 - rh * sizeY;
			if(dy > 0) {
				var _this10 = this.content;
				var color14 = this.curColor;
				var t14 = this.tile.sub(0,bh,bw,dy);
				_this10.add(0,bh + rh * sizeY,color14.x,color14.y,color14.z,color14.w,t14);
				var _this11 = this.content;
				var x4 = this.width - bw;
				var color15 = this.curColor;
				var t15 = this.tile.sub(this.tile.width - bw,bh,bw,dy);
				_this11.add(x4,bh + rh * sizeY,color15.x,color15.y,color15.z,color15.w,t15);
			}
		}
		var t16 = this.tile.sub(bw,bh,sizeX,sizeY);
		t16.scaleToSize(this.width - bw * 2,this.height - bh * 2);
		var color16 = this.curColor;
		this.content.add(bw,bh,color16.x,color16.y,color16.z,color16.w,t16);
	}
	,sync: function(ctx) {
		if(this.content.isEmpty()) {
			this.content.dispose();
			this.updateContent();
		}
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = ["hxd","InteractiveScene"];
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.interactive = [];
	this.eventListeners = [];
	this.stage = hxd_Stage.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = ["h2d","Scene"];
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,checkResize: function() {
		if(this.fixedSize) {
			return;
		}
		var engine = h3d_Engine.CURRENT;
		if(this.width != engine.width || this.height != engine.height) {
			this.width = engine.width;
			this.height = engine.height;
			this.posChanged = true;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToLocal(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != null) {
			if(!s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToLocal: function(e) {
		var x = e.relX * this.width / (this.stage.get_width() * this.scaleX) - this.x;
		var y = e.relY * this.height / (this.stage.get_height() * this.scaleY) - this.y;
		var rx = x * this.matA + y * this.matB + this.absX;
		var ry = x * this.matC + y * this.matD + this.absY;
		e.relX = rx;
		e.relY = ry;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var dx = rx - i.absX;
		var dy = ry - i.absY;
		var w1 = i.width * i.matA;
		var h1 = i.width * i.matC;
		var ky = h1 * dx + w1 * dy;
		var w2 = i.height * i.matB;
		var h2 = i.height * i.matD;
		var kx = w2 * dy + h2 * dx;
		var max = w1 * h2 - h1 * w2;
		event.relX = kx / max * i.width;
		event.relY = ky / max * i.height;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var _g1 = index;
		var _g = this.interactive.length;
		while(_g1 < _g) {
			var idx = _g1++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			var dx = rx - i.absX;
			var dy = ry - i.absY;
			var w1 = i.width * i.matA;
			var h1 = i.width * i.matC;
			var ky = h1 * dx + w1 * dy;
			if(ky < 0) {
				continue;
			}
			var w2 = i.height * i.matB;
			var h2 = i.height * i.matD;
			var kx = w2 * dy + h2 * dx;
			if(kx < 0) {
				continue;
			}
			var max = w1 * h2 - h1 * w2;
			if(ky >= max || kx >= max) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = kx / max * i.width;
			event.relY = ky / max * i.height;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,startDrag: function(f,onCancel,refEvent) {
		var _gthis = this;
		this.events.startDrag(function(e) {
			_gthis.screenToLocal(e);
			f(e);
		},onCancel,refEvent);
	}
	,stopDrag: function() {
		this.events.stopDrag();
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g1 = 0;
		var _g = this.interactive.length;
		while(_g1 < _g) {
			var index = _g1++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g11 = 0;
			var _g2 = p1.children.length;
			while(_g11 < _g2) {
				var k = _g11++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g12 = 0;
			var _g3 = p2.children.length;
			while(_g12 < _g3) {
				var k1 = _g12++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		if(!this.fixedSize && (this.width != ctx.engine.width || this.height != ctx.engine.height)) {
			this.width = ctx.engine.width;
			this.height = ctx.engine.height;
			this.posChanged = true;
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_Scene
});
var h2d_BatchElement = function(t) {
	this.x = 0;
	this.y = 0;
	this.r = 1;
	this.g = 1;
	this.b = 1;
	this.a = 1;
	this.rotation = 0;
	this.scaleX = this.scaleY = 1;
	this.visible = true;
	this.t = t;
};
$hxClasses["h2d.BatchElement"] = h2d_BatchElement;
h2d_BatchElement.__name__ = ["h2d","BatchElement"];
h2d_BatchElement.prototype = {
	update: function(et) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch["delete"](this);
		}
	}
	,__class__: h2d_BatchElement
};
var h2d_SpriteBatch = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
};
$hxClasses["h2d.SpriteBatch"] = h2d_SpriteBatch;
h2d_SpriteBatch.__name__ = ["h2d","SpriteBatch"];
h2d_SpriteBatch.__super__ = h2d_Drawable;
h2d_SpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,clear: function() {
		this.first = this.last = null;
		this.flush();
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.hasUpdate) {
			var e = this.first;
			while(e != null) {
				if(!e.update(ctx.elapsedTime)) {
					e.remove();
				}
				e = e.next;
			}
		}
		this.flush();
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			this.bufferVertices = 0;
			return;
		}
		if(this.tmpBuf == null) {
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			this.tmpBuf = this1;
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			var _g1 = tmp.pos;
			var _g = pos + 32;
			while(_g1 < _g) {
				var i = _g1++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		this.bufferVertices = pos >> 3;
		if(this.buffer != null && !this.buffer.isDisposed()) {
			if(this.buffer.vertices >= this.bufferVertices) {
				this.buffer.uploadVector(this.tmpBuf,0,this.bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,8,this.bufferVertices,[h3d_BufferFlag.Dynamic,h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		if(this.first == null || this.buffer == null || this.buffer.isDisposed() || this.bufferVertices == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var _this = ctx.engine;
		_this.renderBuffer(this.buffer,_this.mem.quadIndexes,2,0,this.bufferVertices >> 1);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
	}
	,__class__: h2d_SpriteBatch
});
var h2d_Align = $hxClasses["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"] };
h2d_Align.Left = ["Left",0];
h2d_Align.Left.toString = $estr;
h2d_Align.Left.__enum__ = h2d_Align;
h2d_Align.Right = ["Right",1];
h2d_Align.Right.toString = $estr;
h2d_Align.Right.__enum__ = h2d_Align;
h2d_Align.Center = ["Center",2];
h2d_Align.Center.toString = $estr;
h2d_Align.Center.__enum__ = h2d_Align;
h2d_Align.MultilineRight = ["MultilineRight",3];
h2d_Align.MultilineRight.toString = $estr;
h2d_Align.MultilineRight.__enum__ = h2d_Align;
h2d_Align.MultilineCenter = ["MultilineCenter",4];
h2d_Align.MultilineCenter.toString = $estr;
h2d_Align.MultilineCenter.__enum__ = h2d_Align;
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_TextInput = function(font,parent) {
	this.maxHistorySize = 100;
	this.lastClick = 0.;
	this.lastChange = 0.;
	this.redo = [];
	this.undo = [];
	this.scrollX = 0;
	this.cursorBlink = 0.;
	this.canEdit = true;
	this.cursorBlinkTime = 0.5;
	this.cursorIndex = -1;
	var _gthis = this;
	h2d_Text.call(this,font,parent);
	this.interactive = new h2d_Interactive(0,0);
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.interactive.onPush = function(e) {
		_gthis.onPush(e);
		if(!e.cancel && e.button == 0) {
			if(!_gthis.interactive.hasFocus()) {
				e.kind = hxd_EventKind.EFocus;
				_gthis.onFocus(e);
				e.kind = hxd_EventKind.EPush;
				if(e.cancel) {
					return;
				}
				_gthis.interactive.focus();
			}
			_gthis.cursorBlink = 0;
			var startIndex = _gthis.textPos(e.relX,e.relY);
			_gthis.cursorIndex = startIndex;
			_gthis.selectionRange = null;
			var pt = new h2d_col_Point();
			var scene = _gthis.getScene();
			scene.startDrag(function(e1) {
				pt.x = e1.relX;
				pt.y = e1.relY;
				_gthis.globalToLocal(pt);
				var index = _gthis.textPos(pt.x,pt.y);
				if(index == startIndex) {
					_gthis.selectionRange = null;
				} else if(index < startIndex) {
					_gthis.selectionRange = { start : index, length : startIndex - index};
				} else {
					_gthis.selectionRange = { start : startIndex, length : index - startIndex};
				}
				_gthis.selectionSize = 0;
				_gthis.cursorIndex = index;
				if(e1.kind == hxd_EventKind.ERelease || _gthis.getScene() != scene) {
					scene.stopDrag();
				}
			});
		}
	};
	this.interactive.onKeyDown = function(e2) {
		_gthis.onKeyDown(e2);
		_gthis.handleKey(e2);
	};
	this.interactive.onTextInput = function(e3) {
		_gthis.onTextInput(e3);
		_gthis.handleKey(e3);
	};
	this.interactive.onFocusLost = function(e4) {
		_gthis.cursorIndex = -1;
		_gthis.selectionRange = null;
		_gthis.onFocusLost(e4);
	};
	this.interactive.onClick = function(e5) {
		_gthis.onClick(e5);
		if(e5.cancel) {
			return;
		}
		var t = new Date().getTime() / 1000;
		if(t - _gthis.lastClick < 0.3 && _gthis.text.length != 0) {
			_gthis.selectionRange = { start : 0, length : _gthis.text.length};
			_gthis.selectionSize = 0;
			_gthis.cursorIndex = _gthis.text.length;
		}
		_gthis.lastClick = t;
	};
	this.interactive.onKeyUp = function(e6) {
		_gthis.onKeyUp(e6);
	};
	this.interactive.onRelease = function(e7) {
		_gthis.onRelease(e7);
	};
	this.interactive.onFocus = function(e8) {
		_gthis.onFocus(e8);
	};
	this.interactive.onKeyUp = function(e9) {
		_gthis.onKeyUp(e9);
	};
	this.interactive.onMove = function(e10) {
		_gthis.onMove(e10);
	};
	this.interactive.onOver = function(e11) {
		_gthis.onOver(e11);
	};
	this.interactive.onOut = function(e12) {
		_gthis.onOut(e12);
	};
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.addChildAt(this.interactive,0);
};
$hxClasses["h2d.TextInput"] = h2d_TextInput;
h2d_TextInput.__name__ = ["h2d","TextInput"];
h2d_TextInput.__super__ = h2d_Text;
h2d_TextInput.prototype = $extend(h2d_Text.prototype,{
	constraintSize: function(width,height) {
	}
	,handleKey: function(e) {
		if(e.cancel || this.cursorIndex < 0) {
			return;
		}
		var oldIndex = this.cursorIndex;
		var oldText = this.text;
		var _g = e.keyCode;
		switch(_g) {
		case 8:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex > 0 && this.canEdit) {
				this.beforeChange();
				this.cursorIndex--;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,this.cursorIndex + 1,null));
				this.onChange();
			}
			break;
		case 13:case 108:
			this.cursorIndex = -1;
			this.interactive.blur();
			return;
		case 35:
			this.cursorIndex = this.text.length;
			break;
		case 36:
			this.cursorIndex = 0;
			break;
		case 37:
			if(this.cursorIndex > 0) {
				this.cursorIndex--;
			}
			break;
		case 39:
			if(this.cursorIndex < this.text.length) {
				this.cursorIndex++;
			}
			break;
		case 46:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex < this.text.length && this.canEdit) {
				this.beforeChange();
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,this.cursorIndex + 1,null));
				this.onChange();
			}
			break;
		case 89:
			if(hxd_Key.isDown(17)) {
				if(this.redo.length > 0 && this.canEdit) {
					this.undo.push(this.curHistoryState());
					this.setState(this.redo.pop());
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCharCode(e.charCode) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 90:
			if(hxd_Key.isDown(17)) {
				if(this.undo.length > 0 && this.canEdit) {
					this.redo.push(this.curHistoryState());
					this.setState(this.undo.pop());
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCharCode(e.charCode) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		default:
			if(e.kind == hxd_EventKind.EKeyDown) {
				return;
			}
			if(e.charCode != 0 && this.canEdit) {
				if(!this.font.hasChar(e.charCode)) {
					return;
				}
				this.beforeChange();
				if(this.selectionRange != null) {
					this.cutSelection();
				}
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCharCode(e.charCode) + HxOverrides.substr(this.text,this.cursorIndex,null));
				this.cursorIndex++;
				this.onChange();
			}
		}
		this.cursorBlink = 0.;
		if(hxd_Key.isDown(16) && this.text == oldText) {
			if(this.cursorIndex == oldIndex) {
				return;
			}
			if(this.selectionRange == null) {
				this.selectionRange = oldIndex < this.cursorIndex ? { start : oldIndex, length : this.cursorIndex - oldIndex} : { start : this.cursorIndex, length : oldIndex - this.cursorIndex};
			} else if(oldIndex == this.selectionRange.start) {
				this.selectionRange.length += oldIndex - this.cursorIndex;
				this.selectionRange.start = this.cursorIndex;
			} else {
				this.selectionRange.length += this.cursorIndex - oldIndex;
			}
			if(this.selectionRange.length == 0) {
				this.selectionRange = null;
			} else if(this.selectionRange.length < 0) {
				this.selectionRange.start += this.selectionRange.length;
				this.selectionRange.length = -this.selectionRange.length;
			}
			this.selectionSize = 0;
		} else {
			this.selectionRange = null;
		}
	}
	,cutSelection: function() {
		if(this.selectionRange == null) {
			return false;
		}
		this.cursorIndex = this.selectionRange.start;
		var end = this.cursorIndex + this.selectionRange.length;
		this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,end,null));
		this.selectionRange = null;
		return true;
	}
	,setState: function(h) {
		this.set_text(h.t);
		this.cursorIndex = h.c;
		this.selectionRange = h.sel;
		if(this.selectionRange != null) {
			this.cursorIndex = this.selectionRange.start + this.selectionRange.length;
		}
	}
	,curHistoryState: function() {
		return { t : this.text, c : this.cursorIndex, sel : this.selectionRange == null ? null : { start : this.selectionRange.start, length : this.selectionRange.length}};
	}
	,beforeChange: function() {
		var t = new Date().getTime() / 1000;
		if(t - this.lastChange < 1) {
			this.lastChange = t;
			return;
		}
		this.lastChange = t;
		this.undo.push(this.curHistoryState());
		this.redo = [];
		while(this.undo.length > this.maxHistorySize) this.undo.shift();
	}
	,set_text: function(t) {
		h2d_Text.prototype.set_text.call(this,t);
		if(this.cursorIndex > t.length) {
			this.cursorIndex = t.length;
		}
		return t;
	}
	,set_font: function(f) {
		h2d_Text.prototype.set_font.call(this,f);
		this.cursorTile = h2d_Tile.fromColor(16777215,1,this.font.size);
		this.cursorTile.dy = 2;
		this.selectionTile = h2d_Tile.fromColor(3381759,0,this.font.lineHeight);
		return f;
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		h2d_Text.prototype.initGlyphs.call(this,text,rebuild,handleAlign,lines);
		if(rebuild) {
			this.calcWidth += this.cursorTile.width;
			if(this.inputWidth != null && this.calcWidth > this.inputWidth) {
				this.calcWidth = this.inputWidth;
			}
		}
	}
	,textPos: function(x,y) {
		x += this.scrollX;
		var pos = 0;
		while(pos < this.text.length) {
			if(this.calcTextWidth(HxOverrides.substr(this.text,0,pos + 1)) > x) {
				break;
			}
			++pos;
		}
		return pos;
	}
	,sync: function(ctx) {
		var tmp = this.inputWidth != null ? this.inputWidth : this.maxWidth != null ? Math.ceil(this.maxWidth) : this.get_textWidth();
		this.interactive.width = tmp;
		this.interactive.height = this.font.lineHeight;
		h2d_Text.prototype.sync.call(this,ctx);
	}
	,draw: function(ctx) {
		if(this.inputWidth != null) {
			var h = this.localToGlobal(new h2d_col_Point(this.inputWidth,this.font.lineHeight));
			ctx.setRenderZone(this.absX,this.absY,h.x - this.absX,h.y - this.absY);
		}
		if(this.cursorIndex >= 0 && (this.text != this.cursorText || this.cursorIndex != this.cursorXIndex)) {
			if(this.cursorIndex > this.text.length) {
				this.cursorIndex = this.text.length;
			}
			this.cursorText = this.text;
			this.cursorXIndex = this.cursorIndex;
			this.cursorX = this.calcTextWidth(HxOverrides.substr(this.text,0,this.cursorIndex));
			if(this.inputWidth != null && this.cursorX - this.scrollX >= this.inputWidth) {
				this.scrollX = this.cursorX - this.inputWidth + 1;
			} else if(this.cursorX < this.scrollX) {
				this.scrollX = this.cursorX;
			}
		}
		this.absX -= this.scrollX * this.matA;
		this.absY -= this.scrollX * this.matC;
		if(this.selectionRange != null) {
			if(this.selectionSize == 0) {
				this.selectionPos = this.calcTextWidth(HxOverrides.substr(this.text,0,this.selectionRange.start));
				this.selectionSize = this.calcTextWidth(HxOverrides.substr(this.text,this.selectionRange.start,this.selectionRange.length));
				if(this.selectionRange.start + this.selectionRange.length == this.text.length) {
					this.selectionSize += this.cursorTile.width;
				}
			}
			this.selectionTile.dx += this.selectionPos;
			this.selectionTile.width += this.selectionSize;
			this.emitTile(ctx,this.selectionTile);
			this.selectionTile.dx -= this.selectionPos;
			this.selectionTile.width -= this.selectionSize;
		}
		h2d_Text.prototype.draw.call(this,ctx);
		this.absX += this.scrollX * this.matA;
		this.absY += this.scrollX * this.matC;
		if(this.cursorIndex >= 0) {
			this.cursorBlink += ctx.elapsedTime;
			if(this.cursorBlink % (this.cursorBlinkTime * 2) < this.cursorBlinkTime) {
				this.cursorTile.dx += this.cursorX - this.scrollX;
				this.emitTile(ctx,this.cursorTile);
				this.cursorTile.dx -= this.cursorX - this.scrollX;
			}
		}
		if(this.inputWidth != null) {
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,focus: function() {
		this.interactive.focus();
	}
	,onOut: function(e) {
	}
	,onOver: function(e) {
	}
	,onMove: function(e) {
	}
	,onClick: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onTextInput: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onChange: function() {
	}
	,drawRec: function(ctx) {
		var old = this.interactive.visible;
		this.interactive.set_visible(false);
		this.interactive.draw(ctx);
		h2d_Text.prototype.drawRec.call(this,ctx);
		this.interactive.set_visible(true);
	}
	,__class__: h2d_TextInput
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = ["h2d","Tile"];
h2d_Tile.fromColor = function(color,width,height,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha,allocPos),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,setPos: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,dispose: function() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,__class__: h2d_Tile
};
var h2d__$TileGroup_TileLayerContent = function() {
	this.clear();
};
$hxClasses["h2d._TileGroup.TileLayerContent"] = h2d__$TileGroup_TileLayerContent;
h2d__$TileGroup_TileLayerContent.__name__ = ["h2d","_TileGroup","TileLayerContent"];
h2d__$TileGroup_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d__$TileGroup_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		if(this.buffer != null) {
			engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,min,len);
		}
	}
	,__class__: h2d__$TileGroup_TileLayerContent
});
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = ["h2d","col","Point"];
h2d_col_Point.prototype = {
	__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = ["h2d","filter","Filter"];
h2d_filter_Filter.prototype = {
	sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h3d_BufferFlag = $hxClasses["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc"] };
h3d_BufferFlag.Dynamic = ["Dynamic",0];
h3d_BufferFlag.Dynamic.toString = $estr;
h3d_BufferFlag.Dynamic.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Triangles = ["Triangles",1];
h3d_BufferFlag.Triangles.toString = $estr;
h3d_BufferFlag.Triangles.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Quads = ["Quads",2];
h3d_BufferFlag.Quads.toString = $estr;
h3d_BufferFlag.Quads.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Managed = ["Managed",3];
h3d_BufferFlag.Managed.toString = $estr;
h3d_BufferFlag.Managed.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.RawFormat = ["RawFormat",4];
h3d_BufferFlag.RawFormat.toString = $estr;
h3d_BufferFlag.RawFormat.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.NoAlloc = ["NoAlloc",5];
h3d_BufferFlag.NoAlloc.toString = $estr;
h3d_BufferFlag.NoAlloc.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc];
var h3d_Buffer = function(vertices,stride,flags,allocPos) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc[1]) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = ["h3d","Buffer"];
h3d_Buffer.ofFloats = function(v,stride,flags,allocPos) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags,allocPos);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags,allocPos) {
	var b = new h3d_Buffer(vertices,stride,flags,allocPos);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = ["h3d","Camera"];
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1.;
			var _this1 = this.target;
			_this1.x = 0;
			_this1.y = 0;
			_this1.z = 0;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.miview != null) {
			this.miview._44 = 0;
		}
	}
	,getFrustumCorners: function() {
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,1),this.unproject(1,1,1),this.unproject(1,-1,1),this.unproject(-1,-1,1)];
	}
	,makeCameraMatrix: function(m) {
		var az;
		if(this.rightHanded) {
			var _this = this.pos;
			var v = this.target;
			az = new h3d_Vector(_this.x - v.x,_this.y - v.y,_this.z - v.z,_this.w - v.w);
		} else {
			var _this1 = this.target;
			var v1 = this.pos;
			az = new h3d_Vector(_this1.x - v1.x,_this1.y - v1.y,_this1.z - v1.z,_this1.w - v1.w);
		}
		az.normalize();
		var _this2 = this.up;
		var ax = new h3d_Vector(_this2.y * az.z - _this2.z * az.y,_this2.z * az.x - _this2.x * az.z,_this2.x * az.y - _this2.y * az.x,1);
		ax.normalize();
		if(Math.sqrt(ax.x * ax.x + ax.y * ax.y + ax.z * ax.z) == 0) {
			ax.x = az.y;
			ax.y = az.z;
			ax.z = az.x;
		}
		var ay_x = az.y * ax.z - az.z * ax.y;
		var ay_y = az.z * ax.x - az.x * ax.z;
		var ay_z = az.x * ax.y - az.y * ax.x;
		var ay_w = 1;
		m._11 = ax.x;
		m._12 = ay_x;
		m._13 = az.x;
		m._14 = 0;
		m._21 = ax.y;
		m._22 = ay_y;
		m._23 = az.y;
		m._24 = 0;
		m._31 = ax.z;
		m._32 = ay_z;
		m._33 = az.z;
		m._34 = 0;
		var v2 = this.pos;
		m._41 = -(ax.x * v2.x + ax.y * v2.y + ax.z * v2.z);
		var v3 = this.pos;
		m._42 = -(ay_x * v3.x + ay_y * v3.y + ay_z * v3.z);
		var v4 = this.pos;
		m._43 = -(az.x * v4.x + az.y * v4.y + az.z * v4.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,f,m) {
	this.t = t;
	this.next = n;
	this.face = f;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = ["h3d","_Engine","TargetTmp"];
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function(hardware,aa) {
	if(aa == null) {
		aa = 0;
	}
	if(hardware == null) {
		hardware = true;
	}
	this.resCache = new haxe_ds_ObjectMap();
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.frameCount = 0;
	this.backgroundColor = -16777216;
	this.hardware = hardware;
	this.antiAlias = aa;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.stage = hxd_Stage.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = new Date().getTime() / 1000;
	this.stage.addResizeEvent($bind(this,this.onStageResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = ["h3d","Engine"];
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.stage.get_width();
			this.height = this.stage.get_height();
		}
		if(disposed) {
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onStageResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.stage.get_width();
			var h = this.stage.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.stage.setFullScreen(v);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.frameCount++;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(this.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,face,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.face = face;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetFace != t.face || this.currentTargetMip != t.mipLevel;
		}
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			this.driver.setRenderTarget(t.t,t.face,t.mipLevel);
			this.currentTargetTex = t.t;
			this.currentTargetFace = t.face;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = new Date().getTime() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count) {
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = ["h3d","Indexes"];
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = ["h3d","Matrix"];
h3d_Matrix.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,colorHue: function(hue) {
		if(hue == 0.) {
			return;
		}
		var cosA = Math.cos(-hue);
		var sinA = Math.sin(-hue);
		var ch = (1 - cosA) / 3;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = ["h3d","Quat"];
h3d_Quat.prototype = {
	saveToMatrix: function(m) {
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = ["h3d","Vector"];
h3d_Vector.prototype = {
	normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = ["h3d","anim","AnimatedObject"];
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = ["h3d","anim","Animation"];
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g1 = f0;
			var _g = f1 + 1;
			while(_g1 < _g) {
				var f = _g1++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = ["h3d","col","Collider"];
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = ["h3d","col","Bounds"];
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
	this.pright = new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
	this.ptop = new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
	this.pbottom = new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
	this.pnear = new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
	this.pfar = new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
	var _this = this.pleft;
	var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
	_this.nx *= len;
	_this.ny *= len;
	_this.nz *= len;
	_this.d *= len;
	var _this1 = this.pright;
	var len1 = 1. / Math.sqrt(_this1.nx * _this1.nx + _this1.ny * _this1.ny + _this1.nz * _this1.nz);
	_this1.nx *= len1;
	_this1.ny *= len1;
	_this1.nz *= len1;
	_this1.d *= len1;
	var _this2 = this.ptop;
	var len2 = 1. / Math.sqrt(_this2.nx * _this2.nx + _this2.ny * _this2.ny + _this2.nz * _this2.nz);
	_this2.nx *= len2;
	_this2.ny *= len2;
	_this2.nz *= len2;
	_this2.d *= len2;
	var _this3 = this.pbottom;
	var len3 = 1. / Math.sqrt(_this3.nx * _this3.nx + _this3.ny * _this3.ny + _this3.nz * _this3.nz);
	_this3.nx *= len3;
	_this3.ny *= len3;
	_this3.nz *= len3;
	_this3.d *= len3;
	var _this4 = this.pnear;
	var len4 = 1. / Math.sqrt(_this4.nx * _this4.nx + _this4.ny * _this4.ny + _this4.nz * _this4.nz);
	_this4.nx *= len4;
	_this4.ny *= len4;
	_this4.nz *= len4;
	_this4.d *= len4;
	var _this5 = this.pfar;
	var len5 = 1. / Math.sqrt(_this5.nx * _this5.nx + _this5.ny * _this5.ny + _this5.nz * _this5.nz);
	_this5.nx *= len5;
	_this5.ny *= len5;
	_this5.nz *= len5;
	_this5.d *= len5;
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = ["h3d","col","Frustum"];
h3d_col_Frustum.prototype = {
	hasSphere: function(s) {
		var p_x = s.x;
		var p_y = s.y;
		var p_z = s.z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = ["h3d","col","Plane"];
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = ["h3d","col","Ray"];
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = ["h3d","col","Sphere"];
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxClasses["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries"] };
h3d_impl_Feature.StandardDerivatives = ["StandardDerivatives",0];
h3d_impl_Feature.StandardDerivatives.toString = $estr;
h3d_impl_Feature.StandardDerivatives.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.FloatTextures = ["FloatTextures",1];
h3d_impl_Feature.FloatTextures.toString = $estr;
h3d_impl_Feature.FloatTextures.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.AllocDepthBuffer = ["AllocDepthBuffer",2];
h3d_impl_Feature.AllocDepthBuffer.toString = $estr;
h3d_impl_Feature.AllocDepthBuffer.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.HardwareAccelerated = ["HardwareAccelerated",3];
h3d_impl_Feature.HardwareAccelerated.toString = $estr;
h3d_impl_Feature.HardwareAccelerated.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.MultipleRenderTargets = ["MultipleRenderTargets",4];
h3d_impl_Feature.MultipleRenderTargets.toString = $estr;
h3d_impl_Feature.MultipleRenderTargets.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.Queries = ["Queries",5];
h3d_impl_Feature.Queries.toString = $estr;
h3d_impl_Feature.Queries.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries];
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = ["h3d","impl","Driver"];
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = ["h3d","impl","_GlDriver","CompiledShader"];
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = ["h3d","impl","_GlDriver","CompiledAttribute"];
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = ["h3d","impl","_GlDriver","CompiledProgram"];
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.firstShader = true;
	this.boundTextures = [];
	this.lastActiveIndex = 0;
	this.canvas = hxd_Stage.getInstance().canvas;
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,{ alpha : false, antialias : antiAlias > 0});
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.curAttribs = 0;
	this.curMatBits = -1;
	this.defStencil = new h3d_mat_Stencil();
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = ["h3d","impl","GlDriver"];
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g1 = 0;
			var _g = codeLines.length;
			while(_g1 < _g) {
				var i = _g1++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		var _g = [];
		var _g2 = 0;
		var _g1 = shader.textures2DCount;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.gl.getUniformLocation(p.p,prefix + "Textures[" + i + "]"));
		}
		s.textures = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = shader.texturesCubeCount;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(this.gl.getUniformLocation(p.p,prefix + "TexturesCube[" + i1 + "]"));
		}
		s.cubeTextures = _g11;
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			if(this.shaderVersion != null) {
				glout.version = this.shaderVersion;
			} else {
				glout.glES = true;
			}
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string((e instanceof js__$Boot_HaxeError) ? e.val : e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + glout.run(shader.vertex.data) + "\n\nFragment=\n" + glout.run(shader.fragment.data));
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			p.attribNames = [];
			p.attribs = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _g2 = v.kind;
				if(_g2[1] == 1) {
					var t = 5126;
					var size;
					var _g21 = v.type;
					switch(_g21[1]) {
					case 3:
						size = 1;
						break;
					case 5:
						var n = _g21[2];
						size = n;
						break;
					case 9:
						var n1 = _g21[2];
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					p.attribs.push(a);
					p.attribNames.push(v.name);
					p.stride += size;
				}
			}
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g11 = this.curAttribs;
		var _g3 = p.attribs.length;
		while(_g11 < _g3) {
			var i = _g11++;
			this.gl.enableVertexAttribArray(i);
			this.curAttribs++;
		}
		while(this.curAttribs > p.attribs.length) this.gl.disableVertexAttribArray(--this.curAttribs);
		this.curShader = p;
		this.curBuffer = null;
		var _g12 = 0;
		var _g4 = this.boundTextures.length;
		while(_g12 < _g4) {
			var i1 = _g12++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g1 = 0;
			var _g = s.textures.length + s.cubeTextures.length;
			while(_g1 < _g) {
				var i = _g1++;
				var t = buf.tex[i];
				var isCube = i >= tcount;
				if(t == null || t.t == null && t.realloc == null) {
					if(isCube) {
						t = h3d_mat_Texture.defaultCubeTexture();
					} else {
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.lastFrame = this.frame;
				var pt = isCube ? s.cubeTextures[i - tcount] : s.textures[i];
				if(pt == null) {
					continue;
				}
				if(this.boundTextures[i] == t.t) {
					continue;
				}
				this.boundTextures[i] = t.t;
				var mode = isCube ? 34067 : 3553;
				this.gl.activeTexture(33984 + i);
				this.gl.uniform1i(pt,i);
				this.gl.bindTexture(mode,t.t.t);
				this.lastActiveIndex = i;
				var mip = t.mipMap[1];
				var filter = t.filter[1];
				var wrap = t.wrap[1];
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					this.gl.texParameteri(mode,10240,flags[0]);
					this.gl.texParameteri(mode,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode,10242,w);
					this.gl.texParameteri(mode,10243,w);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		this.selectMaterialBits(pass.bits);
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.frontRefBits,s.backRefBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 62914560) != 0) {
			var cop = bits >> 22 & 3;
			var aop = bits >> 24 & 3;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		if((diff & 1006632960) != 0) {
			var m = bits >> 26 & 15;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,frBits,brBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffFr = frBits ^ this.curStFrBits;
		var diffBr = brBits ^ this.curStBrBits;
		if((diffOp | diffFr | diffBr) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7]);
		}
		if((diffOp & 7 | diffFr & 65535) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],frBits & 255,frBits >> 8 & 255);
		}
		if((diffOp & 28672 | diffBr & 65535) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],brBits & 255,brBits >> 8 & 255);
		}
		if((diffFr & 16711680) != 0) {
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],frBits >> 16 & 255);
		}
		if((diffBr & 16711680) != 0) {
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],brBits >> 16 & 255);
		}
		this.curStOpBits = opBits;
		this.curStFrBits = frBits;
		this.curStBrBits = brBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 1006632960;
			}
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.frontRefBits,this.defStencil.backRefBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		var _g = t.internalFmt;
		switch(_g) {
		case 6406:
			return 6406;
		case 6408:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,allocTexture: function(t) {
		var tt = this.gl.createTexture();
		var bind = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g[1]) {
		case 2:
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 6406;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.lastFrame = this.frame;
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared[1]);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0) {
			var _g1 = 0;
			while(_g1 < 6) {
				var i = _g1++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				if(this.gl.getError() == 1285) {
					outOfMem = true;
					break;
				}
			}
		} else {
			this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(this.gl.getError() == 1285) {
				outOfMem = true;
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,33189,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(this.bufferWidth,this.bufferHeight);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic[1]) != 0 ? 35048 : 35044);
		var outOfMem = this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count) {
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * 2,35044);
		var outOfMem = this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return b;
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g1 = 0;
		var _g = this.boundTextures.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.pixelStorei(37440,1);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0;
		var bind = cubic ? 34067 : 3553;
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		this.gl.pixelStorei(37440,cubic ? 0 : 1);
		this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,new Uint8Array(pixels.bytes.b.bufferValue));
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		this.gl.bindBuffer(34963,i);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos * 2,indiceCount);
		this.gl.bufferSubData(34963,startIndice * 2,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
			}
		} else {
			var offset = 8;
			var _g11 = 0;
			var _g2 = this.curShader.attribs.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g21 = this.curShader.attribNames[i];
				switch(_g21) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g21;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf);
		}
		this.gl.drawElements(4,ntriangles * 3,5123,startIndex * 2);
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			var th = this.curTarget == null ? this.bufferHeight : this.curTarget.height;
			this.gl.scissor(x,th - (y + height),width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,setRenderTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
			this.setDrawBuffers(1);
		}
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw new js__$Boot_HaxeError("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared[1]) == 0) {
			var bind = (tex.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		tex.lastFrame = this.frame;
		this.curTargetFace = face;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? h3d_impl_GlDriver.CUBE_FACES[face] : 3553,tex.t.t,mipLevel);
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g1 = 0;
		var _g = this.boundTextures.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.boundTextures[i] = null;
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		switch(f[1]) {
		case 0:
			return this.gl.getExtension("OES_standard_derivatives") != null;
		case 1:
			if(this.gl.getExtension("OES_texture_float") != null) {
				return this.gl.getExtension("OES_texture_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 2:
			return true;
		case 3:
			return true;
		case 4:
			if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 5:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = ["h3d","impl","_ManagedBuffer","FreeCell"];
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = ["h3d","impl","ManagedBuffer"];
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed[1]) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = ["h3d","impl","MemoryManager"];
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g1 = 1;
		var _g = this.buffers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f[1]) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed[1]) == 0) {
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,(b.flags & 1 << h3d_BufferFlag.Dynamic[1]) != 0 ? [h3d_BufferFlag.Dynamic] : null);
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags1 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1[1]) != 0) {
								flags1.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags1);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * 2;
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count);
		this.indexes.push(i);
		this.usedMemory += i.count * 2;
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null) {
				continue;
			}
			if(force || t.lastFrame < h3d_Engine.CURRENT.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.lastFrame - t2.lastFrame;
	}
	,deleteTexture: function(t) {
		HxOverrides.remove(this.textures,t);
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		this.triIndexes.dispose();
		this.quadIndexes.dispose();
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g11 = this.buffers.slice();
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			var b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		var _g3 = 0;
		var _g12 = this.indexes.slice();
		while(_g3 < _g12.length) {
			var i = _g12[_g3];
			++_g3;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = ["h3d","impl","TextureCache"];
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,allocTarget: function(name,width,height,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format) {
			if(t != null) {
				t.dispose();
			}
			var flags = [h3d_mat_TextureFlags.Target];
			t = new h3d_mat_Texture(width,height,flags,format);
			this.cache[this.position] = t;
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,__class__: h3d_impl_TextureCache
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = ["h3d","mat","BaseMaterial"];
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.prototype = {
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,__class__: h3d_mat_BaseMaterial
};
var h3d_mat_Face = $hxClasses["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"] };
h3d_mat_Face.None = ["None",0];
h3d_mat_Face.None.toString = $estr;
h3d_mat_Face.None.__enum__ = h3d_mat_Face;
h3d_mat_Face.Back = ["Back",1];
h3d_mat_Face.Back.toString = $estr;
h3d_mat_Face.Back.__enum__ = h3d_mat_Face;
h3d_mat_Face.Front = ["Front",2];
h3d_mat_Face.Front.toString = $estr;
h3d_mat_Face.Front.__enum__ = h3d_mat_Face;
h3d_mat_Face.Both = ["Both",3];
h3d_mat_Face.Both.toString = $estr;
h3d_mat_Face.Both.__enum__ = h3d_mat_Face;
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxClasses["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"] };
h3d_mat_Blend.One = ["One",0];
h3d_mat_Blend.One.toString = $estr;
h3d_mat_Blend.One.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.Zero = ["Zero",1];
h3d_mat_Blend.Zero.toString = $estr;
h3d_mat_Blend.Zero.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcAlpha = ["SrcAlpha",2];
h3d_mat_Blend.SrcAlpha.toString = $estr;
h3d_mat_Blend.SrcAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcColor = ["SrcColor",3];
h3d_mat_Blend.SrcColor.toString = $estr;
h3d_mat_Blend.SrcColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.DstAlpha = ["DstAlpha",4];
h3d_mat_Blend.DstAlpha.toString = $estr;
h3d_mat_Blend.DstAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.DstColor = ["DstColor",5];
h3d_mat_Blend.DstColor.toString = $estr;
h3d_mat_Blend.DstColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusSrcAlpha = ["OneMinusSrcAlpha",6];
h3d_mat_Blend.OneMinusSrcAlpha.toString = $estr;
h3d_mat_Blend.OneMinusSrcAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusSrcColor = ["OneMinusSrcColor",7];
h3d_mat_Blend.OneMinusSrcColor.toString = $estr;
h3d_mat_Blend.OneMinusSrcColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusDstAlpha = ["OneMinusDstAlpha",8];
h3d_mat_Blend.OneMinusDstAlpha.toString = $estr;
h3d_mat_Blend.OneMinusDstAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusDstColor = ["OneMinusDstColor",9];
h3d_mat_Blend.OneMinusDstColor.toString = $estr;
h3d_mat_Blend.OneMinusDstColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.ConstantColor = ["ConstantColor",10];
h3d_mat_Blend.ConstantColor.toString = $estr;
h3d_mat_Blend.ConstantColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.ConstantAlpha = ["ConstantAlpha",11];
h3d_mat_Blend.ConstantAlpha.toString = $estr;
h3d_mat_Blend.ConstantAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusConstantColor = ["OneMinusConstantColor",12];
h3d_mat_Blend.OneMinusConstantColor.toString = $estr;
h3d_mat_Blend.OneMinusConstantColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusConstantAlpha = ["OneMinusConstantAlpha",13];
h3d_mat_Blend.OneMinusConstantAlpha.toString = $estr;
h3d_mat_Blend.OneMinusConstantAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcAlphaSaturate = ["SrcAlphaSaturate",14];
h3d_mat_Blend.SrcAlphaSaturate.toString = $estr;
h3d_mat_Blend.SrcAlphaSaturate.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxClasses["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"] };
h3d_mat_Compare.Always = ["Always",0];
h3d_mat_Compare.Always.toString = $estr;
h3d_mat_Compare.Always.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Never = ["Never",1];
h3d_mat_Compare.Never.toString = $estr;
h3d_mat_Compare.Never.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Equal = ["Equal",2];
h3d_mat_Compare.Equal.toString = $estr;
h3d_mat_Compare.Equal.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.NotEqual = ["NotEqual",3];
h3d_mat_Compare.NotEqual.toString = $estr;
h3d_mat_Compare.NotEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Greater = ["Greater",4];
h3d_mat_Compare.Greater.toString = $estr;
h3d_mat_Compare.Greater.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.GreaterEqual = ["GreaterEqual",5];
h3d_mat_Compare.GreaterEqual.toString = $estr;
h3d_mat_Compare.GreaterEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Less = ["Less",6];
h3d_mat_Compare.Less.toString = $estr;
h3d_mat_Compare.Less.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.LessEqual = ["LessEqual",7];
h3d_mat_Compare.LessEqual.toString = $estr;
h3d_mat_Compare.LessEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxClasses["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"] };
h3d_mat_StencilOp.Keep = ["Keep",0];
h3d_mat_StencilOp.Keep.toString = $estr;
h3d_mat_StencilOp.Keep.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Zero = ["Zero",1];
h3d_mat_StencilOp.Zero.toString = $estr;
h3d_mat_StencilOp.Zero.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Replace = ["Replace",2];
h3d_mat_StencilOp.Replace.toString = $estr;
h3d_mat_StencilOp.Replace.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Increment = ["Increment",3];
h3d_mat_StencilOp.Increment.toString = $estr;
h3d_mat_StencilOp.Increment.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.IncrementWrap = ["IncrementWrap",4];
h3d_mat_StencilOp.IncrementWrap.toString = $estr;
h3d_mat_StencilOp.IncrementWrap.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Decrement = ["Decrement",5];
h3d_mat_StencilOp.Decrement.toString = $estr;
h3d_mat_StencilOp.Decrement.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.DecrementWrap = ["DecrementWrap",6];
h3d_mat_StencilOp.DecrementWrap.toString = $estr;
h3d_mat_StencilOp.DecrementWrap.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Invert = ["Invert",7];
h3d_mat_StencilOp.Invert.toString = $estr;
h3d_mat_StencilOp.Invert.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxClasses["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"] };
h3d_mat_MipMap.None = ["None",0];
h3d_mat_MipMap.None.toString = $estr;
h3d_mat_MipMap.None.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.Nearest = ["Nearest",1];
h3d_mat_MipMap.Nearest.toString = $estr;
h3d_mat_MipMap.Nearest.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.Linear = ["Linear",2];
h3d_mat_MipMap.Linear.toString = $estr;
h3d_mat_MipMap.Linear.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxClasses["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"] };
h3d_mat_Filter.Nearest = ["Nearest",0];
h3d_mat_Filter.Nearest.toString = $estr;
h3d_mat_Filter.Nearest.__enum__ = h3d_mat_Filter;
h3d_mat_Filter.Linear = ["Linear",1];
h3d_mat_Filter.Linear.toString = $estr;
h3d_mat_Filter.Linear.__enum__ = h3d_mat_Filter;
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxClasses["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"] };
h3d_mat_Wrap.Clamp = ["Clamp",0];
h3d_mat_Wrap.Clamp.toString = $estr;
h3d_mat_Wrap.Clamp.__enum__ = h3d_mat_Wrap;
h3d_mat_Wrap.Repeat = ["Repeat",1];
h3d_mat_Wrap.Repeat.toString = $estr;
h3d_mat_Wrap.Repeat.__enum__ = h3d_mat_Wrap;
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxClasses["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub"] };
h3d_mat_Operation.Add = ["Add",0];
h3d_mat_Operation.Add.toString = $estr;
h3d_mat_Operation.Add.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.Sub = ["Sub",1];
h3d_mat_Operation.Sub.toString = $estr;
h3d_mat_Operation.Sub.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.ReverseSub = ["ReverseSub",2];
h3d_mat_Operation.ReverseSub.toString = $estr;
h3d_mat_Operation.ReverseSub.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub];
var h3d_mat_TextureFlags = $hxClasses["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize"] };
h3d_mat_TextureFlags.Target = ["Target",0];
h3d_mat_TextureFlags.Target.toString = $estr;
h3d_mat_TextureFlags.Target.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Cube = ["Cube",1];
h3d_mat_TextureFlags.Cube.toString = $estr;
h3d_mat_TextureFlags.Cube.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.MipMapped = ["MipMapped",2];
h3d_mat_TextureFlags.MipMapped.toString = $estr;
h3d_mat_TextureFlags.MipMapped.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.ManualMipMapGen = ["ManualMipMapGen",3];
h3d_mat_TextureFlags.ManualMipMapGen.toString = $estr;
h3d_mat_TextureFlags.ManualMipMapGen.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.IsNPOT = ["IsNPOT",4];
h3d_mat_TextureFlags.IsNPOT.toString = $estr;
h3d_mat_TextureFlags.IsNPOT.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.NoAlloc = ["NoAlloc",5];
h3d_mat_TextureFlags.NoAlloc.toString = $estr;
h3d_mat_TextureFlags.NoAlloc.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Dynamic = ["Dynamic",6];
h3d_mat_TextureFlags.Dynamic.toString = $estr;
h3d_mat_TextureFlags.Dynamic.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.AlphaPremultiplied = ["AlphaPremultiplied",7];
h3d_mat_TextureFlags.AlphaPremultiplied.toString = $estr;
h3d_mat_TextureFlags.AlphaPremultiplied.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.WasCleared = ["WasCleared",8];
h3d_mat_TextureFlags.WasCleared.toString = $estr;
h3d_mat_TextureFlags.WasCleared.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Loading = ["Loading",9];
h3d_mat_TextureFlags.Loading.toString = $estr;
h3d_mat_TextureFlags.Loading.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Serialize = ["Serialize",10];
h3d_mat_TextureFlags.Serialize.toString = $estr;
h3d_mat_TextureFlags.Serialize.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = ["h3d","mat","Defaults"];
var h3d_mat_DepthBuffer = function(width,height) {
	this.width = width;
	this.height = height;
	if(width >= 0) {
		this.b = h3d_Engine.CURRENT.driver.allocDepthBuffer(this);
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = ["h3d","mat","DepthBuffer"];
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.driver.disposeDepthBuffer(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = ["h3d","mat","Material"];
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v[1]) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 3:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 4:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 5:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 6:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function(file) {
	this.file = file;
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = ["h3d","mat","MaterialDatabase"];
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase("materials.json");
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = ["h3d","mat","MaterialSetup"];
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_DefaultRenderer();
	}
	,createLightSystem: function() {
		return new h3d_pass_LightSystem();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.set_colorMask(15);
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = ["h3d","mat","Pass"];
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b[1]) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			break;
		case 3:
			var src3 = h3d_mat_Blend.OneMinusDstColor;
			var dst3 = h3d_mat_Blend.One;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			break;
		case 4:
			var src4 = h3d_mat_Blend.DstColor;
			var dst4 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			break;
		case 5:
			var src5 = h3d_mat_Blend.Zero;
			var dst5 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			break;
		case 6:
			var src6 = h3d_mat_Blend.One;
			var dst6 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v[1];
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v[1] << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v[1] << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v[1] << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v[1] << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v[1] << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -12582913 | v[1] << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -50331649 | v[1] << 24;
		return this.blendAlphaOp = v;
	}
	,set_colorMask: function(v) {
		this.bits = this.bits & -1006632961 | (v & 15) << 26;
		return this.colorMask = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.backRefBits = 0;
	this.frontRefBits = 0;
	this.setFunc(h3d_mat_Face.Both,h3d_mat_Compare.Always,0,255);
	this.setOp(h3d_mat_Face.Both,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setMask(h3d_mat_Face.Both,255);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = ["h3d","mat","Stencil"];
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.prototype = {
	setOp: function(face,stfail,dpfail,dppass) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backSTfail(stfail);
				this.set_backDPfail(dpfail);
				this.set_backDPpass(dppass);
				break;
			case 2:
				this.set_frontSTfail(stfail);
				this.set_frontDPfail(dpfail);
				this.set_frontDPpass(dppass);
				break;
			case 3:
				this.set_frontSTfail(this.set_backSTfail(stfail));
				this.set_frontDPfail(this.set_backDPfail(dpfail));
				this.set_frontDPpass(this.set_backDPpass(dppass));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,setMask: function(face,mask) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backWriteMask(mask);
				break;
			case 2:
				this.set_frontWriteMask(mask);
				break;
			case 3:
				this.set_frontWriteMask(this.set_backWriteMask(mask));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,setFunc: function(face,test,ref,mask) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backTest(test);
				this.set_backRef(ref);
				this.set_backReadMask(mask);
				break;
			case 2:
				this.set_frontTest(test);
				this.set_frontRef(ref);
				this.set_frontReadMask(mask);
				break;
			case 3:
				this.set_frontTest(this.set_backTest(test));
				this.set_frontRef(this.set_backRef(ref));
				this.set_frontReadMask(this.set_backReadMask(mask));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v[1];
		return this.frontTest = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -57 | v[1] << 3;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -449 | v[1] << 6;
		return this.frontDPfail = v;
	}
	,set_frontDPpass: function(v) {
		this.opBits = this.opBits & -3585 | v[1] << 9;
		return this.frontDPpass = v;
	}
	,set_frontRef: function(v) {
		this.frontRefBits = this.frontRefBits & -256 | v & 255;
		return this.frontRef = v;
	}
	,set_frontReadMask: function(v) {
		this.frontRefBits = this.frontRefBits & -65281 | (v & 255) << 8;
		return this.frontReadMask = v;
	}
	,set_frontWriteMask: function(v) {
		this.frontRefBits = this.frontRefBits & -16711681 | (v & 255) << 16;
		return this.frontWriteMask = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v[1] << 12;
		return this.backTest = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -229377 | v[1] << 15;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -1835009 | v[1] << 18;
		return this.backDPfail = v;
	}
	,set_backDPpass: function(v) {
		this.opBits = this.opBits & -14680065 | v[1] << 21;
		return this.backDPpass = v;
	}
	,set_backRef: function(v) {
		this.backRefBits = this.backRefBits & -256 | v & 255;
		return this.backRef = v;
	}
	,set_backReadMask: function(v) {
		this.backRefBits = this.backRefBits & -65281 | (v & 255) << 8;
		return this.backReadMask = v;
	}
	,set_backWriteMask: function(v) {
		this.backRefBits = this.backRefBits & -16711681 | (v & 255) << 16;
		return this.backWriteMask = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxClasses["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","ALPHA8","ALPHA16F","ALPHA32F"] };
hxd_PixelFormat.ARGB = ["ARGB",0];
hxd_PixelFormat.ARGB.toString = $estr;
hxd_PixelFormat.ARGB.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.BGRA = ["BGRA",1];
hxd_PixelFormat.BGRA.toString = $estr;
hxd_PixelFormat.BGRA.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA = ["RGBA",2];
hxd_PixelFormat.RGBA.toString = $estr;
hxd_PixelFormat.RGBA.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA16F = ["RGBA16F",3];
hxd_PixelFormat.RGBA16F.toString = $estr;
hxd_PixelFormat.RGBA16F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA32F = ["RGBA32F",4];
hxd_PixelFormat.RGBA32F.toString = $estr;
hxd_PixelFormat.RGBA32F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA8 = ["ALPHA8",5];
hxd_PixelFormat.ALPHA8.toString = $estr;
hxd_PixelFormat.ALPHA8.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA16F = ["ALPHA16F",6];
hxd_PixelFormat.ALPHA16F.toString = $estr;
hxd_PixelFormat.ALPHA16F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA32F = ["ALPHA32F",7];
hxd_PixelFormat.ALPHA32F.toString = $estr;
hxd_PixelFormat.ALPHA32F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.ALPHA8,hxd_PixelFormat.ALPHA16F,hxd_PixelFormat.ALPHA32F];
var h3d_mat_Texture = function(w,h,flags,format,allocPos) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT[1];
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target[1]) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc[1]) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = ["h3d","mat","Texture"];
h3d_mat_Texture.fromBitmap = function(bmp,allocPos) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height,null,null,allocPos);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromPixels = function(pixels,allocPos) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height,null,null,allocPos);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null,null,allocPos);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.genChecker = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.checkerTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.checkerTextureKeys.h[size] = k;
	}
	var t1 = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t2 = t1;
	var size1 = size;
	t1.realloc = function() {
		h3d_mat_Texture.allocChecker(t2,size1);
	};
	engine.resCache.set(k,t1);
	return t1;
};
h3d_mat_Texture.genNoise = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.noiseTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.noiseTextureKeys.h[size] = k;
	}
	var t1 = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t2 = t1;
	var size1 = size;
	t1.realloc = function() {
		h3d_mat_Texture.allocNoise(t2,size1);
	};
	engine.resCache.set(k,t1);
	return t1;
};
h3d_mat_Texture.allocNoise = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = 0;
		var _g2 = size;
		while(_g3 < _g2) {
			var y = _g3++;
			var n = Std.random(256);
			b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.allocChecker = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	b.clear(-1);
	var _g1 = 0;
	var _g = size >> 1;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = 0;
		var _g2 = size >> 1;
		while(_g3 < _g2) {
			var y = _g3++;
			b.setPixel(x,y,-16777216);
			b.setPixel(x + (size >> 1),y + (size >> 1),-16777216);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.prototype = {
	alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m[1];
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f[1] << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w[1] << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT[1];
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT[1]);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc[1]) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
		var k = 0;
		var b = color & 255;
		var g = color >> 8 & 255;
		var r = color >> 16 & 255;
		var a = alpha * 255 | 0;
		if(a < 0) {
			a = 0;
		} else if(a > 255) {
			a = 255;
		}
		var _g = h3d_mat_Texture.nativeFormat;
		switch(_g[1]) {
		case 1:
			var tmp = r;
			r = b;
			b = tmp;
			break;
		case 2:
			break;
		default:
			throw new js__$Boot_HaxeError("TODO");
		}
		var _g2 = 0;
		var _g1 = this.width * this.height;
		while(_g2 < _g1) {
			var i = _g2++;
			p.bytes.b[k++] = r & 255;
			p.bytes.b[k++] = g & 255;
			p.bytes.b[k++] = b & 255;
			p.bytes.b[k++] = a & 255;
		}
		var _g21 = 0;
		var _g11 = (this.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 6 : 1;
		while(_g21 < _g11) {
			var i1 = _g21++;
			this.uploadPixels(p,0,i1);
		}
		p.dispose();
	}
	,checkMipMapGen: function(mipLevel,side) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen[1]) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube[1]) == 0 || side == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,side) {
		if(side == null) {
			side = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,side);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		this.checkMipMapGen(mipLevel,side);
	}
	,uploadPixels: function(pixels,mipLevel,side) {
		if(side == null) {
			side = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,side);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		this.checkMipMapGen(mipLevel,side);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = ["h3d","pass","Base"];
h3d_pass_Base.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,draw: function(passes) {
		return passes;
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass(Std.string(this),new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
	this.plan = h3d_prim_Plan2D.get();
	this.engine = h3d_Engine.CURRENT;
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = ["h3d","pass","ScreenFx"];
h3d_pass_ScreenFx.prototype = {
	render: function() {
		var rts = this.manager.compileShaders(this.shaders);
		this.engine.selectMaterial(this.pass);
		this.engine.selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.engine.uploadShaderBuffers(this.buffers,0);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.plan.render(this.engine);
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(quality,passes,sigma,gain) {
	if(gain == null) {
		gain = 1.;
	}
	if(sigma == null) {
		sigma = 1.;
	}
	if(passes == null) {
		passes = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_quality(quality);
	this.passes = passes;
	this.set_sigma(sigma);
	this.set_gain(gain);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = ["h3d","pass","Blur"];
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_quality: function(q) {
		this.values = null;
		return this.quality = q;
	}
	,set_sigma: function(s) {
		this.values = null;
		return this.sigma = s;
	}
	,set_gain: function(s) {
		this.values = null;
		return this.gain = s;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		var tot = 0.;
		var _g1 = 0;
		var _g = this.quality + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var g = this.gauss(i,this.sigma);
			this.values[i] = g;
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		if(this.passes > 0) {
			tot /= Math.pow(this.gain,1 / this.passes);
		}
		var _g11 = 0;
		var _g2 = this.quality + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.values[i1] /= tot;
		}
	}
	,apply: function(src,tmp,output,isDepth) {
		if(isDepth == null) {
			isDepth = false;
		}
		if((this.quality <= 0 || this.passes <= 0 || this.sigma <= 0) && this.shader.fixedColor__ == null) {
			return;
		}
		if(output == null) {
			output = src;
		}
		var alloc = tmp == null;
		if(alloc) {
			tmp = new h3d_mat_Texture(src.width,src.height,[h3d_mat_TextureFlags.Target]);
		}
		if(this.values == null) {
			this.calcValues();
		}
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.quality + 1;
		this.shader.values__ = this.values;
		var _this1 = this.shader;
		_this1.constModified = true;
		_this1.isDepth__ = isDepth;
		if(this.depthBlur != null) {
			this.shader.cameraInverseViewProj__ = this.depthBlur.camera.getInverseViewProj();
		}
		var outDepth = output.depthBuffer;
		var tmpDepth = tmp.depthBuffer;
		output.depthBuffer = null;
		tmp.depthBuffer = null;
		var _g1 = 0;
		var _g = this.passes;
		while(_g1 < _g) {
			var i = _g1++;
			this.shader.texture__ = src;
			var _this2 = this.shader.pixel__;
			_this2.x = 1 / src.width;
			_this2.y = 0;
			_this2.z = 0.;
			_this2.w = 1.;
			this.engine.pushTarget(tmp);
			this.render();
			this.engine.popTarget();
			this.shader.texture__ = tmp;
			var _this3 = this.shader.pixel__;
			_this3.x = 0;
			_this3.y = 1 / tmp.height;
			_this3.z = 0.;
			_this3.w = 1.;
			this.engine.pushTarget(output);
			this.render();
			this.engine.popTarget();
		}
		output.depthBuffer = outDepth;
		tmp.depthBuffer = tmpDepth;
		if(alloc) {
			tmp.dispose();
		}
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = ["hxsl","Shader"];
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw new js__$Boot_HaxeError(Type.getClassName(cl) + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g[1]) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 15:
				var count = _g[2];
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel[1]) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this));
	}
	,__class__: hxsl_Shader
};
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = ["h3d","pass","_Border","BorderShader"];
h3d_pass__$Border_BorderShader.__super__ = hxsl_Shader;
h3d_pass__$Border_BorderShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.plan = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = ["h3d","pass","Border"];
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.plan.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_shader_ScreenShader = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = ["h3d","shader","ScreenShader"];
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = ["h3d","pass","_Copy","CopyShader"];
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Default = function(name) {
	this.sortPasses = true;
	this.textureCount = 1;
	this.shaderCount = 1;
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.shaderIdMap = [];
	this.textureIdMap = [];
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = ["h3d","pass","Default"];
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var p = passes;
		var lightInit = false;
		while(p != null) {
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders);
			p.shaders = shaders;
			var t = p.shader.fragment.textures2D;
			if(t == null) {
				p.texture = 0;
			} else {
				var t1;
				if(t.perObjectGlobal != null) {
					var v = this.manager.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path);
					}
					var _g = t.type;
					t1 = _g[1] == 15 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && false) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
			p = p.next;
		}
	}
	,uploadParams: function() {
		this.manager.fillParams(this.cachedBuffer,this.ctx.drawPass.shader,this.ctx.drawPass.shaders);
		this.ctx.engine.uploadShaderBuffers(this.cachedBuffer,1);
		this.ctx.engine.uploadShaderBuffers(this.cachedBuffer,2);
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes) {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		var p = passes;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		while(p != null) {
			if(this.shaderIdMap[p.shader.id] < shaderStart) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
			p = p.next;
		}
		if(this.sortPasses) {
			var list = passes;
			if(list == null) {
				passes = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g11 = 0;
						var _g2 = insize;
						while(_g11 < _g2) {
							var i = _g11++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else {
								var passes1;
								if(!(qsize == 0 || q == null)) {
									var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
									passes1 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
								} else {
									passes1 = true;
								}
								if(passes1) {
									e = p1;
									p1 = p1.next;
									--psize;
								} else {
									e = q;
									q = q.next;
									--qsize;
								}
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				passes = list;
			}
		}
		this.ctx.uploadParams = $bind(this,this.uploadParams);
		var p2 = passes;
		var buf = this.cachedBuffer;
		var prevShader = null;
		var drawTri = 0;
		var drawCalls = 0;
		var shaderSwitches = 0;
		if(this.ctx.engine.driver.logEnable) {
			drawTri = this.ctx.engine.drawTriangles;
			drawCalls = this.ctx.engine.drawCalls;
			shaderSwitches = this.ctx.engine.shaderSwitches;
		}
		while(p2 != null) {
			var v = p2.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p2.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p2.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p2.shader) {
				prevShader = p2.shader;
				this.ctx.engine.selectShader(p2.shader);
				if(buf == null) {
					buf = this.cachedBuffer = new h3d_shader_Buffers(p2.shader);
				} else {
					var s = p2.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p2.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p2.pass.dynamicParameters) {
				this.manager.fillParams(buf,p2.shader,p2.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
			}
			this.drawObject(p2);
			p2 = p2.next;
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
		return passes;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this7;
		var this8 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this9;
		var this10 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this10;
		var this11 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this12;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		var v6 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v6;
		var v7 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v7;
		var v8 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v8;
		var v9 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v9;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = ["h3d","pass","_HardwarePick","FixedColor"];
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	this.ambientLight = new h3d_Vector(0.5,0.5,0.5);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.pass.LightSystem"] = h3d_pass_LightSystem;
h3d_pass_LightSystem.__name__ = ["h3d","pass","LightSystem"];
h3d_pass_LightSystem.prototype = {
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = (value instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		var l = ctx.lights;
		var prev = null;
		var frustum = new h3d_col_Frustum(ctx.camera.m);
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(!frustum.hasSphere(s)) {
				if(prev == null) {
					ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
		if(this.shadowLight == null || this.shadowLight.parent == null) {
			var l1 = ctx.lights;
			while(l1 != null) {
				var dl = (l1 instanceof h3d_scene_DirLight) ? l1 : null;
				if(dl != null) {
					this.shadowLight = dl;
					break;
				}
				l1 = l1.next;
			}
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_pass_LightSystem
};
var h3d_pass_Object = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.Object"] = h3d_pass_Object;
h3d_pass_Object.__name__ = ["h3d","pass","Object"];
h3d_pass_Object.prototype = {
	__class__: h3d_pass_Object
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = ["h3d","pass","ShaderManager"];
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type[1]) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var n = type[2];
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 12:
			var vl = type[2];
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 14:
			switch(type[2][1]) {
			case 3:
				if(type[3][1] == 0) {
					var len = type[3][2];
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g1 = 0;
					var _g2 = count;
					while(_g1 < _g2) {
						var i = _g1++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(type[2][2] == 4) {
					if(type[2][3][1] == 1) {
						if(type[3][1] == 0) {
							var len1 = type[3][2];
							var v3 = v;
							var _g11 = 0;
							var _g3 = len1;
							while(_g11 < _g3) {
								var i1 = _g11++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(type[3][1] == 0) {
						var len2 = type[3][2];
						var t = type[2];
						var v4 = v;
						var size1 = 0;
						var _g12 = 0;
						var _g4 = len2;
						while(_g12 < _g4) {
							var i2 = _g12++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(type[3][1] == 0) {
					var len3 = type[3][2];
					var t1 = type[2];
					var v5 = v;
					var size2 = 0;
					var _g13 = 0;
					var _g5 = len3;
					while(_g13 < _g5) {
						var i3 = _g13++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(type[3][1] == 0) {
					var len4 = type[3][2];
					var v6 = v;
					var _g14 = 0;
					var _g6 = len4;
					while(_g14 < _g6) {
						var i4 = _g14++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(type[3][1] == 0) {
					var len5 = type[3][2];
					var t2 = type[2];
					var v7 = v;
					var size3 = 0;
					var _g15 = 0;
					var _g7 = len5;
					while(_g15 < _g7) {
						var i5 = _g15++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var g = s1.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,buf1.globals,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,buf1.globals,g.pos);
			g = g.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var g1 = s2.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.h[g1.gid];
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,buf2.globals,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,buf2.globals,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		while(p != null) {
			if(p.type == hxsl_Type.TFloat && p.perObjectGlobal == null) {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				buf1.params[p.pos] = si.s.getParamFloatValue(p.index);
				p = p.next;
				continue;
			}
			var v;
			if(p.perObjectGlobal != null) {
				var v1 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path);
				}
				var _g = p.type;
				v = _g[1] == 15 ? v1.texture : v1;
			} else {
				var si1 = shaders;
				var n1 = p.instance;
				while(--n1 > 0) si1 = si1.next;
				var v2 = si1.s.getParamValue(p.index);
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si1.s) + "." + p.name);
				}
				v = v2;
			}
			_gthis.fillRec(v,p.type,buf1.params,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures2D;
		while(p1 != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			var t;
			if(p1.perObjectGlobal != null) {
				var v3 = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v3 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path);
				}
				var _g1 = p1.type;
				t = _g1[1] == 15 ? v3.texture : v3;
			} else {
				var si2 = shaders;
				var n2 = p1.instance;
				while(--n2 > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p1.index);
				if(v4 == null && !opt) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p1.name);
				}
				t = v4;
			}
			if(t == null) {
				t = h3d_mat_Texture.fromColor(16711935);
			}
			buf1.tex[tid++] = t;
			p1 = p1.next;
		}
		var p2 = s1.texturesCube;
		while(p2 != null) {
			var opt1 = !h3d_pass_ShaderManager.STRICT;
			var t1;
			if(p2.perObjectGlobal != null) {
				var v5 = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path);
				}
				var _g2 = p2.type;
				t1 = _g2[1] == 15 ? v5.texture : v5;
			} else {
				var si3 = shaders;
				var n3 = p2.instance;
				while(--n3 > 0) si3 = si3.next;
				var v6 = si3.s.getParamValue(p2.index);
				if(v6 == null && !opt1) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p2.name);
				}
				t1 = v6;
			}
			if(t1 == null) {
				t1 = h3d_mat_Texture.defaultCubeTexture();
			}
			buf1.tex[tid++] = t1;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		while(p3 != null) {
			if(p3.type == hxsl_Type.TFloat && p3.perObjectGlobal == null) {
				var si4 = shaders;
				var n4 = p3.instance;
				while(--n4 > 0) si4 = si4.next;
				buf2.params[p3.pos] = si4.s.getParamFloatValue(p3.index);
				p3 = p3.next;
				continue;
			}
			var v7;
			if(p3.perObjectGlobal != null) {
				var v8 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v8 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path);
				}
				var _g3 = p3.type;
				v7 = _g3[1] == 15 ? v8.texture : v8;
			} else {
				var si5 = shaders;
				var n5 = p3.instance;
				while(--n5 > 0) si5 = si5.next;
				var v9 = si5.s.getParamValue(p3.index);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si5.s) + "." + p3.name);
				}
				v7 = v9;
			}
			_gthis.fillRec(v7,p3.type,buf2.params,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures2D;
		while(p4 != null) {
			var opt2 = !h3d_pass_ShaderManager.STRICT;
			var t2;
			if(p4.perObjectGlobal != null) {
				var v10 = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v10 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path);
				}
				var _g4 = p4.type;
				t2 = _g4[1] == 15 ? v10.texture : v10;
			} else {
				var si6 = shaders;
				var n6 = p4.instance;
				while(--n6 > 0) si6 = si6.next;
				var v11 = si6.s.getParamValue(p4.index);
				if(v11 == null && !opt2) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si6.s) + "." + p4.name);
				}
				t2 = v11;
			}
			if(t2 == null) {
				t2 = h3d_mat_Texture.fromColor(16711935);
			}
			buf2.tex[tid1++] = t2;
			p4 = p4.next;
		}
		var p5 = s2.texturesCube;
		while(p5 != null) {
			var opt3 = !h3d_pass_ShaderManager.STRICT;
			var t3;
			if(p5.perObjectGlobal != null) {
				var v12 = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v12 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path);
				}
				var _g5 = p5.type;
				t3 = _g5[1] == 15 ? v12.texture : v12;
			} else {
				var si7 = shaders;
				var n7 = p5.instance;
				while(--n7 > 0) si7 = si7.next;
				var v13 = si7.s.getParamValue(p5.index);
				if(v13 == null && !opt3) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p5.name);
				}
				t3 = v13;
			}
			if(t3 == null) {
				t3 = h3d_mat_Texture.defaultCubeTexture();
			}
			buf2.tex[tid1++] = t3;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders) {
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_ShadowMap = function(size) {
	if(size == null) {
		size = 1024;
	}
	this.bias = 0.01;
	this.power = 10.0;
	h3d_pass_Default.call(this,"shadow");
	this.set_size(size);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
	this.color = new h3d_Vector();
	this.blur = new h3d_pass_Blur(2,3);
	this.border = new h3d_pass_Border(size,size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.ShadowMap"] = h3d_pass_ShadowMap;
h3d_pass_ShadowMap.__name__ = ["h3d","pass","ShadowMap"];
h3d_pass_ShadowMap.__super__ = h3d_pass_Default;
h3d_pass_ShadowMap.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return this.size = s;
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var p_x = b.xMin;
			var p_y = b.yMin;
			var p_z = b.zMin;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var p_x1 = b.xMin;
			var p_y1 = b.yMin;
			var p_z1 = b.zMax;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var p_x2 = b.xMin;
			var p_y2 = b.yMax;
			var p_z2 = b.zMin;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var p_x3 = b.xMin;
			var p_y3 = b.yMax;
			var p_z3 = b.zMax;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var p_x4 = b.xMax;
			var p_y4 = b.yMin;
			var p_z4 = b.zMin;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var p_x5 = b.xMax;
			var p_y5 = b.yMin;
			var p_z5 = b.zMax;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var p_x6 = b.xMax;
			var p_y6 = b.yMax;
			var p_z6 = b.zMin;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var p_x7 = b.xMax;
			var p_y7 = b.yMax;
			var p_z7 = b.zMax;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		var cameraBounds = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.ctx.camera.getFrustumCorners();
		while(_g < _g1.length) {
			var pt = _g1[_g];
			++_g;
			var m1 = camera.mcam;
			var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
			var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
			var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
			var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
			pt.x = px8;
			pt.y = py8;
			pt.z = pz8;
			pt.w = pw;
			var x = pt.x;
			var y = pt.y;
			var z = pt.z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
		}
		bounds.intersection(bounds,cameraBounds);
		bounds.scaleCenter(1.01);
	}
	,getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,setGlobals: function() {
		h3d_pass_Default.prototype.setGlobals.call(this);
		var _this = this.lightCamera.orthoBounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		this.calcShadowBounds(this.lightCamera);
		this.lightCamera.update();
		var v = this.lightCamera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,draw: function(passes) {
		var texture = this.ctx.textures.allocTarget("shadowMap",this.size,this.size,false);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		var ct = this.ctx.camera.target;
		var slight = this.ctx.lightSystem.shadowLight;
		if(slight == null) {
			var _this = this.lightCamera.target;
			_this.x = 0;
			_this.y = 0;
			_this.z = -1;
			_this.w = 1.;
		} else {
			var _this1 = this.lightCamera.target;
			_this1.x = slight.direction.x;
			_this1.y = slight.direction.y;
			_this1.z = slight.direction.z;
			_this1.w = 1.;
			this.lightCamera.target.normalize();
		}
		this.lightCamera.target.x += ct.x;
		this.lightCamera.target.y += ct.y;
		this.lightCamera.target.z += ct.z;
		var _this2 = this.lightCamera.pos;
		_this2.x = ct.x;
		_this2.y = ct.y;
		_this2.z = ct.z;
		_this2.w = ct.w;
		this.lightCamera.update();
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.blur.quality > 0 && this.blur.passes > 0) {
			this.blur.apply(texture,this.ctx.textures.allocTarget("tmpBlur",this.size,this.size,false),null,true);
		}
		this.ctx.setGlobalID(this.shadowMapId,{ texture : texture});
		this.ctx.setGlobalID(this.shadowProjId,this.lightCamera.m);
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
		return passes;
	}
	,__class__: h3d_pass_ShadowMap
});
var h3d_prim_Plan2D = function() {
};
$hxClasses["h3d.prim.Plan2D"] = h3d_prim_Plan2D;
h3d_prim_Plan2D.__name__ = ["h3d","prim","Plan2D"];
h3d_prim_Plan2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plan2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plan2D();
		engine.resCache.set(h3d_prim_Plan2D,inst);
	}
	return inst;
};
h3d_prim_Plan2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plan2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plan2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = ["h3d","prim","RawPrimitive"];
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_DepthPass = function() {
	this.reduceSize = 0;
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.DepthPass"] = h3d_scene_DepthPass;
h3d_scene_DepthPass.__name__ = ["h3d","scene","DepthPass"];
h3d_scene_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width >> this.reduceSize,this.ctx.engine.height >> this.reduceSize,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
		return passes;
	}
	,__class__: h3d_scene_DepthPass
});
var h3d_scene_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.NormalPass"] = h3d_scene_NormalPass;
h3d_scene_NormalPass.__name__ = ["h3d","scene","NormalPass"];
h3d_scene_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes) {
		var texture = this.ctx.textures.allocTarget("normalMal",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
		return passes;
	}
	,__class__: h3d_scene_NormalPass
});
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = ["h3d","scene","Renderer"];
h3d_scene_Renderer.prototype = {
	depthSort: function(passes,frontToBack) {
		if(frontToBack == null) {
			frontToBack = false;
		}
		var p = passes;
		var cam = this.ctx.camera.m;
		while(p != null) {
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
			p = p.next;
		}
		if(frontToBack) {
			var list = passes;
			if(list == null) {
				return null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.depth > q.depth ? 1 : -1) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				return list;
			}
		} else {
			var list1 = passes;
			if(list1 == null) {
				return null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g11 = 0;
						var _g2 = insize1;
						while(_g11 < _g2) {
							var i1 = _g11++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.depth > q1.depth ? -1 : 1) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				return list1;
			}
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		var _this = this.passObjects;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	}
	,get: function(name) {
		var _this = this.passObjects;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return null;
		}
		p.rendered = true;
		return p.passes;
	}
	,getSort: function(name,front2Back) {
		if(front2Back == null) {
			front2Back = false;
		}
		var _this = this.passObjects;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return null;
		}
		p.passes = this.depthSort(p.passes,front2Back);
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g2 = 0;
		while(_g2 < passes.length) {
			var p1 = passes[_g2];
			++_g2;
			var key = p1.name;
			var _this = this.passObjects;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,p1);
			} else {
				_this.h[key] = p1;
			}
		}
		this.ctx.textures.begin();
		this.render();
		this.resetTarget();
		var _g3 = 0;
		while(_g3 < passes.length) {
			var p2 = passes[_g3];
			++_g3;
			var key1 = p2.name;
			var _this1 = this.passObjects;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,null);
			} else {
				_this1.h[key1] = null;
			}
		}
	}
	,__class__: h3d_scene_Renderer
};
var h3d_scene_DefaultRenderer = function() {
	this.shadow = new h3d_pass_ShadowMap(1024);
	this.normal = new h3d_scene_NormalPass();
	this.depth = new h3d_scene_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.DefaultRenderer"] = h3d_scene_DefaultRenderer;
h3d_scene_DefaultRenderer.__name__ = ["h3d","scene","DefaultRenderer"];
h3d_scene_DefaultRenderer.__super__ = h3d_scene_Renderer;
h3d_scene_DefaultRenderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes) {
		p.draw(passes);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.getSort("default",true));
		this.renderPass(this.defaultPass,this.getSort("alpha"));
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_DefaultRenderer
});
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = ["h3d","scene","Object"];
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = (this instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return (p instanceof h3d_scene_Scene) ? p : null;
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.saveToMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _g = this.absPos;
				_g._41 += this.follow.absPos._41;
				var _g1 = this.absPos;
				_g1._42 += this.follow.absPos._42;
				var _g2 = this.absPos;
				_g2._43 += this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this1 = this.absPos;
			var a1 = this.defaultTransform;
			var b1 = this.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f1 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f1;
					} else {
						c.flags &= ~f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = 1e10;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = ["h3d","scene","Light"];
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_DirLight = function(dir,parent) {
	this.dshader = new h3d_shader_DirLight();
	this.direction = dir;
	h3d_scene_Light.call(this,this.dshader,parent);
	this.priority = 100;
};
$hxClasses["h3d.scene.DirLight"] = h3d_scene_DirLight;
h3d_scene_DirLight.__name__ = ["h3d","scene","DirLight"];
h3d_scene_DirLight.__super__ = h3d_scene_Light;
h3d_scene_DirLight.prototype = $extend(h3d_scene_Light.prototype,{
	emit: function(ctx) {
		var _this = this.dshader.direction__;
		_this.x = this.direction.x;
		_this.y = this.direction.y;
		_this.z = this.direction.z;
		_this.w = 1.;
		this.dshader.direction__.normalize();
		h3d_scene_Light.prototype.emit.call(this,ctx);
	}
	,__class__: h3d_scene_DirLight
});
var h3d_scene_Mesh = function(prim,mat,parent) {
	h3d_scene_Object.call(this,parent);
	this.primitive = prim;
	if(mat == null) {
		mat = new h3d_mat_Material(null);
	}
	this.material = mat;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = ["h3d","scene","Mesh"];
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = ["h3d","scene","Interactive"];
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			if(!e.cancel && this.cursor != null) {
				hxd_System.setCursor(this.cursor);
			}
			break;
		case 4:
			this.mouseDownButton = -1;
			this.onOut(e);
			if(!e.cancel) {
				hxd_System.setCursor(hxd_Cursor.Default);
			}
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				e.kind = hxd_EventKind.ERelease;
				this.onRelease(e);
				e.kind = hxd_EventKind.EReleaseOutside;
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.isOver() && this.cursor != null) {
			hxd_System.setCursor(this.cursor);
		}
		return c;
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentOver == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = ["h3d","scene","_RenderContext","SharedGlobal"];
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = ["h3d","scene","RenderContext"];
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.uploadParams = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.pool;
		if(o == null) {
			o = new h3d_pass_Object();
			o.nextAlloc = this.firstAlloc;
			this.firstAlloc = o;
		} else {
			this.pool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		this.uploadParams = null;
		var p = this.firstAlloc;
		while(p != null) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p = p.nextAlloc;
		}
		this.pool = this.firstAlloc;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function(name,passes) {
	this.name = name;
	this.passes = passes;
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = ["h3d","scene","PassObjects"];
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Scene = function() {
	h3d_scene_Object.call(this,null);
	this.stage = hxd_Stage.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = ["h3d","scene","Scene"];
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != null) {
			if((o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.stage.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.stage.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var p1_x = p0.x;
			var p1_y = p0.y;
			var p1_z = p0.z;
			var p2_x = p1.x;
			var p2_y = p1.y;
			var p2_z = p1.z;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var p_x = r1.px;
				var p_y = r1.py;
				var p_z = r1.pz;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var l_x = r1.lx;
				var l_y = r1.ly;
				var l_z = r1.lz;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hitPoint_x = r1.px + hit * r1.lx;
				var hitPoint_y = r1.py + hit * r1.ly;
				var hitPoint_z = r1.pz + hit * r1.lz;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g11 = this.hitInteractives;
				while(_g2 < _g11.length) {
					var i1 = _g11[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var p_x1 = r1.px;
						var p_y1 = r1.py;
						var p_z1 = r1.pz;
						var p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var l_x1 = r1.lx;
						var l_y1 = r1.ly;
						var l_z1 = r1.lz;
						var l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var hitPoint_x1 = r1.px + hit1 * r1.lx;
							var hitPoint_y1 = r1.py + hit1 * r1.ly;
							var hitPoint_z1 = r1.pz + hit1 * r1.lz;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i1.hitPoint;
					var p_x2 = _this.x;
					var p_y2 = _this.y;
					var p_z2 = _this.z;
					var p_w2 = _this.w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				this.hitInteractives = [];
			}
			return i2;
		}
		return null;
	}
	,addEventTarget: function(i) {
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i) && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g1 = 0;
					var _g = insize;
					while(_g1 < _g) {
						var i = _g1++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			passes.push(new h3d_scene_PassObjects(curPass.pass.name,curPass));
			curPass = p1;
		}
		this.ctx.lightSystem = this.lightSystem;
		this.lightSystem.initLights(this.ctx);
		this.renderer.process(passes);
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
	}
	,__class__: h3d_scene_Scene
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = ["h3d","shader","AmbientLight"];
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = ["h3d","shader","Base2d"];
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	_this1.x = 1;
	_this1.y = 1;
	_this1.z = 1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = ["h3d","shader","BaseMesh"];
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = ["h3d","shader","Blur"];
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.cameraInverseViewProj__;
		case 1:
			return this.texture__;
		case 2:
			return this.depthTexture__;
		case 3:
			return this.Quality__;
		case 4:
			return this.isDepth__;
		case 5:
			return this.values__;
		case 6:
			return this.pixel__;
		case 7:
			return this.hasFixedColor__;
		case 8:
			return this.smoothFixedColor__;
		case 9:
			return this.fixedColor__;
		case 10:
			return this.isDepthDependant__;
		case 11:
			return this.hasNormal__;
		case 12:
			return this.normalTexture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.textures2DCount + s.texturesCubeCount);
	this.tex = this1;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = ["h3d","shader","ShaderBuffers"];
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.textures2DCount + s.texturesCubeCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = ["h3d","shader","Buffers"];
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = ["h3d","shader","ColorAdd"];
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = ["h3d","shader","ColorKey"];
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = ["h3d","shader","ColorMatrix"];
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirLight = function() {
	this.direction__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1.;
};
$hxClasses["h3d.shader.DirLight"] = h3d_shader_DirLight;
h3d_shader_DirLight.__name__ = ["h3d","shader","DirLight"];
h3d_shader_DirLight.__super__ = hxsl_Shader;
h3d_shader_DirLight.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enableSpecular__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.direction__;
		case 2:
			return this.enableSpecular__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_DirLight
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = ["h3d","shader","LineShader"];
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
	h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.StandardDerivatives);
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = ["h3d","shader","NormalMap"];
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = ["h3d","shader","Shadow"];
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.perPixel__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.perPixel__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_Skin = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = ["h3d","shader","Skin"];
h3d_shader_Skin.__super__ = hxsl_Shader;
h3d_shader_Skin.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = ["h3d","shader","SpecularTexture"];
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = ["h3d","shader","Texture"];
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	_this.x = dx;
	_this.y = dy;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	_this1.x = sx;
	_this1.y = sy;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = ["h3d","shader","UVDelta"];
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = ["h3d","shader","VertexColorAlpha"];
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	_this.x = 0;
	_this.y = 0;
	_this.z = 1;
	_this.w = 1.;
	var _this1 = this.scale__;
	_this1.x = 1 / objectWidth;
	_this1.y = 1 / objectHeight;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = ["h3d","shader","VolumeDecal"];
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = ["haxe","EntryPoint"];
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return haxe_MainLoop.tick();
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(haxe_EntryPoint.run);
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -1;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = ["haxe","MainEvent"];
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = ["haxe","MainLoop"];
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g1 = 0;
			var _g = insize;
			while(_g1 < _g) {
				var i = _g1++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = new Date().getTime() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(e.nextRun < 0 || wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() {
	this.crc = -1;
};
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.prototype = {
	byte: function(b) {
		var tmp = (this.crc ^ b) & 255;
		var _g = 0;
		while(_g < 8) {
			var j = _g++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		this.crc = this.crc >>> 8 ^ tmp;
	}
	,update: function(b,pos,len) {
		var b1 = b.b.bufferValue;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = (this.crc ^ b1.bytes[i]) & 255;
			var _g2 = 0;
			while(_g2 < 8) {
				var j = _g2++;
				if((tmp & 1) == 1) {
					tmp = tmp >>> 1 ^ -306674912;
				} else {
					tmp >>>= 1;
				}
			}
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	,get: function() {
		return this.crc ^ -1;
	}
	,__class__: haxe_crypto_Crc32
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = ["haxe","ds","List"];
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = ["haxe","ds","_List","ListNode"];
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = ["haxe","ds","_List","ListIterator"];
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = (eof instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if((eof1 instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof haxe_io_Eof)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_macro_Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"] };
haxe_macro_Binop.OpAdd = ["OpAdd",0];
haxe_macro_Binop.OpAdd.toString = $estr;
haxe_macro_Binop.OpAdd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMult = ["OpMult",1];
haxe_macro_Binop.OpMult.toString = $estr;
haxe_macro_Binop.OpMult.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpDiv = ["OpDiv",2];
haxe_macro_Binop.OpDiv.toString = $estr;
haxe_macro_Binop.OpDiv.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpSub = ["OpSub",3];
haxe_macro_Binop.OpSub.toString = $estr;
haxe_macro_Binop.OpSub.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssign = ["OpAssign",4];
haxe_macro_Binop.OpAssign.toString = $estr;
haxe_macro_Binop.OpAssign.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpEq = ["OpEq",5];
haxe_macro_Binop.OpEq.toString = $estr;
haxe_macro_Binop.OpEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpNotEq = ["OpNotEq",6];
haxe_macro_Binop.OpNotEq.toString = $estr;
haxe_macro_Binop.OpNotEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGt = ["OpGt",7];
haxe_macro_Binop.OpGt.toString = $estr;
haxe_macro_Binop.OpGt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGte = ["OpGte",8];
haxe_macro_Binop.OpGte.toString = $estr;
haxe_macro_Binop.OpGte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLt = ["OpLt",9];
haxe_macro_Binop.OpLt.toString = $estr;
haxe_macro_Binop.OpLt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLte = ["OpLte",10];
haxe_macro_Binop.OpLte.toString = $estr;
haxe_macro_Binop.OpLte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAnd = ["OpAnd",11];
haxe_macro_Binop.OpAnd.toString = $estr;
haxe_macro_Binop.OpAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpOr = ["OpOr",12];
haxe_macro_Binop.OpOr.toString = $estr;
haxe_macro_Binop.OpOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpXor = ["OpXor",13];
haxe_macro_Binop.OpXor.toString = $estr;
haxe_macro_Binop.OpXor.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe_macro_Binop.OpBoolAnd.toString = $estr;
haxe_macro_Binop.OpBoolAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolOr = ["OpBoolOr",15];
haxe_macro_Binop.OpBoolOr.toString = $estr;
haxe_macro_Binop.OpBoolOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShl = ["OpShl",16];
haxe_macro_Binop.OpShl.toString = $estr;
haxe_macro_Binop.OpShl.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShr = ["OpShr",17];
haxe_macro_Binop.OpShr.toString = $estr;
haxe_macro_Binop.OpShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpUShr = ["OpUShr",18];
haxe_macro_Binop.OpUShr.toString = $estr;
haxe_macro_Binop.OpUShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMod = ["OpMod",19];
haxe_macro_Binop.OpMod.toString = $estr;
haxe_macro_Binop.OpMod.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe_macro_Binop; $x.toString = $estr; return $x; };
haxe_macro_Binop.OpInterval = ["OpInterval",21];
haxe_macro_Binop.OpInterval.toString = $estr;
haxe_macro_Binop.OpInterval.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpArrow = ["OpArrow",22];
haxe_macro_Binop.OpArrow.toString = $estr;
haxe_macro_Binop.OpArrow.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpIn = ["OpIn",23];
haxe_macro_Binop.OpIn.toString = $estr;
haxe_macro_Binop.OpIn.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe_macro_Unop.OpIncrement = ["OpIncrement",0];
haxe_macro_Unop.OpIncrement.toString = $estr;
haxe_macro_Unop.OpIncrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpDecrement = ["OpDecrement",1];
haxe_macro_Unop.OpDecrement.toString = $estr;
haxe_macro_Unop.OpDecrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNot = ["OpNot",2];
haxe_macro_Unop.OpNot.toString = $estr;
haxe_macro_Unop.OpNot.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNeg = ["OpNeg",3];
haxe_macro_Unop.OpNeg.toString = $estr;
haxe_macro_Unop.OpNeg.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNegBits = ["OpNegBits",4];
haxe_macro_Unop.OpNegBits.toString = $estr;
haxe_macro_Unop.OpNegBits.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Fast_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Fast.NodeAccess_Impl_"] = haxe_xml__$Fast_NodeAccess_$Impl_$;
haxe_xml__$Fast_NodeAccess_$Impl_$.__name__ = ["haxe","xml","_Fast","NodeAccess_Impl_"];
haxe_xml__$Fast_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this1.nodeType);
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Fast_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Fast.AttribAccess_Impl_"] = haxe_xml__$Fast_AttribAccess_$Impl_$;
haxe_xml__$Fast_AttribAccess_$Impl_$.__name__ = ["haxe","xml","_Fast","AttribAccess_Impl_"];
haxe_xml__$Fast_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this1.nodeType);
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = ["hxd","BitmapData"];
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i1 = this.pixel;
		if(i1 == null) {
			i1 = this.ctx.createImageData(1,1);
			this.pixel = i1;
		}
		i1.data[0] = c >> 16 & 255;
		i1.data[1] = c >> 8 & 255;
		i1.data[2] = c & 255;
		i1.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i1,x,y);
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw new js__$Boot_HaxeError("Invalid pixels size");
		}
		pixels.setFlip(false);
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g1 = 0;
		var _g = pixels.width * pixels.height * 4;
		while(_g1 < _g) {
			var i = _g1++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 1;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.h[i1] = 65;
	}
	var _g11 = 224;
	var _g3 = 231;
	while(_g11 < _g3) {
		var i2 = _g11++;
		_gthis.map.h[i2] = 97;
	}
	var _g12 = 200;
	var _g4 = 204;
	while(_g12 < _g4) {
		var i3 = _g12++;
		_gthis.map.h[i3] = 69;
	}
	var _g13 = 232;
	var _g5 = 236;
	while(_g13 < _g5) {
		var i4 = _g13++;
		_gthis.map.h[i4] = 101;
	}
	var _g14 = 204;
	var _g6 = 208;
	while(_g14 < _g6) {
		var i5 = _g14++;
		_gthis.map.h[i5] = 73;
	}
	var _g15 = 236;
	var _g7 = 240;
	while(_g15 < _g7) {
		var i6 = _g15++;
		_gthis.map.h[i6] = 105;
	}
	var _g16 = 210;
	var _g8 = 215;
	while(_g16 < _g8) {
		var i7 = _g16++;
		_gthis.map.h[i7] = 79;
	}
	var _g17 = 242;
	var _g9 = 247;
	while(_g17 < _g9) {
		var i8 = _g17++;
		_gthis.map.h[i8] = 111;
	}
	var _g18 = 217;
	var _g10 = 221;
	while(_g18 < _g10) {
		var i9 = _g18++;
		_gthis.map.h[i9] = 85;
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.h[i10] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = ["hxd","Charset"];
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(code >= 19968) {
			return code <= 40959;
		} else {
			return false;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxClasses["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom"] };
hxd_Cursor.Default = ["Default",0];
hxd_Cursor.Default.toString = $estr;
hxd_Cursor.Default.__enum__ = hxd_Cursor;
hxd_Cursor.Button = ["Button",1];
hxd_Cursor.Button.toString = $estr;
hxd_Cursor.Button.__enum__ = hxd_Cursor;
hxd_Cursor.Move = ["Move",2];
hxd_Cursor.Move.toString = $estr;
hxd_Cursor.Move.__enum__ = hxd_Cursor;
hxd_Cursor.TextInput = ["TextInput",3];
hxd_Cursor.TextInput.toString = $estr;
hxd_Cursor.TextInput.__enum__ = hxd_Cursor;
hxd_Cursor.Hide = ["Hide",4];
hxd_Cursor.Hide.toString = $estr;
hxd_Cursor.Hide.__enum__ = hxd_Cursor;
hxd_Cursor.Custom = function(custom) { var $x = ["Custom",5,custom]; $x.__enum__ = hxd_Cursor; $x.toString = $estr; return $x; };
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function() { };
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = ["hxd","CustomCursor"];
var hxd_EventKind = $hxClasses["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"] };
hxd_EventKind.EPush = ["EPush",0];
hxd_EventKind.EPush.toString = $estr;
hxd_EventKind.EPush.__enum__ = hxd_EventKind;
hxd_EventKind.ERelease = ["ERelease",1];
hxd_EventKind.ERelease.toString = $estr;
hxd_EventKind.ERelease.__enum__ = hxd_EventKind;
hxd_EventKind.EMove = ["EMove",2];
hxd_EventKind.EMove.toString = $estr;
hxd_EventKind.EMove.__enum__ = hxd_EventKind;
hxd_EventKind.EOver = ["EOver",3];
hxd_EventKind.EOver.toString = $estr;
hxd_EventKind.EOver.__enum__ = hxd_EventKind;
hxd_EventKind.EOut = ["EOut",4];
hxd_EventKind.EOut.toString = $estr;
hxd_EventKind.EOut.__enum__ = hxd_EventKind;
hxd_EventKind.EWheel = ["EWheel",5];
hxd_EventKind.EWheel.toString = $estr;
hxd_EventKind.EWheel.__enum__ = hxd_EventKind;
hxd_EventKind.EFocus = ["EFocus",6];
hxd_EventKind.EFocus.toString = $estr;
hxd_EventKind.EFocus.__enum__ = hxd_EventKind;
hxd_EventKind.EFocusLost = ["EFocusLost",7];
hxd_EventKind.EFocusLost.toString = $estr;
hxd_EventKind.EFocusLost.__enum__ = hxd_EventKind;
hxd_EventKind.EKeyDown = ["EKeyDown",8];
hxd_EventKind.EKeyDown.toString = $estr;
hxd_EventKind.EKeyDown.__enum__ = hxd_EventKind;
hxd_EventKind.EKeyUp = ["EKeyUp",9];
hxd_EventKind.EKeyUp.toString = $estr;
hxd_EventKind.EKeyUp.__enum__ = hxd_EventKind;
hxd_EventKind.EReleaseOutside = ["EReleaseOutside",10];
hxd_EventKind.EReleaseOutside.toString = $estr;
hxd_EventKind.EReleaseOutside.__enum__ = hxd_EventKind;
hxd_EventKind.ETextInput = ["ETextInput",11];
hxd_EventKind.ETextInput.toString = $estr;
hxd_EventKind.ETextInput.__enum__ = hxd_EventKind;
hxd_EventKind.ECheck = ["ECheck",12];
hxd_EventKind.ECheck.toString = $estr;
hxd_EventKind.ECheck.__enum__ = hxd_EventKind;
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = ["hxd","Event"];
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = ["hxd","_FloatBuffer","Float32Expand_Impl_"];
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = ["hxd","Key"];
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Stage.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Stage.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	var _g = e.kind;
	switch(_g[1]) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = h3d_Engine.CURRENT.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(h3d_Engine.CURRENT.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = h3d_Engine.CURRENT.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = h3d_Engine.CURRENT.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(h3d_Engine.CURRENT.frameCount + 1);
		break;
	default:
	}
};
var hxd_Flags = $hxClasses["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"] };
hxd_Flags.ReadOnly = ["ReadOnly",0];
hxd_Flags.ReadOnly.toString = $estr;
hxd_Flags.ReadOnly.__enum__ = hxd_Flags;
hxd_Flags.AlphaPremultiplied = ["AlphaPremultiplied",1];
hxd_Flags.AlphaPremultiplied.toString = $estr;
hxd_Flags.AlphaPremultiplied.__enum__ = hxd_Flags;
hxd_Flags.FlipY = ["FlipY",2];
hxd_Flags.FlipY.toString = $estr;
hxd_Flags.FlipY.__enum__ = hxd_Flags;
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = ["hxd","Pixels"];
hxd_Pixels.bytesPerPixel = function(format) {
	switch(format[1]) {
	case 0:case 1:case 2:
		return 4;
	case 3:
		return 8;
	case 4:
		return 16;
	case 5:
		return 1;
	case 6:
		return 2;
	case 7:
		return 4;
	}
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,hxd_impl_Tmp.getBytes(width * height * hxd_Pixels.bytesPerPixel(format)),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.bpp = hxd_Pixels.bytesPerPixel(fmt);
		return fmt;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var out = hxd_impl_Tmp.getBytes(tw * th * 4);
		var p = 0;
		var b = this.offset;
		var _g1 = 0;
		var _g = h;
		while(_g1 < _g) {
			var y = _g1++;
			out.blit(p,this.bytes,b,w * 4);
			p += w * 4;
			b += w * 4;
			var _g3 = 0;
			var _g2 = tw - w;
			while(_g3 < _g2) {
				var i = _g3++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g11 = 0;
		var _g4 = (th - h) * tw;
		while(_g11 < _g4) {
			var i1 = _g11++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) == 0) {
			hxd_impl_Tmp.saveBytes(this.bytes);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = hxd_impl_Tmp.getBytes(this.width * this.height * 4);
		this.bytes.blit(0,old,this.offset,this.width * this.height * 4);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly[1]);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 == b) {
			return;
		}
		if(this.bpp != 4) {
			throw new js__$Boot_HaxeError("TODO");
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY[1];
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY[1]);
		}
		var stride = this.width * this.bpp;
		var _g1 = 0;
		var _g = this.height >> 1;
		while(_g1 < _g) {
			var y = _g1++;
			var p1 = y * stride + this.offset;
			var p2 = (this.height - 1 - y) * stride + this.offset;
			var _g3 = 0;
			var _g2 = stride >> 2;
			while(_g3 < _g2) {
				var x = _g3++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			switch(target[1]) {
			case 1:
				var mem = hxd_impl_Memory.select(this.bytes);
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = hxd_impl_Memory.current.b[p];
					var r = hxd_impl_Memory.current.b[p + 1];
					var g = hxd_impl_Memory.current.b[p + 2];
					var b = hxd_impl_Memory.current.b[p + 3];
					hxd_impl_Memory.current.b[p] = b & 255;
					hxd_impl_Memory.current.b[p + 1] = g & 255;
					hxd_impl_Memory.current.b[p + 2] = r & 255;
					hxd_impl_Memory.current.b[p + 3] = a & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 2:
				var mem1 = hxd_impl_Memory.select(this.bytes);
				var _g11 = 0;
				var _g3 = this.width * this.height;
				while(_g11 < _g3) {
					var i1 = _g11++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = hxd_impl_Memory.current.b[p1];
					hxd_impl_Memory.current.b[p1] = hxd_impl_Memory.current.b[p1 + 1] & 255;
					hxd_impl_Memory.current.b[p1 + 1] = hxd_impl_Memory.current.b[p1 + 2] & 255;
					hxd_impl_Memory.current.b[p1 + 2] = hxd_impl_Memory.current.b[p1 + 3] & 255;
					hxd_impl_Memory.current.b[p1 + 3] = a1 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target[1]) {
			case 0:
				var mem2 = hxd_impl_Memory.select(this.bytes);
				var _g12 = 0;
				var _g4 = this.width * this.height;
				while(_g12 < _g4) {
					var i2 = _g12++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = hxd_impl_Memory.current.b[p2];
					var r1 = hxd_impl_Memory.current.b[p2 + 1];
					var g1 = hxd_impl_Memory.current.b[p2 + 2];
					var b1 = hxd_impl_Memory.current.b[p2 + 3];
					hxd_impl_Memory.current.b[p2] = b1 & 255;
					hxd_impl_Memory.current.b[p2 + 1] = g1 & 255;
					hxd_impl_Memory.current.b[p2 + 2] = r1 & 255;
					hxd_impl_Memory.current.b[p2 + 3] = a2 & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 2:
				var mem3 = hxd_impl_Memory.select(this.bytes);
				var _g13 = 0;
				var _g5 = this.width * this.height;
				while(_g13 < _g5) {
					var i3 = _g13++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = hxd_impl_Memory.current.b[p3];
					var r2 = hxd_impl_Memory.current.b[p3 + 2];
					hxd_impl_Memory.current.b[p3] = r2 & 255;
					hxd_impl_Memory.current.b[p3 + 2] = b2 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target[1]) {
			case 0:
				var mem4 = hxd_impl_Memory.select(this.bytes);
				var _g14 = 0;
				var _g6 = this.width * this.height;
				while(_g14 < _g6) {
					var i4 = _g14++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = hxd_impl_Memory.current.b[p4 + 3];
					hxd_impl_Memory.current.b[p4 + 3] = hxd_impl_Memory.current.b[p4 + 2] & 255;
					hxd_impl_Memory.current.b[p4 + 2] = hxd_impl_Memory.current.b[p4 + 1] & 255;
					hxd_impl_Memory.current.b[p4 + 1] = hxd_impl_Memory.current.b[p4] & 255;
					hxd_impl_Memory.current.b[p4] = a3 & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 1:
				var mem5 = hxd_impl_Memory.select(this.bytes);
				var _g15 = 0;
				var _g7 = this.width * this.height;
				while(_g15 < _g7) {
					var i5 = _g15++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = hxd_impl_Memory.current.b[p5];
					var r3 = hxd_impl_Memory.current.b[p5 + 2];
					hxd_impl_Memory.current.b[p5] = r3 & 255;
					hxd_impl_Memory.current.b[p5 + 2] = b3 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		if(this.bytes != null) {
			if((this.flags & 1 << hxd_Flags.ReadOnly[1]) == 0) {
				hxd_impl_Tmp.saveBytes(this.bytes);
			}
			this.bytes = null;
		}
	}
	,__class__: hxd_Pixels
};
var hxd_SceneEvents = function(stage) {
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	if(stage == null) {
		stage = hxd_Stage.getInstance();
	}
	this.stage = stage;
	stage.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = ["hxd","SceneEvents"];
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(i == this.currentOver) {
			this.currentOver = null;
			hxd_System.setCursor(hxd_Cursor.Default);
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var handled = false;
		var checkOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var _g = event.kind;
		switch(_g[1]) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 2:case 12:
			checkOver = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(this.currentOver != i) {
						this.onOut.cancel = false;
						if(this.currentOver != null) {
							this.currentOver.handleEvent(this.onOut);
						}
						if(!this.onOut.cancel) {
							var old = event.propagate;
							var oldKind = event.kind;
							event.kind = hxd_EventKind.EOver;
							event.cancel = false;
							i.handleEvent(event);
							if(event.cancel) {
								this.currentOver = null;
							} else {
								this.currentOver = i;
								checkOver = false;
							}
							event.kind = oldKind;
							event.cancel = false;
							event.propagate = old;
						}
					} else {
						checkOver = false;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver && this.currentOver != null) {
			this.onOut.cancel = false;
			this.currentOver.handleEvent(this.onOut);
			if(!this.onOut.cancel) {
				this.currentOver = null;
			}
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g11 = 0;
			var _g21 = this.pushList;
			while(_g11 < _g21.length) {
				var i1 = _g21[_g11];
				++_g11;
				if(i1 == null) {
					this.dispatchListeners(event);
				} else {
					var s1 = i1.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i1);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = false;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				var _g1 = e.kind;
				switch(_g1[1]) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = false;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(e.cancel || e.propagate) {
						e.cancel = false;
						e.propagate = false;
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startDrag: function(f,onCancel,refEvent) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : refEvent == null ? null : refEvent.touchId, onCancel : onCancel};
	}
	,stopDrag: function() {
		this.currentDrag = null;
	}
	,onEvent: function(e) {
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Stage = function(canvas,globalEvents) {
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	this.element = canvas == null || globalEvents ? window : canvas;
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
	}
	this.canvas = canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mousemove",$bind(this,this.onMouseMove));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mousewheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	if(this.element == canvas) {
		canvas.setAttribute("tabindex","1");
		canvas.style.outline = "none";
	} else {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		canvas.oncontextmenu = function(e1) {
			e1.stopPropagation();
			e1.preventDefault();
			return false;
		};
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Stage"] = hxd_Stage;
hxd_Stage.__name__ = ["hxd","Stage"];
hxd_Stage.getInstance = function() {
	if(hxd_Stage.inst == null) {
		hxd_Stage.inst = new hxd_Stage();
	}
	return hxd_Stage.inst;
};
hxd_Stage.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,setFullScreen: function(v) {
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * window.devicePixelRatio);
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * window.devicePixelRatio);
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * window.devicePixelRatio);
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * window.devicePixelRatio);
	}
	,onMouseDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = -e.wheelDelta / 30.0;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
	}
	,__class__: hxd_Stage
};
var hxd_Platform = $hxClasses["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"] };
hxd_Platform.IOS = ["IOS",0];
hxd_Platform.IOS.toString = $estr;
hxd_Platform.IOS.__enum__ = hxd_Platform;
hxd_Platform.Android = ["Android",1];
hxd_Platform.Android.toString = $estr;
hxd_Platform.Android.__enum__ = hxd_Platform;
hxd_Platform.WebGL = ["WebGL",2];
hxd_Platform.WebGL.toString = $estr;
hxd_Platform.WebGL.__enum__ = hxd_Platform;
hxd_Platform.PC = ["PC",3];
hxd_Platform.PC.toString = $estr;
hxd_Platform.PC.__enum__ = hxd_Platform;
hxd_Platform.Console = ["Console",4];
hxd_Platform.Console.toString = $estr;
hxd_Platform.Console.__enum__ = hxd_Platform;
hxd_Platform.FlashPlayer = ["FlashPlayer",5];
hxd_Platform.FlashPlayer.toString = $estr;
hxd_Platform.FlashPlayer.__enum__ = hxd_Platform;
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxClasses["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"] };
hxd_SystemValue.IsTouch = ["IsTouch",0];
hxd_SystemValue.IsTouch.toString = $estr;
hxd_SystemValue.IsTouch.__enum__ = hxd_SystemValue;
hxd_SystemValue.IsWindowed = ["IsWindowed",1];
hxd_SystemValue.IsWindowed.toString = $estr;
hxd_SystemValue.IsWindowed.__enum__ = hxd_SystemValue;
hxd_SystemValue.IsMobile = ["IsMobile",2];
hxd_SystemValue.IsMobile.toString = $estr;
hxd_SystemValue.IsMobile.__enum__ = hxd_SystemValue;
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = ["hxd","System"];
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	var canvas = hxd_Stage.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c[1]) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			throw new js__$Boot_HaxeError("Custom cursor not supported");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	return false;
};
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = ["hxd","Timer"];
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = new Date().getTime() / 1000;
	hxd_Timer.deltaT = newTime - hxd_Timer.oldTime;
	hxd_Timer.oldTime = newTime;
	if(hxd_Timer.deltaT < hxd_Timer.maxDeltaTime) {
		hxd_Timer.calc_tmod = hxd_Timer.calc_tmod * hxd_Timer.tmod_factor + (1 - hxd_Timer.tmod_factor) * hxd_Timer.deltaT * hxd_Timer.wantedFPS;
	} else {
		hxd_Timer.deltaT = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.tmod = hxd_Timer.calc_tmod;
};
hxd_Timer.skip = function() {
	hxd_Timer.oldTime = new Date().getTime() / 1000;
};
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = ["hxd","earcut","EarNode"];
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = ["hxd","earcut","Earcut"];
hxd_earcut_Earcut.prototype = {
	triangulate_h2d__Graphics_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g1 = 0;
		var _g = holes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g11 = start;
			var _g2 = end;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g11 = start;
			var _g2 = end;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				tmp3 = (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = null;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g1 = 0;
				var _g = inSize;
				while(_g1 < _g) {
					var i = _g1++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = ["hxd","fs","FileEntry"];
hxd_fs_FileEntry.prototype = {
	getSign: function() {
		return 0;
	}
	,getBytes: function() {
		return null;
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = ["hxd","fs","FileSystem"];
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = ["hxd","fs","_EmbedFileSystem","EmbedEntry"];
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getSign: function() {
		var old = this.readPos;
		this.open();
		this.readPos = old;
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g11 = 0;
		var _g2 = (3 - bytes * 4 % 3) % 3;
		while(_g11 < _g2) {
			var i = _g11++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = ["hxd","fs","EmbedFileSystem"];
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = ["hxd","fs","FileInput"];
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = ["hxd","fs","_LoadedBitmap","LoadedBitmap_Impl_"];
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = ["hxd","fs","NotFound"];
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_MemoryReader = function() {
};
$hxClasses["hxd.impl.MemoryReader"] = hxd_impl_MemoryReader;
hxd_impl_MemoryReader.__name__ = ["hxd","impl","MemoryReader"];
hxd_impl_MemoryReader.prototype = {
	__class__: hxd_impl_MemoryReader
};
var hxd_impl_Memory = function() { };
$hxClasses["hxd.impl.Memory"] = hxd_impl_Memory;
hxd_impl_Memory.__name__ = ["hxd","impl","Memory"];
hxd_impl_Memory.select = function(b) {
	if(hxd_impl_Memory.current != null) {
		hxd_impl_Memory.stack.push(hxd_impl_Memory.current);
	}
	hxd_impl_Memory.current = b;
	return hxd_impl_Memory.inst;
};
hxd_impl_Memory.end = function() {
	hxd_impl_Memory.current = hxd_impl_Memory.stack.pop();
};
var hxd_impl_Tmp = function() { };
$hxClasses["hxd.impl.Tmp"] = hxd_impl_Tmp;
hxd_impl_Tmp.__name__ = ["hxd","impl","Tmp"];
hxd_impl_Tmp.outOfMemory = function() {
};
hxd_impl_Tmp.getBytes = function(size) {
	var found = -1;
	var _g1 = 0;
	var _g = hxd_impl_Tmp.bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var b = hxd_impl_Tmp.bytes[i];
		if(b.length >= size) {
			found = i;
		}
	}
	if(found >= 0) {
		var b1 = hxd_impl_Tmp.bytes[found];
		hxd_impl_Tmp.bytes.splice(found,1);
		return b1;
	}
	var sz = 1024;
	while(sz < size) sz = sz * 3 >> 1;
	return hxd_impl_Tmp.allocBytes(sz);
};
hxd_impl_Tmp.freeMemory = function() {
	hxd_impl_Tmp.bytes = [];
	hxd_impl_Tmp.outOfMemory();
};
hxd_impl_Tmp.allocBytes = function(size) {
	try {
		return new haxe_io_Bytes(new ArrayBuffer(size));
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		hxd_impl_Tmp.freeMemory();
		return new haxe_io_Bytes(new ArrayBuffer(size));
	}
};
hxd_impl_Tmp.saveBytes = function(b) {
	var _g1 = 0;
	var _g = hxd_impl_Tmp.bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(hxd_impl_Tmp.bytes[i].length <= b.length) {
			hxd_impl_Tmp.bytes.splice(i,0,b);
			if(hxd_impl_Tmp.bytes.length > 8) {
				hxd_impl_Tmp.bytes.pop();
			}
			return;
		}
	}
	hxd_impl_Tmp.bytes.push(b);
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = ["hxd","res","Resource"];
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = ["hxd","res","Any"];
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,__class__: hxd_res_Any
});
var hxd_res_Atlas = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Atlas"] = hxd_res_Atlas;
hxd_res_Atlas.__name__ = ["hxd","res","Atlas"];
hxd_res_Atlas.__super__ = hxd_res_Resource;
hxd_res_Atlas.prototype = $extend(hxd_res_Resource.prototype,{
	getContents: function() {
		if(this.contents != null) {
			return this.contents;
		}
		this.contents = new haxe_ds_StringMap();
		var lines = this.entry.getBytes().toString().split("\n");
		var basePath = this.entry.get_path().split("/");
		basePath.pop();
		var basePath1 = basePath.join("/");
		if(basePath1.length > 0) {
			basePath1 += "/";
		}
		while(lines.length > 0) {
			var line = StringTools.trim(lines.shift());
			if(line == "") {
				continue;
			}
			var file = hxd_res_Loader.currentInstance.load(basePath1 + line).toTile();
			while(lines.length > 0) {
				var line1 = StringTools.trim(lines.shift());
				if(line1 == "") {
					break;
				}
				var prop = line1.split(": ");
				if(prop.length > 1) {
					continue;
				}
				var key = line1;
				var tileX = 0;
				var tileY = 0;
				var tileW = 0;
				var tileH = 0;
				var tileDX = 0;
				var tileDY = 0;
				var origW = 0;
				var origH = 0;
				var index = 0;
				while(lines.length > 0) {
					var line2 = StringTools.trim(lines.shift());
					var prop1 = line2.split(": ");
					if(prop1.length == 1) {
						lines.unshift(line2);
						break;
					}
					var v = prop1[1];
					var _g = prop1[0];
					switch(_g) {
					case "index":
						index = Std.parseInt(v);
						if(index < 0) {
							index = 0;
						}
						break;
					case "offset":
						var vals = v.split(", ");
						tileDX = Std.parseInt(vals[0]);
						tileDY = Std.parseInt(vals[1]);
						break;
					case "orig":
						var vals1 = v.split(", ");
						origW = Std.parseInt(vals1[0]);
						origH = Std.parseInt(vals1[1]);
						break;
					case "rotate":
						if(v == "true") {
							throw new js__$Boot_HaxeError("Rotation not supported in atlas");
						}
						break;
					case "size":
						var vals2 = v.split(", ");
						tileW = Std.parseInt(vals2[0]);
						tileH = Std.parseInt(vals2[1]);
						break;
					case "xy":
						var vals3 = v.split(", ");
						tileX = Std.parseInt(vals3[0]);
						tileY = Std.parseInt(vals3[1]);
						break;
					default:
						haxe_Log.trace("Unknown prop " + prop1[0],{ fileName : "hxd/res/Atlas.hx", lineNumber : 104, className : "hxd.res.Atlas", methodName : "getContents"});
					}
				}
				tileDY = origH - (tileH + tileDY);
				var t = file.sub(tileX,tileY,tileW,tileH,tileDX,tileDY);
				var _this = this.contents;
				var tl = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(tl == null) {
					tl = [];
					var _this1 = this.contents;
					if(__map_reserved[key] != null) {
						_this1.setReserved(key,tl);
					} else {
						_this1.h[key] = tl;
					}
				}
				tl[index] = { t : t, width : origW, height : origH};
			}
		}
		return this.contents;
	}
	,__class__: hxd_res_Atlas
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = ["hxd","res","BitmapFont"];
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font != null) {
			return this.font;
		}
		var tile = this.loader.load(HxOverrides.substr(this.entry.get_path(),0,-3) + "png").toTile();
		var name = this.entry.get_path();
		var size = 0;
		var lineHeight = 0;
		var glyphs = new haxe_ds_IntMap();
		var _g = this.entry.getSign();
		switch(_g) {
		case 1836597052:
			var xml = Xml.parse(this.entry.getBytes().toString());
			var x = xml.firstElement();
			if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
			}
			var this1 = x;
			var xml1 = this1;
			size = Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(xml1,"size"));
			lineHeight = Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(xml1,"height"));
			name = haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(xml1,"family");
			var c = xml1.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c1,"width")) - 1);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					fc.addKerning(HxOverrides.cca(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(k1,"id"),0),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(k1,"advance")));
				}
				var code = haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c1,"code");
				if(StringTools.startsWith(code,"&#")) {
					glyphs.h[Std.parseInt(HxOverrides.substr(code,2,code.length - 3))] = fc;
				} else {
					var key = HxOverrides.cca(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c1,"code"),0);
					glyphs.h[key] = fc;
				}
			}
			break;
		case 1852794428:
			var xml2 = Xml.parse(this.entry.getBytes().toString());
			var x1 = xml2.firstElement();
			if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Invalid nodeType " + x1.nodeType);
			}
			var this2 = x1;
			var xml3 = this2;
			size = Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(haxe_xml__$Fast_NodeAccess_$Impl_$.resolve(xml3,"info"),"size"));
			lineHeight = Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(haxe_xml__$Fast_NodeAccess_$Impl_$.resolve(xml3,"common"),"lineHeight"));
			name = haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(haxe_xml__$Fast_NodeAccess_$Impl_$.resolve(xml3,"info"),"face");
			var chars = haxe_xml__$Fast_NodeAccess_$Impl_$.resolve(xml3,"chars").elements();
			var c2 = chars;
			while(c2.hasNext()) {
				var c3 = c2.next();
				var t1 = tile.sub(Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"x")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"y")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"width")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"height")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"xoffset")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"yoffset")));
				var fc1 = new h2d_FontChar(t1,Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"width")) - 1);
				var kerns = haxe_xml__$Fast_NodeAccess_$Impl_$.resolve(xml3,"kernings").elements();
				var k2 = kerns;
				while(k2.hasNext()) {
					var k3 = k2.next();
					if(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(k3,"second") == haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"id")) {
						fc1.addKerning(Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(k3,"first")),Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(k3,"amount")));
					}
				}
				var key1 = Std.parseInt(haxe_xml__$Fast_AttribAccess_$Impl_$.resolve(c3,"id"));
				glyphs.h[key1] = fc1;
			}
			break;
		default:
			var sign = _g;
			throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
		}
		if(glyphs.h[32] == null) {
			var value = new h2d_FontChar(tile.sub(0,0,0,0),size >> 1);
			glyphs.h[32] = value;
		}
		this.font = new h2d_Font(name,size);
		this.font.glyphs = glyphs;
		this.font.lineHeight = lineHeight;
		this.font.tile = tile;
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height >> 1;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			this.font.baseLine = this.font.lineHeight - 2 - padding;
		} else {
			this.font.baseLine = a.t.dy + a.t.height - padding;
		}
		return this.font;
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = ["hxd","res","Image"];
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof haxe_io_Eof)) {
				var e2 = e1;
				head = 0;
			} else {
				throw e;
			}
		}
		switch(head) {
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) {
				var _g = f.readUInt16();
				switch(_g) {
				case 65472:case 65474:
					var len = f.readUInt16();
					var prec = f.readByte();
					height = f.readUInt16();
					width = f.readUInt16();
					break _hx_loop2;
				default:
					f.skip(f.readUInt16() - 2);
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
		}
		f.close();
		this.inf = { width : width, height : height, format : format};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		var _g = this.inf.format;
		switch(_g) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e1) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			try {
				format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			} catch( e2 ) {
				var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
				hxd_impl_Tmp.freeMemory();
				format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			}
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY[1];
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getSize();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(h3d_mat_Texture.nativeFormat,false);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading[1];
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading[1]);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc]);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Filter = $hxClasses["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"] };
hxd_res_Filter.Fast = ["Fast",0];
hxd_res_Filter.Fast.toString = $estr;
hxd_res_Filter.Fast.__enum__ = hxd_res_Filter;
hxd_res_Filter.Chromatic = ["Chromatic",1];
hxd_res_Filter.Chromatic.toString = $estr;
hxd_res_Filter.Chromatic.__enum__ = hxd_res_Filter;
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = ["hxd","res","_NanoJpeg","Component"];
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = ["hxd","res","NanoJpeg"];
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(this.vlctab[i] == null) {
				this.vlctab[i] = hxd_impl_Tmp.getBytes(131072);
			}
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		var _g1 = 0;
		while(_g1 < 3) {
			var i1 = _g1++;
			this.comps[i1].dcpred = 0;
		}
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				hxd_impl_Tmp.saveBytes(c.pixels);
				c.pixels = null;
			}
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var i = _g2++;
			if(this.vlctab[i] != null) {
				hxd_impl_Tmp.saveBytes(this.vlctab[i]);
				this.vlctab[i] = null;
			}
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		var _g = this.ncomp;
		switch(_g) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g2 = 0;
		var _g1 = this.ncomp;
		while(_g2 < _g1) {
			var i = _g2++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g21 = 0;
		var _g11 = this.ncomp;
		while(_g21 < _g11) {
			var i1 = _g21++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = hxd_impl_Tmp.getBytes(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			var _g = 0;
			while(_g < 16) {
				var codelen = _g++;
				this.counts[codelen] = this.bytes.b[this.pos + (codelen + 1)];
			}
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g1 = 1;
			while(_g1 < 17) {
				var codelen1 = _g1++;
				spread >>= 1;
				var currcnt = this.counts[codelen1 - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen1;
				var _g2 = 0;
				var _g11 = currcnt;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var code = this.bytes.b[this.pos + i1];
					var _g4 = 0;
					var _g3 = spread;
					while(_g4 < _g3) {
						var j = _g4++;
						vlc.b[vpos++] = codelen1 & 255;
						vlc.b[vpos++] = code & 255;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var _g1 = 0;
		while(_g1 < 8) {
			var coef1 = _g1++;
			var bp = coef1 * 8;
			var x0;
			var x8;
			var x1 = this.block[bp + 4] << 11;
			var x2 = this.block[bp + 6];
			var x3 = this.block[bp + 2];
			var x4 = this.block[bp + 1];
			var x5 = this.block[bp + 7];
			var x6 = this.block[bp + 5];
			var x7 = this.block[bp + 3];
			if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
				var val = this.block[bp + 7] = this.block[bp] << 3;
				var val1 = this.block[bp + 6] = val;
				var val2 = this.block[bp + 5] = val1;
				var val3 = this.block[bp + 4] = val2;
				var val4 = this.block[bp + 3] = val3;
				var val5 = this.block[bp + 2] = val4;
				var val6 = this.block[bp + 1] = val5;
				this.block[bp] = val6;
			} else {
				x0 = (this.block[bp] << 11) + 128;
				x8 = 565 * (x4 + x5);
				x4 = x8 + 2276 * x4;
				x5 = x8 - 3406 * x5;
				x8 = 2408 * (x6 + x7);
				x6 = x8 - 799 * x6;
				x7 = x8 - 4017 * x7;
				x8 = x0 + x1;
				x0 -= x1;
				x1 = 1108 * (x3 + x2);
				x2 = x1 - 3784 * x2;
				x3 = x1 + 1568 * x3;
				x1 = x4 + x6;
				x4 -= x6;
				x6 = x5 + x7;
				x5 -= x7;
				x7 = x8 + x3;
				x8 -= x3;
				x3 = x0 + x2;
				x0 -= x2;
				x2 = 181 * (x4 + x5) + 128 >> 8;
				x4 = 181 * (x4 - x5) + 128 >> 8;
				this.block[bp] = x7 + x1 >> 8;
				this.block[bp + 1] = x3 + x2 >> 8;
				this.block[bp + 2] = x0 + x4 >> 8;
				this.block[bp + 3] = x8 + x6 >> 8;
				this.block[bp + 4] = x8 - x6 >> 8;
				this.block[bp + 5] = x0 - x4 >> 8;
				this.block[bp + 6] = x3 - x2 >> 8;
				this.block[bp + 7] = x7 - x1 >> 8;
			}
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var coef2 = _g2++;
			var po1 = coef2 + po;
			var stride = c.stride;
			var x01;
			var x81;
			var x11 = this.block[coef2 + 32] << 8;
			var x21 = this.block[coef2 + 48];
			var x31 = this.block[coef2 + 16];
			var x41 = this.block[coef2 + 8];
			var x51 = this.block[coef2 + 56];
			var x61 = this.block[coef2 + 40];
			var x71 = this.block[coef2 + 24];
			if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
				var x = (this.block[coef2] + 32 >> 6) + 128;
				x11 = x < 0 ? 0 : x > 255 ? 255 : x;
				var _g3 = 0;
				while(_g3 < 8) {
					var i1 = _g3++;
					out.b[po1] = x11 & 255;
					po1 += stride;
				}
			} else {
				x01 = (this.block[coef2] << 8) + 8192;
				x81 = 565 * (x41 + x51) + 4;
				x41 = x81 + 2276 * x41 >> 3;
				x51 = x81 - 3406 * x51 >> 3;
				x81 = 2408 * (x61 + x71) + 4;
				x61 = x81 - 799 * x61 >> 3;
				x71 = x81 - 4017 * x71 >> 3;
				x81 = x01 + x11;
				x01 -= x11;
				x11 = 1108 * (x31 + x21) + 4;
				x21 = x11 - 3784 * x21 >> 3;
				x31 = x11 + 1568 * x31 >> 3;
				x11 = x41 + x61;
				x41 -= x61;
				x61 = x51 + x71;
				x51 -= x71;
				x71 = x81 + x31;
				x81 -= x31;
				x31 = x01 + x21;
				x01 -= x21;
				x21 = 181 * (x41 + x51) + 128 >> 8;
				x41 = 181 * (x41 - x51) + 128 >> 8;
				var x9 = (x71 + x11 >> 14) + 128;
				out.b[po1] = (x9 < 0 ? 0 : x9 > 255 ? 255 : x9) & 255;
				po1 += stride;
				var x10 = (x31 + x21 >> 14) + 128;
				out.b[po1] = (x10 < 0 ? 0 : x10 > 255 ? 255 : x10) & 255;
				po1 += stride;
				var x12 = (x01 + x41 >> 14) + 128;
				out.b[po1] = (x12 < 0 ? 0 : x12 > 255 ? 255 : x12) & 255;
				po1 += stride;
				var x13 = (x81 + x61 >> 14) + 128;
				out.b[po1] = (x13 < 0 ? 0 : x13 > 255 ? 255 : x13) & 255;
				po1 += stride;
				var x14 = (x81 - x61 >> 14) + 128;
				out.b[po1] = (x14 < 0 ? 0 : x14 > 255 ? 255 : x14) & 255;
				po1 += stride;
				var x15 = (x01 - x41 >> 14) + 128;
				out.b[po1] = (x15 < 0 ? 0 : x15 > 255 ? 255 : x15) & 255;
				po1 += stride;
				var x16 = (x31 - x21 >> 14) + 128;
				out.b[po1] = (x16 < 0 ? 0 : x16 > 255 ? 255 : x16) & 255;
				po1 += stride;
				var x17 = (x71 - x11 >> 14) + 128;
				out.b[po1] = (x17 < 0 ? 0 : x17 > 255 ? 255 : x17) & 255;
			}
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g1 = 0;
		var _g = this.ncomp;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g11 = 0;
			var _g2 = this.ncomp;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var c1 = this.comps[i1];
				var _g3 = 0;
				var _g21 = c1.ssy;
				while(_g3 < _g21) {
					var sby = _g3++;
					var _g5 = 0;
					var _g4 = c1.ssx;
					while(_g5 < _g4) {
						var sbx = _g5++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				var _g6 = 0;
				while(_g6 < 3) {
					var i3 = _g6++;
					this.comps[i3].dcpred = 0;
				}
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = hxd_impl_Tmp.getBytes(c.width * c.height << 1);
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g1 = 0;
		var _g = c.height;
		while(_g1 < _g) {
			var y = _g1++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = (x < 0 ? 0 : x > 255 ? 255 : x) & 255;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = (x1 < 0 ? 0 : x1 > 255 ? 255 : x1) & 255;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = (x2 < 0 ? 0 : x2 > 255 ? 255 : x2) & 255;
			var _g3 = 0;
			var _g2 = xmax;
			while(_g3 < _g2) {
				var x3 = _g3++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = (x4 < 0 ? 0 : x4 > 255 ? 255 : x4) & 255;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = (x5 < 0 ? 0 : x5 > 255 ? 255 : x5) & 255;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = (x6 < 0 ? 0 : x6 > 255 ? 255 : x6) & 255;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = (x7 < 0 ? 0 : x7 > 255 ? 255 : x7) & 255;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = (x8 < 0 ? 0 : x8 > 255 ? 255 : x8) & 255;
		}
		c.width <<= 1;
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = hxd_impl_Tmp.getBytes(c.width * c.height << 1);
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g1 = 0;
		var _g = w;
		while(_g1 < _g) {
			var x = _g1++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = (x1 < 0 ? 0 : x1 > 255 ? 255 : x1) & 255;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = (x2 < 0 ? 0 : x2 > 255 ? 255 : x2) & 255;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = (x3 < 0 ? 0 : x3 > 255 ? 255 : x3) & 255;
			po += w;
			pi += s1;
			var _g3 = 0;
			var _g2 = c.height - 2;
			while(_g3 < _g2) {
				var y = _g3++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = (x4 < 0 ? 0 : x4 > 255 ? 255 : x4) & 255;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = (x5 < 0 ? 0 : x5 > 255 ? 255 : x5) & 255;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = (x6 < 0 ? 0 : x6 > 255 ? 255 : x6) & 255;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = (x7 < 0 ? 0 : x7 > 255 ? 255 : x7) & 255;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = (x8 < 0 ? 0 : x8 > 255 ? 255 : x8) & 255;
		}
		c.height <<= 1;
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = hxd_impl_Tmp.getBytes(c.width * c.height);
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g1 = 0;
		var _g = c.height;
		while(_g1 < _g) {
			var y = _g1++;
			var pin = (y >> yshift) * c.stride;
			var _g3 = 0;
			var _g2 = c.width;
			while(_g3 < _g2) {
				var x = _g3++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin] & 255;
			}
		}
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = out;
	}
	,njConvert: function() {
		var _g1 = 0;
		var _g = this.ncomp;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.comps[i];
			var _g2 = this.filter;
			switch(_g2[1]) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = hxd_impl_Tmp.getBytes(this.width * this.height * 4);
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g11 = 0;
			var _g3 = this.height;
			while(_g11 < _g3) {
				var yy = _g11++;
				var _g31 = 0;
				var _g21 = this.width;
				while(_g31 < _g21) {
					var x = _g31++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b & 255;
					pix.b[out++] = g & 255;
					pix.b[out++] = r & 255;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			var _g = this.bytes.b[this.pos + -1];
			switch(_g) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw new js__$Boot_HaxeError("Unsupported progressive JPG");
				}
				var _g1 = 4;
				while(_g1 < 8) {
					var i = _g1++;
					if(this.vlctab[i] == null) {
						this.vlctab[i] = hxd_impl_Tmp.getBytes(131072);
					}
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw new js__$Boot_HaxeError("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				var _g2 = this.bytes.b[this.pos + -1] & 240;
				switch(_g2) {
				case 192:
					throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + -1] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + -1],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_SoundFormat = $hxClasses["hxd.res.SoundFormat"] = { __ename__ : true, __constructs__ : ["Wav","Mp3","OggVorbis"] };
hxd_res_SoundFormat.Wav = ["Wav",0];
hxd_res_SoundFormat.Wav.toString = $estr;
hxd_res_SoundFormat.Wav.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.Mp3 = ["Mp3",1];
hxd_res_SoundFormat.Mp3.toString = $estr;
hxd_res_SoundFormat.Mp3.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.OggVorbis = ["OggVorbis",2];
hxd_res_SoundFormat.OggVorbis.toString = $estr;
hxd_res_SoundFormat.OggVorbis.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.__empty_constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = ["hxd","res","Sound"];
hxd_res_Sound.supportedFormat = function(fmt) {
	switch(fmt[1]) {
	case 0:
		return true;
	case 1:
		return true;
	case 2:
		return true;
	}
};
hxd_res_Sound.startWorker = function() {
	return false;
};
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		var _g = bytes.b[0];
		switch(_g) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			this.data = new hxd_snd_OggData(bytes);
			break;
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw new js__$Boot_HaxeError("Unsupported sound format " + this.entry.get_path());
		}
		return this.data;
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = new Date().getTime() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = ["hxd","snd","ChannelBase"];
hxd_snd_ChannelBase.prototype = {
	set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
	this.set_pause(false);
	this.isVirtual = false;
	this.loop = false;
	this.queue = [];
	this.set_position(0.0);
	this.audibleGain = 1.0;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = ["hxd","snd","Channel"];
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = new Date().getTime() / 1000;
		this.positionChanged = true;
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = new Date().getTime() / 1000;
		}
		return this.pause = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g2 = 0;
			var _g11 = this.effects;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				this.currentVolume *= e1.getVolumeModifier();
			}
		}
	}
	,calcAudibleGain: function(now) {
		this.updateCurrentVolume(now);
		this.audibleGain = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleGain = e.applyAudibleGainModifier(this.audibleGain);
			}
			var _g2 = 0;
			var _g11 = this.effects;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				this.audibleGain = e1.applyAudibleGainModifier(this.audibleGain);
			}
		}
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = ["hxd","snd","ChannelGroup"];
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxClasses["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"] };
hxd_snd_SampleFormat.UI8 = ["UI8",0];
hxd_snd_SampleFormat.UI8.toString = $estr;
hxd_snd_SampleFormat.UI8.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.I16 = ["I16",1];
hxd_snd_SampleFormat.I16.toString = $estr;
hxd_snd_SampleFormat.I16.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.F32 = ["F32",2];
hxd_snd_SampleFormat.F32.toString = $estr;
hxd_snd_SampleFormat.F32.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = ["hxd","snd","Data"];
hxd_snd_Data.prototype = {
	decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw new js__$Boot_HaxeError(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format[1]) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data1 = new hxd_snd_WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g1 = 0;
			var _g = samples;
			while(_g1 < _g) {
				var i = _g1++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) == 0) {
						sl = sl;
					} else {
						sl |= -65536;
					}
					if((sr & 32768) == 0) {
						sr = sr;
					} else {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g11 = 0;
		var _g2 = newSamples;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var targetSample = i1 / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g3 = 0;
			var _g21 = commonChannels;
			while(_g3 < _g21) {
				var k = _g3++;
				var sval1;
				var sval2 = 0.;
				var _g4 = this.sampleFormat;
				switch(_g4[1]) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format[1]) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival & 255;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g31 = 0;
			var _g22 = extraChannels;
			while(_g31 < _g22) {
				var i2 = _g31++;
				switch(format[1]) {
				case 0:
					out.b[outPos++] = ival & 255;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat[1]) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = ["hxd","snd","EffectDriver"];
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = ["hxd","snd","Driver"];
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = ["hxd","snd","Effect"];
hxd_snd_Effect.prototype = {
	applyAudibleGainModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = ["hxd","snd","Listener"];
hxd_snd_Listener.prototype = {
	__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = ["hxd","snd","Source"];
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = new Date().getTime() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = ["hxd","snd","Buffer"];
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	try {
		this.driver = new hxd_snd_openal_Driver();
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if(typeof(e1) == "string") {
			var e2 = e1;
			this.driver = null;
		} else {
			throw e;
		}
	}
	this.masterVolume = 1.0;
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g1 = 0;
		var _g = hxd_snd_Manager.MAX_SOURCES;
		while(_g1 < _g) {
			var i = _g1++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = ["hxd","snd","Manager"];
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw new js__$Boot_HaxeError(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		this.now = new Date().getTime() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s.handle);
			var _g3 = 0;
			var _g2 = count;
			while(_g3 < _g2) {
				var i = _g3++;
				var b = this.unqueueBuffer(s);
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue[0];
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c.set_position((s.start + playedSamples) / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b1 = s.buffers[s.buffers.length - 1];
				if(!b1.isEnd) {
					this.queueBuffer(s,b1.sound,b1.start + b1.samples);
				} else if(c.queue.length > 0) {
					this.queueBuffer(s,c.queue.shift(),0);
				} else if(c.loop) {
					this.queueBuffer(s,b1.sound,0);
				}
			}
		}
		var c1 = this.channels;
		while(c1 != null) {
			c1.calcAudibleGain(this.now);
			c1.isVirtual = c1.pause || c1.mute || c1.channelGroup.mute || c1.audibleGain < 1e-5;
			c1 = c1.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g11 = 0;
					var _g4 = insize;
					while(_g11 < _g4) {
						var i1 = _g11++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var sgroupRefs = new haxe_ds_ObjectMap();
		var audibleCount = 0;
		var c2 = this.channels;
		while(c2 != null && !c2.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c2.isVirtual = true;
			} else if(c2.soundGroup.maxAudible >= 0) {
				var sgRefs = sgroupRefs.h[c2.soundGroup.__id__];
				if(sgRefs == null) {
					sgRefs = 0;
				}
				if(++sgRefs > c2.soundGroup.maxAudible) {
					c2.isVirtual = true;
					--audibleCount;
				}
				sgroupRefs.set(c2.soundGroup,sgRefs);
			}
			c2 = c2.next;
		}
		var _g5 = 0;
		var _g12 = this.sources;
		while(_g5 < _g12.length) {
			var s1 = _g12[_g5];
			++_g5;
			if(s1.channel == null || !s1.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s1);
		}
		var c3 = this.channels;
		while(c3 != null) {
			if(c3.source != null || c3.isVirtual) {
				c3 = c3.next;
				continue;
			}
			var s2 = null;
			var _g6 = 0;
			var _g13 = this.sources;
			while(_g6 < _g13.length) {
				var s21 = _g13[_g6];
				++_g6;
				if(s21.channel == null) {
					s2 = s21;
					break;
				}
			}
			if(s2 == null) {
				throw new js__$Boot_HaxeError("could not get a source");
			}
			s2.channel = c3;
			c3.source = s2;
			this.checkTargetFormat(c3.sound.getData(),c3.soundGroup.mono);
			s2.start = Math.floor(c3.position * this.targetRate);
			if(s2.start < 0) {
				s2.start = 0;
			}
			this.queueBuffer(s2,c3.sound,s2.start);
			c3.positionChanged = false;
			c3 = c3.next;
		}
		var usedEffects = null;
		var _g7 = 0;
		var _g14 = this.sources;
		while(_g7 < _g14.length) {
			var s3 = _g14[_g7];
			++_g7;
			var c4 = s3.channel;
			if(c4 == null) {
				continue;
			}
			var v = c4.currentVolume;
			if(s3.volume != v) {
				s3.volume = v;
				this.driver.setSourceVolume(s3.handle,v);
			}
			if(!s3.playing) {
				this.driver.playSource(s3.handle);
				s3.playing = true;
			}
			var i2 = c4.bindedEffects.length;
			while(--i2 >= 0) {
				var e1 = c4.bindedEffects[i2];
				if(c4.effects.indexOf(e1) < 0 && c4.channelGroup.effects.indexOf(e1) < 0) {
					this.unbindEffect(c4,s3,e1);
				}
			}
			var _g21 = 0;
			var _g31 = c4.channelGroup.effects;
			while(_g21 < _g31.length) {
				var e2 = _g31[_g21];
				++_g21;
				if(c4.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c4,s3,e2);
				}
			}
			var _g22 = 0;
			var _g32 = c4.effects;
			while(_g22 < _g32.length) {
				var e3 = _g32[_g22];
				++_g22;
				if(c4.bindedEffects.indexOf(e3) < 0) {
					this.bindEffect(c4,s3,e3);
				}
			}
			var _g23 = 0;
			var _g33 = c4.bindedEffects;
			while(_g23 < _g33.length) {
				var e4 = _g33[_g23];
				++_g23;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e4);
			}
		}
		var list1 = usedEffects;
		var cmp1 = $bind(this,this.sortEffect);
		if(list1 == null) {
			usedEffects = null;
		} else {
			var insize1 = 1;
			var nmerges1;
			var psize1 = 0;
			var qsize1 = 0;
			var p1;
			var q1;
			var e5;
			var tail1;
			while(true) {
				p1 = list1;
				list1 = null;
				tail1 = null;
				nmerges1 = 0;
				while(p1 != null) {
					++nmerges1;
					q1 = p1;
					psize1 = 0;
					var _g15 = 0;
					var _g8 = insize1;
					while(_g15 < _g8) {
						var i3 = _g15++;
						++psize1;
						q1 = q1.next;
						if(q1 == null) {
							break;
						}
					}
					qsize1 = insize1;
					while(psize1 > 0 || qsize1 > 0 && q1 != null) {
						if(psize1 == 0) {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						} else if(qsize1 == 0 || q1 == null || cmp1(p1,q1) <= 0) {
							e5 = p1;
							p1 = p1.next;
							--psize1;
						} else {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						}
						if(tail1 != null) {
							tail1.next = e5;
						} else {
							list1 = e5;
						}
						tail1 = e5;
					}
					p1 = q1;
				}
				tail1.next = null;
				if(nmerges1 <= 1) {
					break;
				}
				insize1 *= 2;
			}
			usedEffects = list1;
		}
		var e6 = usedEffects;
		while(e6 != null) {
			e6.driver.update(e6);
			e6 = e6.next;
		}
		var _g9 = 0;
		var _g16 = this.sources;
		while(_g9 < _g16.length) {
			var s4 = _g16[_g9];
			++_g9;
			var c5 = s4.channel;
			if(c5 == null) {
				continue;
			}
			var _g24 = 0;
			var _g34 = c5.bindedEffects;
			while(_g24 < _g34.length) {
				var e7 = _g34[_g24];
				++_g24;
				e7.driver.apply(e7,s4.handle);
			}
		}
		var _g10 = 0;
		var _g17 = this.effectGC;
		while(_g10 < _g17.length) {
			var e8 = _g17[_g10];
			++_g10;
			if(this.now - e8.lastStamp > e8.retainTime) {
				e8.driver.release();
				HxOverrides.remove(this.effectGC,e8);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		this.listener.direction.normalize();
		this.listener.up.normalize();
		this.driver.setMasterVolume(this.masterVolume);
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = new Date().getTime() / 1000;
			var k = this.soundBufferMap.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				var _this = this.soundBufferMap;
				var b2 = __map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1];
				if(b2.refs > 0 || b2.lastStop + 60.0 > now) {
					continue;
				}
				this.soundBufferMap.remove(k1);
				b2.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = hxd_impl_Tmp.getBytes(reqSize);
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = new Date().getTime() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		var wasInGC = HxOverrides.remove(this.effectGC,e);
		if(!wasInGC && e.refs == 0) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetRate = hxd_snd_openal_Emulator.NATIVE_FREQ;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var _g = dat.sampleFormat;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var _this = this.soundBufferMap;
		var b = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			var _this1 = this.soundBufferMap;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,b);
			} else {
				_this1.h[key] = b;
			}
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = samples * this.targetChannels;
			var size2;
			switch(this.targetFormat[1]) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleGain != b.audibleGain) {
			if(a.audibleGain < b.audibleGain) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g1 = 0;
	var _g = frame.length - 24;
	while(_g1 < _g) {
		var i = _g1++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_NativeChannel.getContext();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = ["hxd","snd","Mp3Data"];
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g1 = 0;
		var _g = buf.length;
		while(_g1 < _g) {
			var i = _g1++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_NativeChannel = function(bufferSamples) {
	this.bufferSamples = bufferSamples;
	var ctx = hxd_snd_NativeChannel.getContext();
	if(ctx == null) {
		return;
	}
	this.sproc = ctx.createScriptProcessor(bufferSamples,2,2);
	var this1 = new Float32Array(bufferSamples * 2);
	this.tmpBuffer = this1;
	this.sproc.connect(ctx.destination);
	this.sproc.onaudioprocess = $bind(this,this.onJsSample);
};
$hxClasses["hxd.snd.NativeChannel"] = hxd_snd_NativeChannel;
hxd_snd_NativeChannel.__name__ = ["hxd","snd","NativeChannel"];
hxd_snd_NativeChannel.getContext = function() {
	if(hxd_snd_NativeChannel.ctx == null) {
		try {
			hxd_snd_NativeChannel.ctx = new AudioContext();
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			try {
				hxd_snd_NativeChannel.ctx = new window.webkitAudioContext();
			} catch( e2 ) {
				var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
				hxd_snd_NativeChannel.ctx = null;
			}
		}
	}
	return hxd_snd_NativeChannel.ctx;
};
hxd_snd_NativeChannel.prototype = {
	onJsSample: function(event) {
		this.onSample(this.tmpBuffer);
		var r = 0;
		var left = event.outputBuffer.getChannelData(0);
		var right = event.outputBuffer.getChannelData(1);
		var _g1 = 0;
		var _g = this.bufferSamples;
		while(_g1 < _g) {
			var i = _g1++;
			left[i] = this.tmpBuffer[r++];
			right[i] = this.tmpBuffer[r++];
		}
	}
	,onSample: function(out) {
	}
	,stop: function() {
		if(this.sproc != null) {
			this.sproc.disconnect();
			this.sproc = null;
		}
	}
	,__class__: hxd_snd_NativeChannel
};
var hxd_snd__$OggData_BytesOutput = function() {
};
$hxClasses["hxd.snd._OggData.BytesOutput"] = hxd_snd__$OggData_BytesOutput;
hxd_snd__$OggData_BytesOutput.__name__ = ["hxd","snd","_OggData","BytesOutput"];
hxd_snd__$OggData_BytesOutput.__super__ = haxe_io_Output;
hxd_snd__$OggData_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	done: function() {
	}
	,init: function(bytes,position) {
		this.bytes = bytes;
		this.position = position;
	}
	,writeFloat: function(f) {
		this.bytes.setFloat(this.position,f);
		this.position += 4;
	}
	,writeInt16: function(i) {
		this.bytes.setUInt16(this.position,i);
		this.position += 2;
	}
	,__class__: hxd_snd__$OggData_BytesOutput
});
var hxd_snd_OggData = function(bytes) {
	if(bytes != null) {
		this.reader = stb_format_vorbis_Reader.openFromBytes(bytes);
		this.samples = this.reader.get_totalSample();
		this.channels = this.reader.get_header().channel;
		this.samplingRate = this.reader.get_header().sampleRate;
		this.sampleFormat = hxd_snd_SampleFormat.F32;
	}
	this.output = new hxd_snd__$OggData_BytesOutput();
	this.decodedFirst = 0;
	this.decodedLast = 0;
};
$hxClasses["hxd.snd.OggData"] = hxd_snd_OggData;
hxd_snd_OggData.__name__ = ["hxd","snd","OggData"];
hxd_snd_OggData.__super__ = hxd_snd_Data;
hxd_snd_OggData.prototype = $extend(hxd_snd_Data.prototype,{
	resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		switch(format[1]) {
		case 1:case 2:
			if(rate % this.samplingRate == 0 && channels >= this.channels) {
				var c = new hxd_snd_OggData(null);
				c.reader = this.reader;
				c.samples = this.samples;
				c.samplingRate = this.samplingRate;
				c.sampleFormat = format;
				c.channels = channels;
				return c;
			} else {
				return hxd_snd_Data.prototype.resample.call(this,rate,format,channels);
			}
			break;
		default:
			return hxd_snd_Data.prototype.resample.call(this,rate,format,channels);
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var last = sampleStart + sampleCount;
		var bpp = this.getBytesPerSample();
		if(sampleStart < this.decodedFirst || last > this.decodedLast) {
			var need = sampleCount - sampleStart;
			if(need > 132300 || this.samples > 132300) {
				this.output.init(out,outPos);
				this.reader.set_currentSample(sampleStart);
				this.reader.read(this.output,sampleCount,this.channels,this.samplingRate,this.sampleFormat == hxd_snd_SampleFormat.F32);
				this.output.done();
				return;
			}
			if(this.decoded == null) {
				this.decoded = new haxe_io_Bytes(new ArrayBuffer((this.samples < 132300 ? this.samples : 132300) * bpp));
			}
			need = 132300;
			if(sampleStart + need > this.samples) {
				need = this.samples - sampleStart;
			}
			this.output.init(this.decoded,0);
			this.reader.set_currentSample(sampleStart);
			this.reader.read(this.output,need,this.channels,this.samplingRate,this.sampleFormat == hxd_snd_SampleFormat.F32);
			this.output.done();
			this.decodedFirst = sampleStart;
			this.decodedLast = sampleStart + need;
			if(sampleStart == 0 && need == this.samples) {
				this.reader = null;
				this.output = null;
			}
		}
		out.blit(outPos,this.decoded,(sampleStart - this.decodedFirst) * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_OggData
});
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = ["hxd","snd","WavData"];
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var _g = h.bitsPerSample;
		var tmp;
		switch(_g) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_openal_BufferHandle = function() {
};
$hxClasses["hxd.snd.openal.BufferHandle"] = hxd_snd_openal_BufferHandle;
hxd_snd_openal_BufferHandle.__name__ = ["hxd","snd","openal","BufferHandle"];
hxd_snd_openal_BufferHandle.prototype = {
	__class__: hxd_snd_openal_BufferHandle
};
var hxd_snd_openal_SourceHandle = function() {
	this.nextAuxiliarySend = 0;
	this.freeAuxiliarySends = [];
	this.effectToAuxiliarySend = new haxe_ds_ObjectMap();
};
$hxClasses["hxd.snd.openal.SourceHandle"] = hxd_snd_openal_SourceHandle;
hxd_snd_openal_SourceHandle.__name__ = ["hxd","snd","openal","SourceHandle"];
hxd_snd_openal_SourceHandle.prototype = {
	__class__: hxd_snd_openal_SourceHandle
};
var hxd_snd_openal_Driver = function() {
	this.tmpBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.device = hxd_snd_openal_ALC.openDevice(null);
	this.context = hxd_snd_openal_ALC.createContext(this.device,null);
	hxd_snd_openal_ALC.makeContextCurrent(this.context);
	hxd_snd_openal_ALC.loadExtensions(this.device);
	hxd_snd_openal_Emulator.loadExtensions();
	var bytes = this.getTmpBytes(4);
	hxd_snd_openal_ALC.getIntegerv(this.device,131075,1,bytes);
	this.maxAuxiliarySends = bytes.getInt32(0);
	if(hxd_snd_openal_Emulator.getError() != 0) {
		throw new js__$Boot_HaxeError("could not init openAL Driver");
	}
};
$hxClasses["hxd.snd.openal.Driver"] = hxd_snd_openal_Driver;
hxd_snd_openal_Driver.__name__ = ["hxd","snd","openal","Driver"];
hxd_snd_openal_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_openal_Driver.prototype = {
	getTmpBytes: function(size) {
		if(this.tmpBytes.length < size) {
			this.tmpBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.tmpBytes;
	}
	,setMasterVolume: function(value) {
		hxd_snd_openal_Emulator.listenerf(4106,value);
	}
	,setListenerParams: function(position,direction,up,velocity) {
		hxd_snd_openal_Emulator.listener3f(4100,-position.x,position.y,position.z);
		var bytes = this.getTmpBytes(24);
		bytes.setFloat(0,-direction.x);
		bytes.setFloat(4,direction.y);
		bytes.setFloat(8,direction.z);
		up.normalize();
		bytes.setFloat(12,-up.x);
		bytes.setFloat(16,up.y);
		bytes.setFloat(20,up.z);
		hxd_snd_openal_Emulator.listenerfv(4111,this.tmpBytes);
		if(velocity != null) {
			hxd_snd_openal_Emulator.listener3f(4102,-velocity.x,velocity.y,velocity.z);
		}
	}
	,createSource: function() {
		var source = new hxd_snd_openal_SourceHandle();
		var bytes = this.getTmpBytes(4);
		hxd_snd_openal_Emulator.genSources(1,bytes);
		if(hxd_snd_openal_Emulator.getError() != 0) {
			throw new js__$Boot_HaxeError("could not create source");
		}
		var i = bytes.getInt32(0);
		source.inst = hxd_snd_openal_Source.all.h[i];
		hxd_snd_openal_Emulator.sourcei(source.inst,514,1);
		return source;
	}
	,playSource: function(source) {
		hxd_snd_openal_Emulator.sourcePlay(source.inst);
		source.playing = true;
	}
	,stopSource: function(source) {
		hxd_snd_openal_Emulator.sourceStop(source.inst);
		source.playing = false;
	}
	,setSourceVolume: function(source,value) {
		hxd_snd_openal_Emulator.sourcef(source.inst,4106,value);
	}
	,createBuffer: function() {
		var buffer = new hxd_snd_openal_BufferHandle();
		var bytes = this.getTmpBytes(4);
		hxd_snd_openal_Emulator.genBuffers(1,bytes);
		var i = bytes.getInt32(0);
		buffer.inst = hxd_snd_openal_Buffer.all.h[i];
		return buffer;
	}
	,destroyBuffer: function(buffer) {
		var bytes = this.getTmpBytes(4);
		bytes.setInt32(0,buffer.inst.id);
		hxd_snd_openal_Emulator.deleteBuffers(1,bytes);
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var alFormat;
		switch(format[1]) {
		case 0:
			alFormat = channelCount == 1 ? 4352 : 4354;
			break;
		case 1:
			alFormat = channelCount == 1 ? 4353 : 4355;
			break;
		case 2:
			alFormat = channelCount == 1 ? 4353 : 4355;
			break;
		}
		hxd_snd_openal_Emulator.bufferData(buffer.inst,alFormat,data,size,samplingRate);
	}
	,getPlayedSampleCount: function(source) {
		var v = source.sampleOffset + hxd_snd_openal_Emulator.getSourcei(source.inst,4133);
		if(v < 0) {
			v = 0;
		}
		return v;
	}
	,getProcessedBuffers: function(source) {
		return hxd_snd_openal_Emulator.getSourcei(source.inst,4118);
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var bytes = this.getTmpBytes(4);
		bytes.setInt32(0,buffer.inst.id);
		hxd_snd_openal_Emulator.sourceQueueBuffers(source.inst,1,bytes);
		if(hxd_snd_openal_Emulator.getError() != 0) {
			throw new js__$Boot_HaxeError("Failed to queue buffers : format differs");
		}
		if(hxd_snd_openal_Emulator.getSourcei(source.inst,4112) == 4116) {
			if(sampleStart > 0) {
				hxd_snd_openal_Emulator.sourcei(source.inst,4133,sampleStart);
				source.sampleOffset = -sampleStart;
			} else {
				source.sampleOffset = 0;
			}
			if(source.playing) {
				hxd_snd_openal_Emulator.sourcePlay(source.inst);
			}
		}
		buffer.isEnd = endOfStream;
	}
	,unqueueBuffer: function(source,buffer) {
		var bytes = this.getTmpBytes(4);
		bytes.setInt32(0,buffer.inst.id);
		hxd_snd_openal_Emulator.sourceUnqueueBuffers(source.inst,1,bytes);
		var size = hxd_snd_openal_Emulator.getBufferi(buffer.inst,8196);
		var bps = hxd_snd_openal_Emulator.getBufferi(buffer.inst,8194) * hxd_snd_openal_Emulator.getBufferi(buffer.inst,8195) / 8;
		var samples = size / bps | 0;
		if(buffer.isEnd) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += samples;
		}
	}
	,update: function() {
	}
	,getEffectDriver: function(type) {
		return new hxd_snd_EffectDriver();
	}
	,__class__: hxd_snd_openal_Driver
};
var hxd_snd_openal__$Emulator_Channel = function(source,samples) {
	this.startup = 0.;
	this.source = source;
	hxd_snd_NativeChannel.call(this,samples);
};
$hxClasses["hxd.snd.openal._Emulator.Channel"] = hxd_snd_openal__$Emulator_Channel;
hxd_snd_openal__$Emulator_Channel.__name__ = ["hxd","snd","openal","_Emulator","Channel"];
hxd_snd_openal__$Emulator_Channel.__super__ = hxd_snd_NativeChannel;
hxd_snd_openal__$Emulator_Channel.prototype = $extend(hxd_snd_NativeChannel.prototype,{
	onSample: function(out) {
		var pos = 0;
		var count = out.length >> 1;
		if(this.source.duration > 0) {
			var volume = this.source.volume;
			var bufferIndex = 0;
			var baseSample = 0;
			var curSample = this.source.currentSample;
			var buffer = this.source.buffers[bufferIndex++];
			while(count > 0) {
				while(buffer != null && curSample >= buffer.samples) {
					baseSample += buffer.samples;
					curSample -= buffer.samples;
					buffer = this.source.buffers[bufferIndex++];
				}
				if(buffer == null) {
					if(this.source.loop) {
						curSample = 0;
						baseSample = 0;
						bufferIndex = 0;
						buffer = this.source.buffers[bufferIndex++];
						continue;
					}
					break;
				}
				var scount = buffer.samples - curSample;
				if(scount > count) {
					scount = count;
				}
				var read = curSample << 1;
				var data = buffer.data;
				if(this.startup < 1) {
					var _g1 = 0;
					var _g = scount;
					while(_g1 < _g) {
						var i = _g1++;
						out[pos++] = data[read++] * volume * this.startup;
						out[pos++] = data[read++] * volume * this.startup;
						if(this.startup < 1.) {
							this.startup += 0.1;
							if(this.startup > 1) {
								this.startup = 1;
							}
						}
					}
				} else {
					var _g11 = 0;
					var _g2 = scount;
					while(_g11 < _g2) {
						var i1 = _g11++;
						out[pos++] = data[read++] * volume;
						out[pos++] = data[read++] * volume;
					}
				}
				count -= scount;
				curSample += scount;
			}
			this.source.currentSample = baseSample + curSample;
			if(this.source.currentSample < 0) {
				throw new js__$Boot_HaxeError(baseSample + "/" + curSample);
			}
		}
		var _g12 = 0;
		var _g3 = count << 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			out[pos++] = 0.;
		}
	}
	,__class__: hxd_snd_openal__$Emulator_Channel
});
var hxd_snd_openal_Source = function() {
	this.volume = 1.;
	this.loop = false;
	this.buffers = [];
	this.currentSample = 0;
	this.playedTime = 0.;
	this.id = ++hxd_snd_openal_Source.ID;
	hxd_snd_openal_Source.all.h[this.id] = this;
};
$hxClasses["hxd.snd.openal.Source"] = hxd_snd_openal_Source;
hxd_snd_openal_Source.__name__ = ["hxd","snd","openal","Source"];
hxd_snd_openal_Source.prototype = {
	updateDuration: function() {
		this.frequency = this.buffers.length == 0 ? 1 : this.buffers[0].frequency;
		this.duration = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.duration += b.samples / b.frequency;
		}
	}
	,play: function() {
		if(this.chan == null) {
			this.playedTime = new Date().getTime() / 1000 - this.currentSample / this.frequency;
			this.chan = new hxd_snd_openal__$Emulator_Channel(this,hxd_snd_openal_Source.CHANNEL_BUFSIZE);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = false;
		}
		if(this.chan != null) {
			if(immediate) {
				this.chan.stop();
			} else {
				haxe_Timer.delay(($_=this.chan,$bind($_,$_.stop)),200);
			}
			this.chan = null;
		}
	}
	,__class__: hxd_snd_openal_Source
};
var hxd_snd_openal_Buffer = function() {
	this.samples = 0;
	this.frequency = 1;
	this.id = ++hxd_snd_openal_Buffer.ID;
	hxd_snd_openal_Buffer.all.h[this.id] = this;
};
$hxClasses["hxd.snd.openal.Buffer"] = hxd_snd_openal_Buffer;
hxd_snd_openal_Buffer.__name__ = ["hxd","snd","openal","Buffer"];
hxd_snd_openal_Buffer.prototype = {
	dispose: function() {
		this.data = null;
		hxd_snd_openal_Buffer.all.remove(this.id);
		this.id = 0;
	}
	,alloc: function(size) {
		if(this.data == null || this.data.length != size) {
			var this1 = new Array(size);
			this.data = this1;
		}
		return this.data;
	}
	,__class__: hxd_snd_openal_Buffer
};
var hxd_snd_openal_Emulator = function() { };
$hxClasses["hxd.snd.openal.Emulator"] = hxd_snd_openal_Emulator;
hxd_snd_openal_Emulator.__name__ = ["hxd","snd","openal","Emulator"];
hxd_snd_openal_Emulator.getError = function() {
	return 0;
};
hxd_snd_openal_Emulator.loadExtensions = function() {
};
hxd_snd_openal_Emulator.listenerf = function(param,value) {
};
hxd_snd_openal_Emulator.listener3f = function(param,value1,value2,value3) {
};
hxd_snd_openal_Emulator.listenerfv = function(param,values) {
};
hxd_snd_openal_Emulator.genSources = function(n,sources) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		sources.setInt32(i << 2,new hxd_snd_openal_Source().id);
	}
};
hxd_snd_openal_Emulator.sourcef = function(source,param,value) {
	switch(param) {
	case 4099:
		break;
	case 4106:
		source.volume = value;
		break;
	case 4128:case 4129:case 4131:
		break;
	case 4132:
		source.currentSample = source.buffers.length == 0 ? 0 : value * source.frequency | 0;
		if(source.chan != null) {
			source.stop(true);
			source.play();
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_openal_Emulator.sourcei = function(source,param,value) {
	switch(param) {
	case 514:
		break;
	case 4103:
		source.loop = value != 0;
		break;
	case 4105:
		var b = hxd_snd_openal_Buffer.all.h[value];
		source.buffers = b == null ? [] : [b];
		source.updateDuration();
		source.currentSample = 0;
		break;
	case 4133:
		source.currentSample = hxd_snd_openal_Emulator.getSourcef(source,4132) / source.frequency | 0;
		if(source.chan != null) {
			source.stop(true);
			source.play();
		}
		break;
	case 131077:
		break;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_openal_Emulator.getSourcef = function(source,param) {
	if(param == 4132) {
		if(source.buffers.length == 0) {
			return 0;
		}
		var now = new Date().getTime() / 1000;
		var t = now - source.playedTime;
		var maxT = source.duration;
		if(source.loop) {
			while(t > maxT) {
				t -= maxT;
				source.playedTime += maxT;
			}
		} else if(t > maxT) {
			t = maxT;
		}
		return t;
	} else {
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_openal_Emulator.getSourcei = function(source,param) {
	switch(param) {
	case 4112:
		if(source.chan == null || source.buffers.length == 0 || !source.loop && new Date().getTime() / 1000 - source.playedTime >= source.duration) {
			return 4116;
		} else {
			return 4114;
		}
		break;
	case 4118:
		if(source.loop) {
			return 0;
		}
		var count = 0;
		var cur = source.currentSample;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(cur >= b.samples) {
				cur -= b.samples;
				++count;
			} else {
				break;
			}
		}
		return count;
	case 4133:
		return hxd_snd_openal_Emulator.getSourcef(source,4132) * source.frequency | 0;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_openal_Emulator.sourcePlay = function(source) {
	source.play();
};
hxd_snd_openal_Emulator.sourceStop = function(source) {
	source.stop();
	source.currentSample = 0;
};
hxd_snd_openal_Emulator.sourceQueueBuffers = function(source,nb,buffers) {
	var _g1 = 0;
	var _g = nb;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i * 4);
		var b = hxd_snd_openal_Buffer.all.h[i1];
		if(b == null) {
			throw new js__$Boot_HaxeError("assert");
		}
		source.buffers.push(b);
	}
	source.updateDuration();
};
hxd_snd_openal_Emulator.sourceUnqueueBuffers = function(source,nb,buffers) {
	var _g1 = 0;
	var _g = nb;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i * 4);
		var b = hxd_snd_openal_Buffer.all.h[i1];
		if(b != source.buffers[0]) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(source.chan != null) {
			if(source.currentSample < b.samples) {
				throw new js__$Boot_HaxeError("assert");
			}
			source.buffers.shift();
			source.currentSample -= b.samples;
			source.playedTime += b.samples / b.frequency;
		} else {
			source.buffers.shift();
		}
		source.updateDuration();
	}
};
hxd_snd_openal_Emulator.genBuffers = function(n,buffers) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		buffers.setInt32(i << 2,new hxd_snd_openal_Buffer().id);
	}
};
hxd_snd_openal_Emulator.deleteBuffers = function(n,buffers) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i << 2);
		hxd_snd_openal_Buffer.all.h[i1].dispose();
	}
};
hxd_snd_openal_Emulator.bufferData = function(buffer,format,data,size,freq) {
	if(freq != hxd_snd_openal_Emulator.NATIVE_FREQ) {
		throw new js__$Boot_HaxeError("Unsupported frequency value: " + freq + " should be " + hxd_snd_openal_Emulator.NATIVE_FREQ);
	}
	switch(format) {
	case 4352:
		var bdata = buffer.alloc(size * 2);
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			var v = data.b[i] / 255;
			bdata[i << 1] = v;
			bdata[i << 1 | 1] = v;
		}
		break;
	case 4353:
		var bdata1 = buffer.alloc(size);
		var _g11 = 0;
		var _g2 = size >> 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var v1 = data.getUInt16(i1 << 1);
			var v2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
			bdata1[i1 << 1] = v2;
			bdata1[i1 << 1 | 1] = v2;
		}
		break;
	case 4354:
		var bdata2 = buffer.alloc(size);
		var _g12 = 0;
		var _g3 = size;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var v3 = data.b[i2] / 255;
			bdata2[i2] = v3;
		}
		break;
	case 4355:
		var bdata3 = buffer.alloc(size >> 1);
		var _g13 = 0;
		var _g4 = size >> 1;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var v4 = data.getUInt16(i3 << 1);
			var v5 = ((v4 & 32768) == 0 ? v4 : v4 | -65536) / 32768;
			bdata3[i3] = v5;
		}
		break;
	case 4368:
		var bdata4 = buffer.alloc(size >> 1);
		var _g14 = 0;
		var _g5 = size >> 2;
		while(_g14 < _g5) {
			var i4 = _g14++;
			var f = data.getFloat(i4 << 2);
			bdata4[i4 << 1] = f;
			bdata4[i4 << 1 | 1] = f;
		}
		break;
	case 4369:
		var bdata5 = buffer.alloc(size >> 2);
		var _g15 = 0;
		var _g6 = size >> 2;
		while(_g15 < _g6) {
			var i5 = _g15++;
			buffer.data[i5] = data.getFloat(i5 << 2);
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Format not supported 0x" + StringTools.hex(format));
	}
	buffer.samples = buffer.data.length >> 1;
	buffer.frequency = freq;
};
hxd_snd_openal_Emulator.getBufferi = function(buffer,param) {
	switch(param) {
	case 8194:
		return 32;
	case 8195:
		return 2;
	case 8196:
		return buffer.data.length * 4;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
var hxd_snd_openal_Device = function() {
};
$hxClasses["hxd.snd.openal.Device"] = hxd_snd_openal_Device;
hxd_snd_openal_Device.__name__ = ["hxd","snd","openal","Device"];
hxd_snd_openal_Device.prototype = {
	__class__: hxd_snd_openal_Device
};
var hxd_snd_openal_Context = function(d) {
	this.device = d;
};
$hxClasses["hxd.snd.openal.Context"] = hxd_snd_openal_Context;
hxd_snd_openal_Context.__name__ = ["hxd","snd","openal","Context"];
hxd_snd_openal_Context.prototype = {
	__class__: hxd_snd_openal_Context
};
var hxd_snd_openal_ALC = function() { };
$hxClasses["hxd.snd.openal.ALC"] = hxd_snd_openal_ALC;
hxd_snd_openal_ALC.__name__ = ["hxd","snd","openal","ALC"];
hxd_snd_openal_ALC.createContext = function(device,attrlist) {
	return new hxd_snd_openal_Context(device);
};
hxd_snd_openal_ALC.makeContextCurrent = function(context) {
	hxd_snd_openal_ALC.ctx = context;
	return true;
};
hxd_snd_openal_ALC.openDevice = function(devicename) {
	return new hxd_snd_openal_Device();
};
hxd_snd_openal_ALC.loadExtensions = function(alDevice) {
};
hxd_snd_openal_ALC.getIntegerv = function(device,param,size,values) {
	if(param != 131075) {
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
var hxsl_Type = $hxClasses["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSamplerCube","TStruct","TFun","TArray","TChannel"] };
hxsl_Type.TVoid = ["TVoid",0];
hxsl_Type.TVoid.toString = $estr;
hxsl_Type.TVoid.__enum__ = hxsl_Type;
hxsl_Type.TInt = ["TInt",1];
hxsl_Type.TInt.toString = $estr;
hxsl_Type.TInt.__enum__ = hxsl_Type;
hxsl_Type.TBool = ["TBool",2];
hxsl_Type.TBool.toString = $estr;
hxsl_Type.TBool.__enum__ = hxsl_Type;
hxsl_Type.TFloat = ["TFloat",3];
hxsl_Type.TFloat.toString = $estr;
hxsl_Type.TFloat.__enum__ = hxsl_Type;
hxsl_Type.TString = ["TString",4];
hxsl_Type.TString.toString = $estr;
hxsl_Type.TString.__enum__ = hxsl_Type;
hxsl_Type.TVec = function(size,t) { var $x = ["TVec",5,size,t]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TMat3 = ["TMat3",6];
hxsl_Type.TMat3.toString = $estr;
hxsl_Type.TMat3.__enum__ = hxsl_Type;
hxsl_Type.TMat4 = ["TMat4",7];
hxsl_Type.TMat4.toString = $estr;
hxsl_Type.TMat4.__enum__ = hxsl_Type;
hxsl_Type.TMat3x4 = ["TMat3x4",8];
hxsl_Type.TMat3x4.toString = $estr;
hxsl_Type.TMat3x4.__enum__ = hxsl_Type;
hxsl_Type.TBytes = function(size) { var $x = ["TBytes",9,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TSampler2D = ["TSampler2D",10];
hxsl_Type.TSampler2D.toString = $estr;
hxsl_Type.TSampler2D.__enum__ = hxsl_Type;
hxsl_Type.TSamplerCube = ["TSamplerCube",11];
hxsl_Type.TSamplerCube.toString = $estr;
hxsl_Type.TSamplerCube.__enum__ = hxsl_Type;
hxsl_Type.TStruct = function(vl) { var $x = ["TStruct",12,vl]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TFun = function(variants) { var $x = ["TFun",13,variants]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TArray = function(t,size) { var $x = ["TArray",14,t,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TChannel = function(size) { var $x = ["TChannel",15,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxClasses["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"] };
hxsl_VecType.VInt = ["VInt",0];
hxsl_VecType.VInt.toString = $estr;
hxsl_VecType.VInt.__enum__ = hxsl_VecType;
hxsl_VecType.VFloat = ["VFloat",1];
hxsl_VecType.VFloat.toString = $estr;
hxsl_VecType.VFloat.__enum__ = hxsl_VecType;
hxsl_VecType.VBool = ["VBool",2];
hxsl_VecType.VBool.toString = $estr;
hxsl_VecType.VBool.__enum__ = hxsl_VecType;
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxClasses["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"] };
hxsl_SizeDecl.SConst = function(v) { var $x = ["SConst",0,v]; $x.__enum__ = hxsl_SizeDecl; $x.toString = $estr; return $x; };
hxsl_SizeDecl.SVar = function(v) { var $x = ["SVar",1,v]; $x.__enum__ = hxsl_SizeDecl; $x.toString = $estr; return $x; };
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = ["hxsl","Error"];
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxClasses["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"] };
hxsl_VarKind.Global = ["Global",0];
hxsl_VarKind.Global.toString = $estr;
hxsl_VarKind.Global.__enum__ = hxsl_VarKind;
hxsl_VarKind.Input = ["Input",1];
hxsl_VarKind.Input.toString = $estr;
hxsl_VarKind.Input.__enum__ = hxsl_VarKind;
hxsl_VarKind.Param = ["Param",2];
hxsl_VarKind.Param.toString = $estr;
hxsl_VarKind.Param.__enum__ = hxsl_VarKind;
hxsl_VarKind.Var = ["Var",3];
hxsl_VarKind.Var.toString = $estr;
hxsl_VarKind.Var.__enum__ = hxsl_VarKind;
hxsl_VarKind.Local = ["Local",4];
hxsl_VarKind.Local.toString = $estr;
hxsl_VarKind.Local.__enum__ = hxsl_VarKind;
hxsl_VarKind.Output = ["Output",5];
hxsl_VarKind.Output.toString = $estr;
hxsl_VarKind.Output.__enum__ = hxsl_VarKind;
hxsl_VarKind.Function = ["Function",6];
hxsl_VarKind.Function.toString = $estr;
hxsl_VarKind.Function.__enum__ = hxsl_VarKind;
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxClasses["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore"] };
hxsl_VarQualifier.Const = function(max) { var $x = ["Const",0,max]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Private = ["Private",1];
hxsl_VarQualifier.Private.toString = $estr;
hxsl_VarQualifier.Private.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Nullable = ["Nullable",2];
hxsl_VarQualifier.Nullable.toString = $estr;
hxsl_VarQualifier.Nullable.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.PerObject = ["PerObject",3];
hxsl_VarQualifier.PerObject.toString = $estr;
hxsl_VarQualifier.PerObject.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Name = function(n) { var $x = ["Name",4,n]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Shared = ["Shared",5];
hxsl_VarQualifier.Shared.toString = $estr;
hxsl_VarQualifier.Shared.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Precision = function(p) { var $x = ["Precision",6,p]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Range = function(min,max) { var $x = ["Range",7,min,max]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Ignore = ["Ignore",8];
hxsl_VarQualifier.Ignore.toString = $estr;
hxsl_VarQualifier.Ignore.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxClasses["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"] };
hxsl_Prec.Low = ["Low",0];
hxsl_Prec.Low.toString = $estr;
hxsl_Prec.Low.__enum__ = hxsl_Prec;
hxsl_Prec.Medium = ["Medium",1];
hxsl_Prec.Medium.toString = $estr;
hxsl_Prec.Medium.__enum__ = hxsl_Prec;
hxsl_Prec.High = ["High",2];
hxsl_Prec.High.toString = $estr;
hxsl_Prec.High.__enum__ = hxsl_Prec;
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxClasses["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"] };
hxsl_Const.CNull = ["CNull",0];
hxsl_Const.CNull.toString = $estr;
hxsl_Const.CNull.__enum__ = hxsl_Const;
hxsl_Const.CBool = function(b) { var $x = ["CBool",1,b]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CInt = function(v) { var $x = ["CInt",2,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CFloat = function(v) { var $x = ["CFloat",3,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CString = function(v) { var $x = ["CString",4,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxClasses["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"] };
hxsl_FunctionKind.Vertex = ["Vertex",0];
hxsl_FunctionKind.Vertex.toString = $estr;
hxsl_FunctionKind.Vertex.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Fragment = ["Fragment",1];
hxsl_FunctionKind.Fragment.toString = $estr;
hxsl_FunctionKind.Fragment.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Init = ["Init",2];
hxsl_FunctionKind.Init.toString = $estr;
hxsl_FunctionKind.Init.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Helper = ["Helper",3];
hxsl_FunctionKind.Helper.toString = $estr;
hxsl_FunctionKind.Helper.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxClasses["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture2D","TextureCube","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","DFdx","DFdy","Fwidth","TextureCubeLod","Texture2DLod","ChannelRead","Trace"] };
hxsl_TGlobal.Radians = ["Radians",0];
hxsl_TGlobal.Radians.toString = $estr;
hxsl_TGlobal.Radians.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Degrees = ["Degrees",1];
hxsl_TGlobal.Degrees.toString = $estr;
hxsl_TGlobal.Degrees.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sin = ["Sin",2];
hxsl_TGlobal.Sin.toString = $estr;
hxsl_TGlobal.Sin.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Cos = ["Cos",3];
hxsl_TGlobal.Cos.toString = $estr;
hxsl_TGlobal.Cos.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Tan = ["Tan",4];
hxsl_TGlobal.Tan.toString = $estr;
hxsl_TGlobal.Tan.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Asin = ["Asin",5];
hxsl_TGlobal.Asin.toString = $estr;
hxsl_TGlobal.Asin.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Acos = ["Acos",6];
hxsl_TGlobal.Acos.toString = $estr;
hxsl_TGlobal.Acos.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Atan = ["Atan",7];
hxsl_TGlobal.Atan.toString = $estr;
hxsl_TGlobal.Atan.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Pow = ["Pow",8];
hxsl_TGlobal.Pow.toString = $estr;
hxsl_TGlobal.Pow.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Exp = ["Exp",9];
hxsl_TGlobal.Exp.toString = $estr;
hxsl_TGlobal.Exp.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Log = ["Log",10];
hxsl_TGlobal.Log.toString = $estr;
hxsl_TGlobal.Log.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Exp2 = ["Exp2",11];
hxsl_TGlobal.Exp2.toString = $estr;
hxsl_TGlobal.Exp2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Log2 = ["Log2",12];
hxsl_TGlobal.Log2.toString = $estr;
hxsl_TGlobal.Log2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sqrt = ["Sqrt",13];
hxsl_TGlobal.Sqrt.toString = $estr;
hxsl_TGlobal.Sqrt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Inversesqrt = ["Inversesqrt",14];
hxsl_TGlobal.Inversesqrt.toString = $estr;
hxsl_TGlobal.Inversesqrt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Abs = ["Abs",15];
hxsl_TGlobal.Abs.toString = $estr;
hxsl_TGlobal.Abs.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sign = ["Sign",16];
hxsl_TGlobal.Sign.toString = $estr;
hxsl_TGlobal.Sign.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Floor = ["Floor",17];
hxsl_TGlobal.Floor.toString = $estr;
hxsl_TGlobal.Floor.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Ceil = ["Ceil",18];
hxsl_TGlobal.Ceil.toString = $estr;
hxsl_TGlobal.Ceil.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Fract = ["Fract",19];
hxsl_TGlobal.Fract.toString = $estr;
hxsl_TGlobal.Fract.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mod = ["Mod",20];
hxsl_TGlobal.Mod.toString = $estr;
hxsl_TGlobal.Mod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Min = ["Min",21];
hxsl_TGlobal.Min.toString = $estr;
hxsl_TGlobal.Min.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Max = ["Max",22];
hxsl_TGlobal.Max.toString = $estr;
hxsl_TGlobal.Max.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Clamp = ["Clamp",23];
hxsl_TGlobal.Clamp.toString = $estr;
hxsl_TGlobal.Clamp.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mix = ["Mix",24];
hxsl_TGlobal.Mix.toString = $estr;
hxsl_TGlobal.Mix.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Step = ["Step",25];
hxsl_TGlobal.Step.toString = $estr;
hxsl_TGlobal.Step.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Smoothstep = ["Smoothstep",26];
hxsl_TGlobal.Smoothstep.toString = $estr;
hxsl_TGlobal.Smoothstep.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Length = ["Length",27];
hxsl_TGlobal.Length.toString = $estr;
hxsl_TGlobal.Length.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Distance = ["Distance",28];
hxsl_TGlobal.Distance.toString = $estr;
hxsl_TGlobal.Distance.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Dot = ["Dot",29];
hxsl_TGlobal.Dot.toString = $estr;
hxsl_TGlobal.Dot.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Cross = ["Cross",30];
hxsl_TGlobal.Cross.toString = $estr;
hxsl_TGlobal.Cross.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Normalize = ["Normalize",31];
hxsl_TGlobal.Normalize.toString = $estr;
hxsl_TGlobal.Normalize.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.LReflect = ["LReflect",32];
hxsl_TGlobal.LReflect.toString = $estr;
hxsl_TGlobal.LReflect.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Texture2D = ["Texture2D",33];
hxsl_TGlobal.Texture2D.toString = $estr;
hxsl_TGlobal.Texture2D.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.TextureCube = ["TextureCube",34];
hxsl_TGlobal.TextureCube.toString = $estr;
hxsl_TGlobal.TextureCube.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToInt = ["ToInt",35];
hxsl_TGlobal.ToInt.toString = $estr;
hxsl_TGlobal.ToInt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToFloat = ["ToFloat",36];
hxsl_TGlobal.ToFloat.toString = $estr;
hxsl_TGlobal.ToFloat.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToBool = ["ToBool",37];
hxsl_TGlobal.ToBool.toString = $estr;
hxsl_TGlobal.ToBool.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec2 = ["Vec2",38];
hxsl_TGlobal.Vec2.toString = $estr;
hxsl_TGlobal.Vec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec3 = ["Vec3",39];
hxsl_TGlobal.Vec3.toString = $estr;
hxsl_TGlobal.Vec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec4 = ["Vec4",40];
hxsl_TGlobal.Vec4.toString = $estr;
hxsl_TGlobal.Vec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec2 = ["IVec2",41];
hxsl_TGlobal.IVec2.toString = $estr;
hxsl_TGlobal.IVec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec3 = ["IVec3",42];
hxsl_TGlobal.IVec3.toString = $estr;
hxsl_TGlobal.IVec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec4 = ["IVec4",43];
hxsl_TGlobal.IVec4.toString = $estr;
hxsl_TGlobal.IVec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec2 = ["BVec2",44];
hxsl_TGlobal.BVec2.toString = $estr;
hxsl_TGlobal.BVec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec3 = ["BVec3",45];
hxsl_TGlobal.BVec3.toString = $estr;
hxsl_TGlobal.BVec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec4 = ["BVec4",46];
hxsl_TGlobal.BVec4.toString = $estr;
hxsl_TGlobal.BVec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat2 = ["Mat2",47];
hxsl_TGlobal.Mat2.toString = $estr;
hxsl_TGlobal.Mat2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat3 = ["Mat3",48];
hxsl_TGlobal.Mat3.toString = $estr;
hxsl_TGlobal.Mat3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat4 = ["Mat4",49];
hxsl_TGlobal.Mat4.toString = $estr;
hxsl_TGlobal.Mat4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat3x4 = ["Mat3x4",50];
hxsl_TGlobal.Mat3x4.toString = $estr;
hxsl_TGlobal.Mat3x4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Saturate = ["Saturate",51];
hxsl_TGlobal.Saturate.toString = $estr;
hxsl_TGlobal.Saturate.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Pack = ["Pack",52];
hxsl_TGlobal.Pack.toString = $estr;
hxsl_TGlobal.Pack.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Unpack = ["Unpack",53];
hxsl_TGlobal.Unpack.toString = $estr;
hxsl_TGlobal.Unpack.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.PackNormal = ["PackNormal",54];
hxsl_TGlobal.PackNormal.toString = $estr;
hxsl_TGlobal.PackNormal.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.UnpackNormal = ["UnpackNormal",55];
hxsl_TGlobal.UnpackNormal.toString = $estr;
hxsl_TGlobal.UnpackNormal.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.DFdx = ["DFdx",56];
hxsl_TGlobal.DFdx.toString = $estr;
hxsl_TGlobal.DFdx.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.DFdy = ["DFdy",57];
hxsl_TGlobal.DFdy.toString = $estr;
hxsl_TGlobal.DFdy.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Fwidth = ["Fwidth",58];
hxsl_TGlobal.Fwidth.toString = $estr;
hxsl_TGlobal.Fwidth.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.TextureCubeLod = ["TextureCubeLod",59];
hxsl_TGlobal.TextureCubeLod.toString = $estr;
hxsl_TGlobal.TextureCubeLod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Texture2DLod = ["Texture2DLod",60];
hxsl_TGlobal.Texture2DLod.toString = $estr;
hxsl_TGlobal.Texture2DLod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ChannelRead = ["ChannelRead",61];
hxsl_TGlobal.ChannelRead.toString = $estr;
hxsl_TGlobal.ChannelRead.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Trace = ["Trace",62];
hxsl_TGlobal.Trace.toString = $estr;
hxsl_TGlobal.Trace.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture2D,hxsl_TGlobal.TextureCube,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.TextureCubeLod,hxsl_TGlobal.Texture2DLod,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.Trace];
var hxsl_Component = $hxClasses["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"] };
hxsl_Component.X = ["X",0];
hxsl_Component.X.toString = $estr;
hxsl_Component.X.__enum__ = hxsl_Component;
hxsl_Component.Y = ["Y",1];
hxsl_Component.Y.toString = $estr;
hxsl_Component.Y.__enum__ = hxsl_Component;
hxsl_Component.Z = ["Z",2];
hxsl_Component.Z.toString = $estr;
hxsl_Component.Z.__enum__ = hxsl_Component;
hxsl_Component.W = ["W",3];
hxsl_Component.W.toString = $estr;
hxsl_Component.W.__enum__ = hxsl_Component;
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxClasses["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"] };
hxsl_TExprDef.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TVar = function(v) { var $x = ["TVar",1,v]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TGlobal = function(g) { var $x = ["TGlobal",2,g]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TParenthesis = function(e) { var $x = ["TParenthesis",3,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TBlock = function(el) { var $x = ["TBlock",4,el]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TBinop = function(op,e1,e2) { var $x = ["TBinop",5,op,e1,e2]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TUnop = function(op,e1) { var $x = ["TUnop",6,op,e1]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TVarDecl = function(v,init) { var $x = ["TVarDecl",7,v,init]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TCall = function(e,args) { var $x = ["TCall",8,e,args]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TSwiz = function(e,regs) { var $x = ["TSwiz",9,e,regs]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TIf = function(econd,eif,eelse) { var $x = ["TIf",10,econd,eif,eelse]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TDiscard = ["TDiscard",11];
hxsl_TExprDef.TDiscard.toString = $estr;
hxsl_TExprDef.TDiscard.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TReturn = function(e) { var $x = ["TReturn",12,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TFor = function(v,it,loop) { var $x = ["TFor",13,v,it,loop]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TContinue = ["TContinue",14];
hxsl_TExprDef.TContinue.toString = $estr;
hxsl_TExprDef.TContinue.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TBreak = ["TBreak",15];
hxsl_TExprDef.TBreak.toString = $estr;
hxsl_TExprDef.TBreak.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TArray = function(e,index) { var $x = ["TArray",16,e,index]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TArrayDecl = function(el) { var $x = ["TArrayDecl",17,el]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TSwitch = function(e,cases,def) { var $x = ["TSwitch",18,e,cases,def]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TWhile = function(e,loop,normalWhile) { var $x = ["TWhile",19,e,loop,normalWhile]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TMeta = function(m,args,e) { var $x = ["TMeta",20,m,args,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = ["hxsl","Tools"];
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q[1] == 4) {
			var n = q[2];
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g[1]) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q[1] == 0) {
				var n = q[2];
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 15:
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	if(_g[1] == 15) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q[1] == 0) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.toString = function(t) {
	switch(t[1]) {
	case 5:
		var t1 = t[3];
		var size = t[2];
		var prefix;
		switch(t1[1]) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t[2];
		return "Bytes" + n;
	case 12:
		var vl = t[2];
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 14:
		var s = t[3];
		var t2 = t[2];
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s[1]) {
		case 0:
			var i = s[2];
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s[2];
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr(t[0],1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g[1]) {
	case 0:case 1:case 2:
		return false;
	case 3:
		var e1 = _g[2];
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g[2];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		switch(_g[2][1]) {
		case 4:case 20:
			return true;
		default:
			var e21 = _g[4];
			var e11 = _g[3];
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var e12 = _g[3];
		return hxsl_Tools.hasSideEffect(e12);
	case 9:
		var e3 = _g[2];
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 7:case 8:case 11:case 12:case 14:case 15:
		return true;
	case 16:
		var index = _g[3];
		var e4 = _g[2];
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g[2];
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e6 = _g[2];
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g11 = 0;
			var _g21 = c.values;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var loop1 = _g[3];
		var e7 = _g[2];
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var e8 = _g[4];
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g[1]) {
	case 3:
		var e1 = _g[2];
		f(e1);
		break;
	case 4:
		var el = _g[2];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var e21 = _g[4];
		var e11 = _g[3];
		f(e11);
		f(e21);
		break;
	case 6:
		var e12 = _g[3];
		f(e12);
		break;
	case 7:
		var init = _g[3];
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g[3];
		var e3 = _g[2];
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var e4 = _g[2];
		f(e4);
		break;
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g[2];
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		f(it);
		f(loop);
		break;
	case 0:case 1:case 2:case 11:case 14:case 15:
		break;
	case 16:
		var index = _g[3];
		var e6 = _g[2];
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g[2];
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e8 = _g[2];
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g11 = 0;
			var _g21 = c.values;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var loop1 = _g[3];
		var e9 = _g[2];
		f(e9);
		f(loop1);
		break;
	case 20:
		var e10 = _g[4];
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g[1]) {
	case 3:
		var e1 = _g[2];
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g[2];
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g[4];
		var e11 = _g[3];
		var op = _g[2];
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g[3];
		var op1 = _g[2];
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g[3];
		var v = _g[2];
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g[3];
		var e3 = _g[2];
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g[3];
		var e4 = _g[2];
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g[2];
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		var v1 = _g[2];
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 0:case 1:case 2:case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g[3];
		var e6 = _g[2];
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g[2];
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e8 = _g[2];
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g21 = [];
			var _g31 = 0;
			var _g41 = c1.values;
			while(_g31 < _g41.length) {
				var v2 = _g41[_g31];
				++_g31;
				_g21.push(f(v2));
			}
			_g4.push({ values : _g21, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g[4];
		var loop1 = _g[3];
		var e9 = _g[2];
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g[4];
		var args1 = _g[3];
		var m = _g[2];
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t[1]) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 5:
		var n = t[2];
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t[2];
		return s;
	case 2:case 4:case 10:case 11:case 13:
		return 0;
	case 12:
		var vl = t[2];
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		switch(t[3][1]) {
		case 0:
			var t1 = t[2];
			var v1 = t[3][2];
			return hxsl_Tools.size(t1) * v1;
		case 1:
			return 0;
		}
		break;
	case 15:
		var n1 = t[2];
		return n1;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = ["hxsl","Tools2"];
hxsl_Tools2.toString = function(g) {
	var n = g[0];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = ["hxsl","SearchMap"];
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = ["hxsl","Cache"];
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var key = vars.join(",");
		var _this = this.linkShaders;
		var shader = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var v = vars.slice();
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(vars.join(":")),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars = new haxe_ds_StringMap();
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g1 = 0;
			var _g = args.length;
			while(_g1 < _g) {
				var i = _g1++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = __map_reserved[path] != null ? outVars.getReserved(path) : outVars.h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g2 = parent.type;
				if(_g2[1] == 12) {
					var vl = _g2[2];
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			if(__map_reserved[path] != null) {
				outVars.setReserved(path,v1);
			} else {
				outVars.h[path] = v1;
			}
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2[1]) {
			case 0:
				var v3 = v2[2];
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2[3];
				var vname = v2[2];
				var v4 = __map_reserved[vname] != null ? outVars.getReserved(vname) : outVars.h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2[2];
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2[2];
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2[2];
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2[2];
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2[2];
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2[3];
				var v8 = v2[2];
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutExpr2 = makeOutExpr1;
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr2(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g3 = [];
			var _g11 = 0;
			while(_g11 < vars1.length) {
				var v10 = vars1[_g11];
				++_g11;
				_g3.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g3), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		var _this1 = this.linkShaders;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,shader);
		} else {
			_this1.h[key] = shader;
		}
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var linker = new hxsl_Linker();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s3 = shaderDatas[_g1];
			++_g1;
			_g.push(s3.inst.shader);
		}
		var s4 = linker.link(_g);
		var paramVars = new haxe_ds_IntMap();
		var _g11 = 0;
		var _g2 = linker.allVars;
		while(_g11 < _g2.length) {
			var v = _g2[_g11];
			++_g11;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g3 = v.v.type;
				if(_g3[1] == 12) {
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s4;
		var s5 = new hxsl_Splitter().split(s4);
		var prev1 = s5;
		var s6 = new hxsl_Dce().dce(s5.vertex,s5.fragment);
		var r = this.buildRuntimeShader(s6.vertex,s6.fragment,paramVars);
		var _g12 = [];
		var _g2_l = shaders;
		var _g2_last = null;
		while(_g2_l != _g2_last) {
			var s7 = _g2_l.s;
			_g2_l = _g2_l.next;
			var s8 = s7;
			_g12.push(new hxsl_ShaderInstanceDesc(s8.shader,s8.constBits));
		}
		r.spec = { instances : _g12, signature : null};
		var _g31 = 0;
		var _g21 = shaderDatas.length;
		while(_g31 < _g21) {
			var i1 = _g31++;
			var s9 = shaderDatas[shaderDatas.length - 1 - i1];
			r.spec.instances[s9.index].index = i1;
		}
		var _g22 = [];
		var _g32 = 0;
		var _g4 = r.spec.instances;
		while(_g32 < _g4.length) {
			var i2 = _g4[_g32];
			++_g32;
			_g22.push(i2.shader.data.name + "_" + i2.bits + "_" + i2.index);
		}
		var signParts = _g22;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		var key = r.signature;
		var _this = this.byID;
		var r2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			var key1 = r.signature;
			var _this1 = this.byID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,r);
			} else {
				_this1.h[key1] = r;
			}
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		c.consts = flat.consts;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			var _g = g1.kind;
			switch(_g[1]) {
			case 0:
				var _g1 = [];
				var _g11 = 0;
				while(_g11 < alloc.length) {
					var a = alloc[_g11];
					++_g11;
					if(a.v != null) {
						_g1.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g1;
				var _g2 = 0;
				var _g12 = out.length - 1;
				while(_g2 < _g12) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g13 = g1.type;
				if(_g13[1] == 14) {
					if(_g13[2][1] == 5) {
						if(_g13[2][2] == 4) {
							if(_g13[2][3][1] == 1) {
								if(_g13[3][1] == 0) {
									var size = _g13[3][2];
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g3 = 0;
				while(_g3 < alloc.length) {
					var a1 = alloc[_g3];
					++_g3;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g14 = 0;
				var _g4 = out1.length - 1;
				while(_g14 < _g4) {
					var i1 = _g14++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g5 = g1.type;
				if(_g5[1] == 14) {
					switch(_g5[2][1]) {
					case 5:
						if(_g5[2][2] == 4) {
							if(_g5[2][3][1] == 1) {
								if(_g5[3][1] == 0) {
									var size1 = _g5[3][2];
									c.params = out1[0];
									c.paramsSize = size1;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						break;
					case 10:
						c.textures2D = out1[0];
						c.textures2DCount = out1.length;
						break;
					case 11:
						c.texturesCube = out1[0];
						c.texturesCubeCount = out1.length;
						break;
					default:
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.textures2D == null) {
			c.textures2DCount = 0;
		}
		if(c.texturesCube == null) {
			c.texturesCubeCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxClasses["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"] };
hxsl_Channel.Unknown = ["Unknown",0];
hxsl_Channel.Unknown.toString = $estr;
hxsl_Channel.Unknown.__enum__ = hxsl_Channel;
hxsl_Channel.R = ["R",1];
hxsl_Channel.R.toString = $estr;
hxsl_Channel.R.__enum__ = hxsl_Channel;
hxsl_Channel.G = ["G",2];
hxsl_Channel.G.toString = $estr;
hxsl_Channel.G.__enum__ = hxsl_Channel;
hxsl_Channel.B = ["B",3];
hxsl_Channel.B.toString = $estr;
hxsl_Channel.B.__enum__ = hxsl_Channel;
hxsl_Channel.A = ["A",4];
hxsl_Channel.A.toString = $estr;
hxsl_Channel.A.__enum__ = hxsl_Channel;
hxsl_Channel.PackedFloat = ["PackedFloat",5];
hxsl_Channel.PackedFloat.toString = $estr;
hxsl_Channel.PackedFloat.__enum__ = hxsl_Channel;
hxsl_Channel.PackedNormal = ["PackedNormal",6];
hxsl_Channel.PackedNormal.toString = $estr;
hxsl_Channel.PackedNormal.__enum__ = hxsl_Channel;
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = ["hxsl","Clone"];
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t[1]) {
		case 12:
			var vl = t[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 13:
			var vars = t[2];
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < vars.length) {
				var v1 = vars[_g11];
				++_g11;
				var _g21 = [];
				var _g3 = 0;
				var _g4 = v1.args;
				while(_g3 < _g4.length) {
					var a = _g4[_g3];
					++_g3;
					_g21.push({ name : a.name, type : this.ttype(a.type)});
				}
				_g2.push({ args : _g21, ret : this.ttype(v1.ret)});
			}
			return hxsl_Type.TFun(_g2);
		case 14:
			var size = t[3];
			var t1 = t[2];
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size[1]) {
			case 0:
				tmp1 = size;
				break;
			case 1:
				var v2 = size[2];
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v2));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g[3];
			var v1 = _g[2];
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v2 = _g[2];
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g11 = [];
		var _g21 = 0;
		var _g3 = s.funs;
		while(_g21 < _g3.length) {
			var f = _g3[_g21];
			++_g21;
			_g11.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g11};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = ["hxsl","_Dce","VarDeps"];
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = ["hxsl","Dce"];
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g11 = fragment.vars;
		while(_g2 < _g11.length) {
			var v1 = _g11[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g3 = 0;
		var _g12 = vertex.funs;
		while(_g3 < _g12.length) {
			var f = _g12[_g3];
			++_g3;
			this.check(f.expr,[],[]);
		}
		var _g4 = 0;
		var _g13 = fragment.funs;
		while(_g4 < _g13.length) {
			var f1 = _g13[_g4];
			++_g4;
			this.check(f1.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v2 = this.used.iterator();
			while(v2.hasNext()) {
				var v3 = v2.next();
				if(v3.keep) {
					this.markRec(v3);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g5 = 0;
			while(_g5 < inputs.length) {
				var v4 = inputs[_g5];
				++_g5;
				this.markRec(v4);
			}
			outExprs = [];
			var _g6 = 0;
			var _g14 = vertex.funs;
			while(_g6 < _g14.length) {
				var f2 = _g14[_g6];
				++_g6;
				outExprs.push(this.mapExpr(f2.expr,false));
			}
			var _g7 = 0;
			var _g15 = fragment.funs;
			while(_g7 < _g15.length) {
				var f3 = _g15[_g7];
				++_g7;
				outExprs.push(this.mapExpr(f3.expr,false));
			}
			this.markAsKeep = false;
			var _g8 = 0;
			while(_g8 < outExprs.length) {
				var e = outExprs[_g8];
				++_g8;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g9 = 0;
		var _g16 = vertex.funs;
		while(_g9 < _g16.length) {
			var f4 = _g16[_g9];
			++_g9;
			f4.expr = outExprs.shift();
		}
		var _g10 = 0;
		var _g17 = fragment.funs;
		while(_g10 < _g17.length) {
			var f5 = _g17[_g10];
			++_g10;
			f5.expr = outExprs.shift();
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			this.link(v,writeTo);
			break;
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var e1 = _g[4];
					var v1 = _g[3].e[2];
					var v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e2 = _g[4];
						var v3 = _g[3].e[2].e[2];
						var v4 = this.get(v3);
						writeTo.push(v4);
						this.check(e2,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v4) < 0) {
							isAffected.push(v4);
						}
					} else {
						var f = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var e5 = _g[4];
					var v5 = _g[3].e[2];
					var v6 = this.get(v5);
					writeTo.push(v6);
					this.check(e5,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v6) < 0) {
						isAffected.push(v6);
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e6 = _g[4];
						var v7 = _g[3].e[2].e[2];
						var v8 = this.get(v7);
						writeTo.push(v8);
						this.check(e6,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v8) < 0) {
							isAffected.push(v8);
						}
					} else {
						var f2 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g[3];
			var v9 = _g[2];
			if(init != null) {
				writeTo.push(this.get(v9));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 61) {
					if(_g[3].length == 3) {
						if(_g[3][0].e[1] == 1) {
							if(_g[3][2].e[1] == 0) {
								if(_g[3][2].e[2][1] == 2) {
									var c = _g[3][0].e[2];
									var uv = _g[3][1];
									var cid = _g[3][2].e[2][2];
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,writeTo7,isAffected7);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,writeTo8,isAffected8);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,writeTo9,isAffected9);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,writeTo10,isAffected10);
						});
					}
				} else {
					var f10 = $bind(this,this.check);
					var writeTo11 = writeTo;
					var isAffected11 = isAffected;
					hxsl_Tools.iter(e,function(e15) {
						f10(e15,writeTo11,isAffected11);
					});
				}
			} else {
				var f11 = $bind(this,this.check);
				var writeTo12 = writeTo;
				var isAffected12 = isAffected;
				hxsl_Tools.iter(e,function(e16) {
					f11(e16,writeTo12,isAffected12);
				});
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var e17 = _g[2];
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g1 = 0;
			while(_g1 < writeTo.length) {
				var v10 = writeTo[_g1];
				++_g1;
				if(affect.indexOf(v10) < 0) {
					affect.push(v10);
				}
			}
			this.check(e17,affect,isAffected);
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var i = _g11++;
				var v11 = affect[i];
				if(isAffected.indexOf(v11) < 0) {
					isAffected.push(v11);
				}
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v12 = _g[2];
			var affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			var _g3 = 0;
			while(_g3 < affect1.length) {
				var v13 = affect1[_g3];
				++_g3;
				if(isAffected.indexOf(v13) < 0) {
					isAffected.push(v13);
				}
			}
			break;
		default:
			var f12 = $bind(this,this.check);
			var writeTo13 = writeTo;
			var isAffected13 = isAffected;
			hxsl_Tools.iter(e,function(e18) {
				f12(e18,writeTo13,isAffected13);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g[1] == 10) {
			var cond = _g[2];
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var v = _g[3].e[2];
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var v1 = _g[3].e[2].e[2];
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var v2 = _g[3].e[2];
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var v3 = _g[3].e[2].e[2];
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var v4 = _g[2];
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 61) {
					if(_g[3].length == 3) {
						if(_g[3][2].e[1] == 0) {
							if(_g[3][2].e[2][1] == 2) {
								var uv = _g[3][1];
								var cid = _g[3][2].e[2][2];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture2D), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},uv]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
				} else {
					return hxsl_Tools.map(e,function(e16) {
						return _gthis.mapExpr(e16,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e17) {
					return _gthis.mapExpr(e17,true);
				});
			}
			break;
		case 10:
			var eelse = _g[4];
			var econd = _g[3];
			var e18 = _g[2];
			var e19 = this.mapExpr(e18,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e19.t, p : e19.p};
			}
			return { e : hxsl_TExprDef.TIf(e19,econd1,eelse1), p : e19.p, t : e19.t};
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v5 = _g[2];
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e20) {
				return _gthis.mapExpr(e20,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = ["hxsl","Eval"];
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		v2 = { id : _g[1] == 15 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g1 = v2.type;
		switch(_g1[1]) {
		case 12:
			var vl = _g1[2];
			var _g11 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v1 = vl[_g2];
				++_g2;
				_g11.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g11);
			break;
		case 14:
			if(_g1[3][1] == 1) {
				var t = _g1[2];
				var vs = _g1[3][2];
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c[1] == 0) {
						if(c[2][1] == 2) {
							var v3 = c[2][2];
							v2.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					v2.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g11 = 0;
		var _g5 = funs.length;
		while(_g11 < _g5) {
			var i = _g11++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g6 = [];
		var _g12 = 0;
		var _g21 = s.vars;
		while(_g12 < _g21.length) {
			var v = _g21[_g12];
			++_g12;
			_g6.push(this.mapVar(v));
		}
		return { name : s1, vars : _g6, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g[1] == 12) {
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g[1]) {
		case 3:
			var v = _g[2];
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g[2];
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1[1]) {
					case 10:
						if(_g1[4] == null) {
							var econd = _g1[2];
							var eif = _g1[3];
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1[2];
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g[4];
			var eif1 = _g[3];
			var cond = _g[2];
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g[2];
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g[1]) {
		case 36:
			if(args.length == 1) {
				if(args[0].e[1] == 0) {
					if(args[0].e[2][1] == 2) {
						var i = args[0].e[2][2];
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 61:
			if(args.length == 2) {
				if(args[0].e[1] == 0) {
					if(args[0].e[2][1] == 2) {
						var uv = args[1];
						var i1 = args[0].e[2][2];
						var channel = oldArgs[0];
						var _g = channel.e;
						var tmp;
						if(_g[1] == 1) {
							var v = _g[2];
							tmp = hxsl_TExprDef.TVar(this.mapVar(v));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						channel.e = tmp;
						var count;
						var _g1 = channel.t;
						if(_g1[1] == 15) {
							var i2 = _g1[2];
							count = i2;
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
						var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ChannelRead), t : hxsl_Type.TVoid, p : pos},[channel,uv,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos}]), t : hxsl_Type.TVoid, p : pos};
						switch(channelMode[1]) {
						case 0:
							var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
							if(count == 1) {
								return zero.e;
							}
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
						case 1:case 2:case 3:case 4:
							var tmp1;
							switch(channelMode[1]) {
							case 1:
								tmp1 = hxsl_Component.X;
								break;
							case 2:
								tmp1 = hxsl_Component.Y;
								break;
							case 3:
								tmp1 = hxsl_Component.Z;
								break;
							default:
								tmp1 = hxsl_Component.W;
							}
							return hxsl_TExprDef.TSwiz(tget,[tmp1]);
						case 5:
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
						case 6:
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
						}
					} else {
						var t = args[0];
						return hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(t,true) + " " + this.constantsToString(),pos);
					}
				} else {
					var t1 = args[0];
					return hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(t1,true) + " " + this.constantsToString(),pos);
				}
			} else {
				return null;
			}
			break;
		case 62:
			var args1 = args;
			var _g2 = 0;
			while(_g2 < args1.length) {
				var a = args1[_g2];
				++_g2;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 0:case 2:
			d = e.e;
			break;
		case 3:
			var e1 = _g[2];
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			d = _g1[1] == 0 ? e2.e : hxsl_TExprDef.TParenthesis(e2);
			break;
		case 4:
			var el = _g[2];
			var out = [];
			var last = el.length - 1;
			var _g11 = 0;
			var _g2 = el.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g21 = e3.e;
				switch(_g21[1]) {
				case 0:case 1:
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op[1]) {
			case 0:
				var _g3 = e22.e;
				var _g12 = e12.e;
				if(_g12[1] == 0) {
					switch(_g12[2][1]) {
					case 2:
						if(_g3[1] == 0) {
							if(_g3[2][1] == 2) {
								var a = _g12[2][2];
								var b = _g3[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g3[1] == 0) {
							if(_g3[2][1] == 3) {
								var a1 = _g12[2][2];
								var b1 = _g3[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g4 = e22.e;
				var _g13 = e12.e;
				if(_g13[1] == 0) {
					switch(_g13[2][1]) {
					case 2:
						if(_g4[1] == 0) {
							if(_g4[2][1] == 2) {
								var a2 = _g13[2][2];
								var b2 = _g4[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g4[1] == 0) {
							if(_g4[2][1] == 3) {
								var a3 = _g13[2][2];
								var b3 = _g4[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14[1] == 0) {
					switch(_g14[2][1]) {
					case 2:
						if(_g5[1] == 0) {
							if(_g5[2][1] == 2) {
								var a4 = _g14[2][2];
								var b4 = _g5[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5[1] == 0) {
							if(_g5[2][1] == 3) {
								var a5 = _g14[2][2];
								var b5 = _g5[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15[1] == 0) {
					switch(_g15[2][1]) {
					case 2:
						if(_g6[1] == 0) {
							if(_g6[2][1] == 2) {
								var a6 = _g15[2][2];
								var b6 = _g6[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6[1] == 0) {
							if(_g6[2][1] == 3) {
								var a7 = _g15[2][2];
								var b7 = _g6[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 5:
				var _g7 = e22.e;
				var _g16 = e12.e;
				if(_g16[1] == 0) {
					switch(_g16[2][1]) {
					case 0:
						d = _g7[1] == 0 ? _g7[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g16[2][2];
								var b8 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g16[2][2];
								var b9 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g16[2][2];
								var b10 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g16[2][2];
								var b11 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g8 = e22.e;
				var _g17 = e12.e;
				if(_g17[1] == 0) {
					switch(_g17[2][1]) {
					case 0:
						d = _g8[1] == 0 ? _g8[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g17[2][2];
								var b12 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g17[2][2];
								var b13 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g17[2][2];
								var b14 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g17[2][2];
								var b15 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g9 = e22.e;
				var _g18 = e12.e;
				if(_g18[1] == 0) {
					switch(_g18[2][1]) {
					case 0:
						d = _g9[1] == 0 ? _g9[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g18[2][2];
								var b16 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g18[2][2];
								var b17 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g18[2][2];
								var b18 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g18[2][2];
								var b19 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g10 = e22.e;
				var _g19 = e12.e;
				if(_g19[1] == 0) {
					switch(_g19[2][1]) {
					case 0:
						d = _g10[1] == 0 ? _g10[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g19[2][2];
								var b20 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g19[2][2];
								var b21 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g19[2][2];
								var b22 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g19[2][2];
								var b23 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g20 = e22.e;
				var _g110 = e12.e;
				if(_g110[1] == 0) {
					switch(_g110[2][1]) {
					case 0:
						d = _g20[1] == 0 ? _g20[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g110[2][2];
								var b24 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g110[2][2];
								var b25 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g110[2][2];
								var b26 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g110[2][2];
								var b27 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g22 = e22.e;
				var _g111 = e12.e;
				if(_g111[1] == 0) {
					switch(_g111[2][1]) {
					case 0:
						d = _g22[1] == 0 ? _g22[2][1] == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g111[2][2];
								var b28 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g111[2][2];
								var b29 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g111[2][2];
								var b30 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g111[2][2];
								var b31 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g23 = e22.e;
				var _g112 = e12.e;
				if(_g112[1] == 0) {
					if(_g112[2][1] == 2) {
						if(_g23[1] == 0) {
							if(_g23[2][1] == 2) {
								var a32 = _g112[2][2];
								var b32 = _g23[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g24 = e22.e;
				var _g113 = e12.e;
				if(_g113[1] == 0) {
					if(_g113[2][1] == 2) {
						if(_g24[1] == 0) {
							if(_g24[2][1] == 2) {
								var a33 = _g113[2][2];
								var b33 = _g24[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g25 = e22.e;
				var _g114 = e12.e;
				if(_g114[1] == 0) {
					if(_g114[2][1] == 2) {
						if(_g25[1] == 0) {
							if(_g25[2][1] == 2) {
								var a34 = _g114[2][2];
								var b34 = _g25[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g26 = e22.e;
				var _g115 = e12.e;
				if(_g115[1] == 0) {
					if(_g115[2][1] == 1) {
						if(_g26[1] == 0) {
							if(_g26[2][1] == 1) {
								var a35 = _g115[2][2];
								var b35 = _g26[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g115[2][2];
								d = a36 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a36)) : e22.e;
							}
						} else {
							var a37 = _g115[2][2];
							d = a37 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a37)) : e22.e;
						}
					} else if(_g26[1] == 0) {
						if(_g26[2][1] == 1) {
							var a38 = _g26[2][2];
							d = a38 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a38)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g26[1] == 0) {
					if(_g26[2][1] == 1) {
						var a39 = _g26[2][2];
						d = a39 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a39)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g27 = e22.e;
				var _g116 = e12.e;
				if(_g116[1] == 0) {
					if(_g116[2][1] == 1) {
						if(_g27[1] == 0) {
							if(_g27[2][1] == 1) {
								var a40 = _g116[2][2];
								var b36 = _g27[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g116[2][2];
								d = a41 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a41)) : e22.e;
							}
						} else {
							var a42 = _g116[2][2];
							d = a42 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a42)) : e22.e;
						}
					} else if(_g27[1] == 0) {
						if(_g27[2][1] == 1) {
							var a43 = _g27[2][2];
							d = a43 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a43)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g27[1] == 0) {
					if(_g27[2][1] == 1) {
						var a44 = _g27[2][2];
						d = a44 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a44)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g28 = e22.e;
				var _g117 = e12.e;
				if(_g117[1] == 0) {
					if(_g117[2][1] == 2) {
						if(_g28[1] == 0) {
							if(_g28[2][1] == 2) {
								var a45 = _g117[2][2];
								var b37 = _g28[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g29 = e22.e;
				var _g118 = e12.e;
				if(_g118[1] == 0) {
					if(_g118[2][1] == 2) {
						if(_g29[1] == 0) {
							if(_g29[2][1] == 2) {
								var a46 = _g118[2][2];
								var b38 = _g29[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g30 = e22.e;
				var _g119 = e12.e;
				if(_g119[1] == 0) {
					if(_g119[2][1] == 2) {
						if(_g30[1] == 0) {
							if(_g30[2][1] == 2) {
								var a47 = _g119[2][2];
								var b39 = _g30[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g31 = e22.e;
				var _g120 = e12.e;
				if(_g120[1] == 0) {
					switch(_g120[2][1]) {
					case 2:
						if(_g31[1] == 0) {
							if(_g31[2][1] == 2) {
								var a48 = _g120[2][2];
								var b40 = _g31[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g31[1] == 0) {
							if(_g31[2][1] == 3) {
								var a49 = _g120[2][2];
								var b41 = _g31[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 20:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
			case 23:
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 6:
			var e4 = _g[3];
			var op1 = _g[2];
			var e5 = this.evalExpr(e4);
			var _g32 = e5.e;
			if(_g32[1] == 0) {
				var c1 = _g32[2];
				switch(op1[1]) {
				case 2:
					if(c1[1] == 1) {
						var b42 = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1[1]) {
					case 2:
						var i1 = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g[3];
			var v1 = _g[2];
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g[3];
			var c2 = _g[2];
			var c3 = this.evalExpr(c2);
			var _g33 = [];
			var _g121 = 0;
			while(_g121 < eargs.length) {
				var a50 = eargs[_g121];
				++_g121;
				_g33.push(this.evalExpr(a50));
			}
			var args = _g33;
			var _g122 = c3.e;
			switch(_g122[1]) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g122[2];
					if(this.funMap.h.__keys__[v3.__id__] != null) {
						var f1 = this.funMap.h[v3.__id__];
						var outExprs = [];
						var undo = [];
						var _g210 = 0;
						var _g123 = f1.args.length;
						while(_g210 < _g123) {
							var i2 = _g210++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g34 = e6.e;
							switch(_g34[1]) {
							case 0:
								var old = [this.constants.h[v4[0].id]];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.h[v5[0].id] = old1[0];
										}
									};
								})(old,v4));
								this.constants.h[v4[0].id] = e6.e;
								break;
							case 1:
								switch(_g34[2].kind[1]) {
								case 0:case 1:case 2:
									var old2 = [this.constants.h[v4[0].id]];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.h[v6[0].id] = old3[0];
											}
										};
									})(old2,v4));
									this.constants.h[v4[0].id] = e6.e;
									break;
								default:
									var old4 = [this.varMap.h[v4[0].__id__]];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.h[v4[0].__id__]];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g124 = 0;
						while(_g124 < undo.length) {
							var u = undo[_g124];
							++_g124;
							u();
						}
						var _g125 = e7.e;
						if(_g125[1] == 4) {
							var el1 = _g125[2];
							var _g126 = 0;
							while(_g126 < el1.length) {
								var e8 = el1[_g126];
								++_g126;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g122[2];
				var v11 = this.evalCall(g,args,eargs,e.p);
				d = v11 != null ? v11 : hxsl_TExprDef.TCall(c3,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g[3];
			var e9 = _g[2];
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			var econd1 = this.evalExpr(econd);
			var _g35 = econd1.e;
			if(_g35[1] == 0) {
				if(_g35[2][1] == 1) {
					var b43 = _g35[2][2];
					d = b43 ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else {
					d = isVal && eelse != null && this.eliminateConditionals ? hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]) : hxsl_TExprDef.TIf(econd1,this.evalExpr(eif,isVal),eelse == null ? null : this.evalExpr(eelse,isVal));
				}
			} else {
				d = isVal && eelse != null && this.eliminateConditionals ? hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]) : hxsl_TExprDef.TIf(econd1,this.evalExpr(eif,isVal),eelse == null ? null : this.evalExpr(eelse,isVal));
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g[2];
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v12 = _g[2];
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g36 = it1.e;
			if(_g36[1] == 5) {
				if(_g36[2][1] == 21) {
					if(_g36[3].e[1] == 0) {
						if(_g36[3].e[2][1] == 2) {
							if(_g36[4].e[1] == 0) {
								if(_g36[4].e[2][1] == 2) {
									var start = _g36[3].e[2][2];
									var len = _g36[4].e[2][2];
									if(this.unrollLoops) {
										var out1 = [];
										var _g127 = start;
										var _g37 = len;
										while(_g127 < _g37) {
											var i3 = _g127++;
											this.constants.h[v12.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i3));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g[3];
			var e14 = _g[2];
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g38 = e24.e;
			var _g128 = e15.e;
			if(_g128[1] == 17) {
				if(_g38[1] == 0) {
					if(_g38[2][1] == 2) {
						var el2 = _g128[2];
						var i4 = _g38[2][2];
						d = i4 >= 0 && i4 < el2.length ? el2[i4].e : hxsl_TExprDef.TArray(e15,e24);
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g[2];
			var _g39 = [];
			var _g129 = 0;
			while(_g129 < el3.length) {
				var e16 = el3[_g129];
				++_g129;
				_g39.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g39);
			break;
		case 18:
			var def = _g[4];
			var cases = _g[3];
			var e17 = _g[2];
			var e18 = this.evalExpr(e17);
			var _g40 = [];
			var _g130 = 0;
			while(_g130 < cases.length) {
				var c4 = cases[_g130];
				++_g130;
				var _g211 = [];
				var _g310 = 0;
				var _g41 = c4.values;
				while(_g310 < _g41.length) {
					var v13 = _g41[_g310];
					++_g310;
					_g211.push(this.evalExpr(v13));
				}
				_g40.push({ values : _g211, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g40;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g131 = e18.e;
			if(_g131[1] == 0) {
				var c5 = _g131[2];
				if(c5[1] == 2) {
					var val = c5[2];
					var _g132 = 0;
					while(_g132 < cases1.length) {
						var c6 = cases1[_g132];
						++_g132;
						var _g212 = 0;
						var _g311 = c6.values;
						while(_g212 < _g311.length) {
							var v14 = _g311[_g212];
							++_g212;
							var _g42 = v14.e;
							if(_g42[1] == 0) {
								var cst = _g42[2];
								switch(cst[1]) {
								case 2:
									var k = cst[2];
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst[2];
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e18,cases1,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g[4];
			var loop1 = _g[3];
			var cond = _g[2];
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,loop2,normalWhile);
			break;
		case 20:
			var e19 = _g[4];
			var args1 = _g[3];
			var name = _g[2];
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = ["hxsl","_Flatten","Alloc"];
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxClasses["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"] };
hxsl_ARead.AIndex = function(a) { var $x = ["AIndex",0,a]; $x.__enum__ = hxsl_ARead; $x.toString = $estr; return $x; };
hxsl_ARead.AOffset = function(a,stride,delta) { var $x = ["AOffset",1,a,stride,delta]; $x.__enum__ = hxsl_ARead; $x.toString = $estr; return $x; };
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = ["hxsl","Flatten"];
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g11 = 0;
			var _g21 = s.vars;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				var _g3 = v.type;
				if(_g3[1] == 9) {
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g4 = 0;
		var _g12 = s.vars;
		while(_g4 < _g12.length) {
			var v1 = _g12[_g4];
			++_g4;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind[1]) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube));
		var _g5 = [];
		var _g13 = 0;
		var _g22 = s.funs;
		while(_g13 < _g22.length) {
			var f1 = _g22[_g13];
			++_g13;
			_g5.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g5;
		var _g14 = 0;
		while(_g14 < textures.length) {
			var t = textures[_g14];
			++_g14;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var a = this.varMap.h[v.__id__];
			e = a == null ? e : this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			break;
		case 16:
			if(_g[2].e[1] == 1) {
				var eindex = _g[3];
				var vp = _g[2].p;
				var v1 = _g[2].e[2];
				var _g1 = eindex.e;
				if(!(_g1[1] == 0 && _g1[2][1] == 2)) {
					var a1 = this.varMap.h[v1.__id__];
					if(a1 == null) {
						e = e;
					} else {
						var _g11 = v1.type;
						if(_g11[1] == 14) {
							var t = _g11[2];
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			switch(c[1]) {
			case 2:
				var v = c[2];
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c[2];
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g[2];
			switch(g[1]) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 52:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 53:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 54:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 55:
				this.allocConst(0.5,e.p);
				break;
			default:
			}
			break;
		case 5:
			if(_g[2][1] == 1) {
				if(_g[4].t[1] == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 40) {
					if(_g[3].length == 2) {
						if(_g[3][0].e[1] == 1) {
							switch(_g[3][0].e[2].kind[1]) {
							case 0:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			if(_g[3].e[1] == 0) {
				if(_g[3].e[2][1] == 2) {
					var ea = _g[2];
					var eindex = _g[3];
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g[2];
					var eindex1 = _g[3];
					var _g1 = ea1.t;
					if(_g1[1] == 14) {
						var t = _g1[2];
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g[2];
				var eindex2 = _g[3];
				var _g2 = ea2.t;
				if(_g2[1] == 14) {
					var t1 = _g2[2];
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g1 = 0;
		var _g = this.consts.length - (va.length - 1);
		while(_g1 < _g) {
			var i = _g1++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g3 = 0;
			var _g2 = va.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g4 = 0;
			while(_g4 < va.length) {
				var v = va[_g4];
				++_g4;
				this.consts.push(v);
			}
		}
		var _g5 = va.length;
		switch(_g5) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t[1]) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc[1]) {
			case 0:
				var a1 = acc[2];
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc[4];
				var stride = acc[3];
				var a2 = acc[2];
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc[1]) {
			case 0:
				var a3 = acc[2];
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc[4];
				var stride1 = acc[3];
				var a4 = acc[2];
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc[1]) {
			case 0:
				var a5 = acc[2];
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc[4];
				var stride2 = acc[3];
				var a6 = acc[2];
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc[1]) {
			case 0:
				var a7 = acc[2];
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc[4];
				var stride3 = acc[3];
				var a8 = acc[2];
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc[1]) {
			case 0:
				var a9 = acc[2];
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc[4];
				var stride4 = acc[3];
				var a10 = acc[2];
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc[1]) {
			case 0:
				var a11 = acc[2];
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc[4];
				var stride5 = acc[3];
				var a12 = acc[2];
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc[1]) {
			case 0:
				var a13 = acc[2];
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc[4];
				var stride6 = acc[3];
				var a14 = acc[2];
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 10:case 11:case 15:
			switch(acc[1]) {
			case 0:
				var a15 = acc[2];
				return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a15.g), t : a15.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a15.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a15.t), p : pos};
			case 1:
				var delta7 = acc[4];
				var stride7 = acc[3];
				var a16 = acc[2];
				var index7 = a16.pos >> 2;
				var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a16.t), p : pos};
			}
			break;
		case 14:
			if(t[3][1] == 0) {
				var t1 = t[2];
				var len = t[3][2];
				var stride8 = a.size / len | 0;
				var _g = [];
				var _g2 = 0;
				var _g1 = len;
				while(_g2 < _g1) {
					var i = _g2++;
					var a17 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride8 * i,stride8);
					_g.push(this.access(a17,t1,pos,hxsl_ARead.AIndex(a17)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc[1]) {
				case 0:
					var a18 = acc[2];
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
					break;
				case 1:
					var delta8 = acc[4];
					var stride9 = acc[3];
					var a19 = acc[2];
					var index8 = a19.pos >> 2;
					var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					var sw = [];
					var _g11 = 0;
					var _g3 = size;
					while(_g11 < _g3) {
						var i1 = _g11++;
						sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t[1]) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					break;
				case 5:
					if(t[3][1] == 0) {
						var size1 = t[2];
						e.t = hxsl_Type.TVec(size1,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size1 - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			var size2 = this.varSize(t,a.t);
			if(size2 > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e1;
			switch(acc[1]) {
			case 0:
				var a20 = acc[2];
				e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
				break;
			case 1:
				var delta9 = acc[4];
				var stride10 = acc[3];
				var a21 = acc[2];
				var index9 = a21.pos >> 2;
				var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
				break;
			}
			if(size2 == 4) {
				if((a.pos & 3) != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				var sw1 = [];
				var _g12 = 0;
				var _g4 = size2;
				while(_g12 < _g4) {
					var i2 = _g12++;
					sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
				}
				e1 = { e : hxsl_TExprDef.TSwiz(e1,sw1), t : t, p : pos};
			}
			switch(t[1]) {
			case 1:
				e1.t = hxsl_Type.TFloat;
				e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
				break;
			case 5:
				if(t[3][1] == 0) {
					var size3 = t[2];
					e1.t = hxsl_Type.TVec(size3,hxsl_VecType.VFloat);
					e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
				}
				break;
			default:
			}
			return e1;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 50) {
					if(_g[3].length == 1) {
						if(_g[3][0].e[1] == 8) {
							if(_g[3][0].e[2].e[1] == 2) {
								if(_g[3][0].e[2].e[2][1] == 49) {
									var args = _g[3][0].e[3];
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g3 = e.e;
										if(_g3[1] == 8) {
											var e1 = _g3[2];
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			if(_g[2].e[1] == 17) {
				if(_g[3].e[1] == 0) {
					if(_g[3].e[2][1] == 2) {
						var el = _g[2].e[2];
						var i1 = _g[3].e[2][2];
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					tmp = _g1[1] == 15;
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			switch(_g1[1]) {
			case 10:case 11:case 15:
				continue;
			default:
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g2 = 0;
			while(_g2 < alloc.length) {
				var a = alloc[_g2];
				++_g2;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v[1]) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v[3];
			var n = v[2];
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 14:
			if(v[3][1] == 0) {
				var at = v[2];
				var n1 = v[3][2];
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = ["hxsl","Globals"];
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var _this = hxsl_Globals.MAP;
	var id = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		var _this1 = hxsl_Globals.MAP;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,id);
		} else {
			_this1.h[path] = id;
		}
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g1 = 0;
		var _g = this.maxChannels;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
	this.flipY = true;
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = ["hxsl","GlslOut"];
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t[1]) {
		case 0:
			this.buf.b += "void";
			break;
		case 1:
			this.buf.b += "int";
			break;
		case 2:
			this.buf.b += "bool";
			break;
		case 3:
			this.buf.b += "float";
			break;
		case 4:
			this.buf.b += "string";
			break;
		case 5:
			var k = t[3];
			var size = t[2];
			switch(k[1]) {
			case 0:
				this.buf.b += "i";
				break;
			case 1:
				break;
			case 2:
				this.buf.b += "b";
				break;
			}
			this.buf.b += "vec";
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += "mat3";
			break;
		case 7:
			this.buf.b += "mat4";
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += "_mat3x4";
			break;
		case 9:
			var n = t[2];
			this.buf.b += "vec";
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += "sampler2D";
			break;
		case 11:
			this.buf.b += "samplerCube";
			break;
		case 12:
			var vl = t[2];
			this.buf.b += "struct { ";
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += ";";
			}
			this.buf.b += " }";
			break;
		case 13:
			this.buf.b += "function";
			break;
		case 14:
			var size1 = t[3];
			var t1 = t[2];
			this.addType(t1);
			this.buf.b += "[";
			switch(size1[1]) {
			case 0:
				if(size1[2] == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						var v1 = size1[2];
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = size1[2];
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1[2];
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += "]";
			break;
		case 15:
			var n1 = t[2];
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		if(_g[1] == 14) {
			var size = _g[3];
			var t = _g[2];
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += "[";
			switch(size[1]) {
			case 0:
				if(size[2] == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						var n = size[2];
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = size[2];
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size[2];
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += "]";
		} else {
			this.addType(v.type);
			this.buf.b += " ";
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += " ";
			this.buf.b += Std.string(name);
			this.buf.b += "(void)";
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += "()";
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			this.buf.b += "( ";
			this.addValue(econd,tabs);
			this.buf.b += " ) ? ";
			this.addValue(eif,tabs);
			this.buf.b += " : ";
			this.addValue(eelse,tabs);
			break;
		case 20:
			var e1 = _g[4];
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			switch(c[1]) {
			case 0:
				this.buf.b += "null";
				break;
			case 1:
				var b = c[2];
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c[2];
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c[2];
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += ".";
				}
				break;
			case 4:
				var v1 = c[2];
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g[2];
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g[2];
			switch(g[1]) {
			case 33:
				this.decl("vec4 _texture2D( sampler2D t, vec2 v ) { return " + (this.glES ? "texture2D" : "texture") + "(t,vec2(v.x," + (this.flipY ? "0.999999-v.y" : "v.y") + ")); }");
				break;
			case 34:
				if(!this.glES) {
					this.buf.b += "texture";
					return;
				}
				break;
			case 50:
				this.decl(hxsl_GlslOut.MAT34);
				break;
			case 52:
				this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
				break;
			case 53:
				this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
				break;
			case 54:
				this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
				break;
			case 55:
				this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
				break;
			case 56:case 57:case 58:
				this.decl("#extension GL_OES_standard_derivatives:enable");
				break;
			case 59:
				if(!this.glES) {
					this.buf.b += "textureLod";
					return;
				}
				break;
			default:
			}
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g[2];
			this.buf.b += "(";
			this.addValue(e1,tabs);
			this.buf.b += ")";
			break;
		case 4:
			var el = _g[2];
			this.buf.b += "{\n";
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += "}";
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op[1]) {
			case 1:
				if(_g11[1] == 5) {
					if(_g11[2] == 3) {
						if(_g11[3][1] == 1) {
							if(_g2[1] == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								if(op[1] == 20) {
									this.addValue(e11,tabs);
									this.buf.b += " = ";
								}
								this.buf.b += "m3x4mult(";
								this.addValue(e11,tabs);
								this.buf.b += ",";
								this.addValue(e21,tabs);
								this.buf.b += ")";
							} else {
								this.addValue(e11,tabs);
								this.buf.b += " ";
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += " ";
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += " ";
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += " ";
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n = _g11[2];
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op[1]) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n1 = _g11[2];
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op[1]) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n2 = _g11[2];
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op[1]) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n3 = _g11[2];
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op[1]) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n4 = _g11[2];
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op[1]) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n5 = _g11[2];
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op[1]) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += "_ushr(";
				this.addValue(e11,tabs);
				this.buf.b += ",";
				this.addValue(e21,tabs);
				this.buf.b += ")";
				break;
			case 19:
				if(op[1] == 20) {
					this.addValue(e11,tabs);
					this.buf.b += " = ";
				}
				this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
				break;
			case 20:
				switch(op[2][1]) {
				case 1:
					if(_g11[1] == 5) {
						if(_g11[2] == 3) {
							if(_g11[3][1] == 1) {
								if(_g2[1] == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									if(op[1] == 20) {
										this.addValue(e11,tabs);
										this.buf.b += " = ";
									}
									this.buf.b += "m3x4mult(";
									this.addValue(e11,tabs);
									this.buf.b += ",";
									this.addValue(e21,tabs);
									this.buf.b += ")";
								} else {
									this.addValue(e11,tabs);
									this.buf.b += " ";
									var v27 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v27);
									this.buf.b += " ";
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += " ";
								var v28 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v28);
								this.buf.b += " ";
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += " ";
							var v29 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v29);
							this.buf.b += " ";
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v30 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v30);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(op[1] == 20) {
						this.addValue(e11,tabs);
						this.buf.b += " = ";
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v31 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v31);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += " ";
				var v32 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v32);
				this.buf.b += " ";
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g[3];
			var op1 = _g[2];
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp;
			switch(op1[1]) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g[3];
			var v33 = _g[2];
			this.locals.h[v33.id] = v33;
			if(init != null) {
				var v34 = this.varName(v33);
				this.buf.b += Std.string(v34);
				this.buf.b += " = ";
				this.addValue(init,tabs);
			} else {
				this.buf.b += "/*var*/";
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				switch(_g[2].e[2][1]) {
				case 20:
					if(_g[3].length == 2) {
						var v210 = _g[3][1];
						var v110 = _g[3][0];
						if(e.t == hxsl_Type.TInt) {
							this.decl("int mod( int x, int y ) { return int(mod(float(x),float(y))); }");
							this.buf.b += "mod(";
							this.addValue(v110,tabs);
							this.buf.b += ",";
							this.addValue(v210,tabs);
							this.buf.b += ")";
						} else {
							var e3 = _g[2];
							var args = _g[3];
							this.addValue(e3,tabs);
							this.buf.b += "(";
							var first = true;
							var _g3 = 0;
							while(_g3 < args.length) {
								var e4 = args[_g3];
								++_g3;
								if(first) {
									first = false;
								} else {
									this.buf.b += ", ";
								}
								this.addValue(e4,tabs);
							}
							this.buf.b += ")";
						}
					} else {
						var e5 = _g[2];
						var args1 = _g[3];
						this.addValue(e5,tabs);
						this.buf.b += "(";
						var first1 = true;
						var _g4 = 0;
						while(_g4 < args1.length) {
							var e6 = args1[_g4];
							++_g4;
							if(first1) {
								first1 = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e6,tabs);
						}
						this.buf.b += ")";
					}
					break;
				case 48:
					if(_g[3].length == 1) {
						var e7 = _g[3][0];
						if(e7.t == hxsl_Type.TMat3x4) {
							this.decl(hxsl_GlslOut.MAT34);
							this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
							this.buf.b += "_mat3(";
							this.addValue(e7,tabs);
							this.buf.b += ")";
						} else {
							var e8 = _g[2];
							var args2 = _g[3];
							this.addValue(e8,tabs);
							this.buf.b += "(";
							var first2 = true;
							var _g5 = 0;
							while(_g5 < args2.length) {
								var e9 = args2[_g5];
								++_g5;
								if(first2) {
									first2 = false;
								} else {
									this.buf.b += ", ";
								}
								this.addValue(e9,tabs);
							}
							this.buf.b += ")";
						}
					} else {
						var e10 = _g[2];
						var args3 = _g[3];
						this.addValue(e10,tabs);
						this.buf.b += "(";
						var first3 = true;
						var _g6 = 0;
						while(_g6 < args3.length) {
							var e13 = args3[_g6];
							++_g6;
							if(first3) {
								first3 = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e13,tabs);
						}
						this.buf.b += ")";
					}
					break;
				case 51:
					if(_g[3].length == 1) {
						var e14 = _g[3][0];
						this.buf.b += "clamp(";
						this.addValue(e14,tabs);
						this.buf.b += ", 0., 1.)";
					} else {
						var e15 = _g[2];
						var args4 = _g[3];
						this.addValue(e15,tabs);
						this.buf.b += "(";
						var first4 = true;
						var _g7 = 0;
						while(_g7 < args4.length) {
							var e16 = args4[_g7];
							++_g7;
							if(first4) {
								first4 = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e16,tabs);
						}
						this.buf.b += ")";
					}
					break;
				default:
					var args5 = _g[3];
					var e17 = _g[2];
					this.addValue(e17,tabs);
					this.buf.b += "(";
					var first5 = true;
					var _g8 = 0;
					while(_g8 < args5.length) {
						var e18 = args5[_g8];
						++_g8;
						if(first5) {
							first5 = false;
						} else {
							this.buf.b += ", ";
						}
						this.addValue(e18,tabs);
					}
					this.buf.b += ")";
				}
			} else {
				var args6 = _g[3];
				var e19 = _g[2];
				this.addValue(e19,tabs);
				this.buf.b += "(";
				var first6 = true;
				var _g9 = 0;
				while(_g9 < args6.length) {
					var e20 = args6[_g9];
					++_g9;
					if(first6) {
						first6 = false;
					} else {
						this.buf.b += ", ";
					}
					this.addValue(e20,tabs);
				}
				this.buf.b += ")";
			}
			break;
		case 9:
			var regs = _g[3];
			var e22 = _g[2];
			var _g10 = e22.t;
			if(_g10[1] == 3) {
				var _g12 = 0;
				while(_g12 < regs.length) {
					var r = regs[_g12];
					++_g12;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				var _g13 = regs.length;
				switch(_g13) {
				case 1:
					this.addValue(e22,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += "_vec2(";
					this.addValue(e22,tabs);
					this.buf.b += ")";
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += "_vec3(";
					this.addValue(e22,tabs);
					this.buf.b += ")";
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += "_vec4(";
					this.addValue(e22,tabs);
					this.buf.b += ")";
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e22,tabs);
				this.buf.b += ".";
				var _g14 = 0;
				while(_g14 < regs.length) {
					var r1 = regs[_g14];
					++_g14;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp1;
					switch(r1[1]) {
					case 0:
						tmp1 = "x";
						break;
					case 1:
						tmp1 = "y";
						break;
					case 2:
						tmp1 = "z";
						break;
					case 3:
						tmp1 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp1);
				}
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			this.buf.b += "if( ";
			this.addValue(econd,tabs);
			this.buf.b += ") ";
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += ";";
				}
				this.buf.b += " else ";
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += "discard";
			break;
		case 12:
			var e23 = _g[2];
			if(e23 == null) {
				this.buf.b += "return";
			} else {
				this.buf.b += "return ";
				this.addValue(e23,tabs);
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v35 = _g[2];
			this.locals.h[v35.id] = v35;
			var _g15 = it.e;
			if(_g15[1] == 5) {
				if(_g15[2][1] == 21) {
					var e24 = _g15[4];
					var e110 = _g15[3];
					this.buf.b += "for(int ";
					this.buf.b += Std.string(v35.name + "=");
					this.addValue(e110,tabs);
					this.buf.b += Std.string(";" + v35.name + "<");
					this.addValue(e24,tabs);
					this.buf.b += Std.string(";" + v35.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += "continue";
			break;
		case 15:
			this.buf.b += "break";
			break;
		case 16:
			var index = _g[3];
			var e25 = _g[2];
			this.addValue(e25,tabs);
			this.buf.b += "[";
			this.addValue(index,tabs);
			this.buf.b += "]";
			break;
		case 17:
			var el1 = _g[2];
			this.buf.b += "[";
			var first7 = true;
			var _g16 = 0;
			while(_g16 < el1.length) {
				var e26 = el1[_g16];
				++_g16;
				if(first7) {
					first7 = false;
				} else {
					this.buf.b += ", ";
				}
				this.addValue(e26,tabs);
			}
			this.buf.b += "]";
			break;
		case 18:
			this.buf.b += "switch(...)";
			break;
		case 19:
			if(_g[4] == false) {
				var e27 = _g[2];
				var loop1 = _g[3];
				var old = tabs;
				tabs += "\t";
				this.buf.b += "do ";
				this.addBlock(loop1,tabs);
				this.buf.b += " while( ";
				this.addValue(e27,tabs);
				this.buf.b += " )";
			} else {
				var e28 = _g[2];
				var loop2 = _g[3];
				this.buf.b += "while( ";
				this.addValue(e28,tabs);
				this.buf.b += " ) ";
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var e29 = _g[4];
			this.addExpr(e29,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		var _this = hxsl_GlslOut.KWDS;
		if(__map_reserved[n] != null ? _this.existsReserved(n) : _this.h.hasOwnProperty(n)) {
			n = "_" + n;
		}
		var _this1 = this.allNames;
		if(__map_reserved[n] != null ? _this1.existsReserved(n) : _this1.h.hasOwnProperty(n)) {
			var k = 2;
			n += "_";
			while(true) {
				var _this2 = this.allNames;
				var key = n + k;
				if(!(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key))) {
					break;
				}
				++k;
			}
			n += k;
		}
		this.varNames.h[v.id] = n;
		var value = v.id;
		var _this3 = this.allNames;
		if(__map_reserved[n] != null) {
			_this3.setReserved(n,value);
		} else {
			_this3.h[n] = value;
		}
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += "\n";
		} else {
			this.buf.b += ";\n";
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			return true;
		case 13:
			var loop = _g[4];
			return this.isBlock(loop);
		case 19:
			if(_g[4] == true) {
				var loop1 = _g[3];
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		var outIndex = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:case 2:
				this.buf.b += "uniform ";
				break;
			case 1:
				this.buf.b += Std.string(this.glES ? "attribute " : "in ");
				break;
			case 3:
				this.buf.b += Std.string(this.glES ? "varying " : this.isVertex ? "out " : "in ");
				break;
			case 4:
				break;
			case 5:
				if(this.glES) {
					this.outIndexes.h[v.id] = outIndex++;
					continue;
				}
				if(this.isVertex) {
					continue;
				}
				this.buf.b += "out ";
				break;
			case 6:
				continue;
			}
			if(v.qualifiers != null) {
				var _g3 = 0;
				var _g4 = v.qualifiers;
				while(_g3 < _g4.length) {
					var q = _g4[_g3];
					++_g3;
					if(q[1] == 6) {
						var p = q[2];
						switch(p[1]) {
						case 0:
							this.buf.b += "lowp ";
							break;
						case 1:
							this.buf.b += "mediump ";
							break;
						case 2:
							this.buf.b += "highp ";
							break;
						}
					}
				}
			}
			this.addVar(v);
			this.buf.b += ";\n";
		}
		this.buf.b += "\n";
		if(outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && this.glES) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += "void main(void) {\n";
		var _g5 = f.expr.e;
		if(_g5[1] == 4) {
			var el = _g5[2];
			var _g6 = 0;
			while(_g6 < el.length) {
				var e = el[_g6];
				++_g6;
				this.buf.b += "\t";
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += "}";
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g11 = 0;
		while(_g11 < locals.length) {
			var v3 = locals[_g11];
			++_g11;
			this.addVar(v3);
			this.buf.b += ";\n";
		}
		this.buf.b += "\n";
		var _g12 = 0;
		var _g21 = this.exprValues;
		while(_g12 < _g21.length) {
			var e1 = _g21[_g12];
			++_g12;
			this.buf.b += Std.string(e1);
			this.buf.b += "\n\n";
		}
		if(this.version != null) {
			this.decl("#version " + this.version);
		} else if(this.glES) {
			this.decl("#version 100");
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = ["hxsl","_Linker","AllocatedVar"];
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = ["hxsl","_Linker","ShaderInfos"];
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function() {
	this.debugDepth = 0;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = ["hxsl","Linker"];
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		var _g = v.kind;
		switch(_g[1]) {
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
		case 0:case 1:case 3:case 4:case 5:
			break;
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2[1] == 12) {
			if(_g1[1] == 12) {
				var fl1 = _g2[2];
				var fl2 = _g1[2];
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g21 = 0;
					while(_g21 < fl2.length) {
						var f2 = fl2[_g21];
						++_g21;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q[1] == 4) {
					var n = q[2];
					key = n;
				}
			}
		}
		var _this = this.varMap;
		var v2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var _this1 = this.varMap;
					var key1 = key + k;
					var a = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
					if(a == null) {
						break;
					}
					var _g3 = 0;
					var _g12 = a.merged;
					while(_g3 < _g12.length) {
						var vm1 = _g12[_g3];
						++_g3;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		var _this2 = this.varMap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,a1);
		} else {
			_this2.h[key] = a1;
		}
		var _g4 = v21.type;
		if(_g4[1] == 12) {
			var vl = _g4[2];
			var _g5 = [];
			var _g13 = 0;
			while(_g13 < vl.length) {
				var v3 = vl[_g13];
				++_g13;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g[4];
			var e1 = _g[3];
			var op = _g[2];
			var _g1 = e1.e;
			switch(op[1]) {
			case 4:
				switch(_g1[1]) {
				case 1:
					var v2 = _g1[2];
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v3.id] = v3;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g1[2];
						if(!this.locals.h.hasOwnProperty(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v5.id] = v5;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					if(_g1[2].e[1] == 1) {
						var v6 = _g1[2].e[2];
						if(!this.locals.h.hasOwnProperty(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								this.curShader.write.h[v7.id] = v7;
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				switch(_g1[1]) {
				case 1:
					var v8 = _g1[2];
					if(!this.locals.h.hasOwnProperty(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							this.curShader.write.h[v9.id] = v9;
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					if(_g1[2].e[1] == 1) {
						var v10 = _g1[2].e[2];
						if(!this.locals.h.hasOwnProperty(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								this.curShader.write.h[v11.id] = v11;
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var v12 = _g[2];
			this.locals.h[v12.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var v13 = _g[2];
			this.locals.h[v13.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex && parent.vertex == false) {
				continue;
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var _g1 = new haxe_ds_StringMap();
			var k = locals.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(__map_reserved[k1] != null) {
					_g1.setReserved(k1,true);
				} else {
					_g1.h[k1] = true;
				}
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var v = _g[2];
			var key = v.name;
			if(__map_reserved[key] != null ? locals.existsReserved(key) : locals.h.hasOwnProperty(key)) {
				var k2 = 2;
				while(true) {
					var key1 = v.name + k2;
					if(!(__map_reserved[key1] != null ? locals.existsReserved(key1) : locals.h.hasOwnProperty(key1))) {
						break;
					}
					++k2;
				}
				v.name += k2;
			}
			var key2 = v.name;
			if(__map_reserved[key2] != null) {
				locals.setReserved(key2,true);
			} else {
				locals.h[key2] = true;
			}
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var locals2 = locals;
			hxsl_Tools.iter(expr,function(expr1) {
				f(expr1,locals2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g11 = 0;
		while(_g11 < shadersData.length) {
			var s2 = shadersData[_g11];
			++_g11;
			var _g2 = 0;
			var _g3 = s2.vars;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				this.allocVar(v,null);
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g21 = 0;
			var _g31 = s2.funs;
			while(_g21 < _g31.length) {
				var f = _g31[_g21];
				++_g21;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var _g12 = 0;
		while(_g12 < shadersData.length) {
			var s3 = shadersData[_g12];
			++_g12;
			var _g22 = 0;
			var _g32 = s3.funs;
			while(_g22 < _g32.length) {
				var f1 = _g32[_g22];
				++_g22;
				var v2 = this.allocVar(f1.ref,f1.expr.p);
				if(v2.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				var _g4 = v2.kind;
				switch(_g4[1]) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v2.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v2.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var status;
					var _g41 = f1.ref.name;
					switch(_g41) {
					case "__init__fragment":
						status = false;
						break;
					case "__init__vertex":
						status = true;
						break;
					default:
						status = null;
					}
					var _g5 = f1.expr.e;
					if(_g5[1] == 4) {
						var el = _g5[2];
						var index = 0;
						var priority1 = -el.length;
						var _g51 = 0;
						while(_g51 < el.length) {
							var e = el[_g51];
							++_g51;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,priority1++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,-1);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v2.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g13 = 0;
		while(_g13 < outVars.length) {
			var v3 = outVars[_g13];
			++_g13;
			this.buildDependency(entry,this.allocVar(v3,null),false);
		}
		var _g14 = 0;
		var _g23 = this.shaders;
		while(_g14 < _g23.length) {
			var s4 = _g23[_g14];
			++_g14;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g15 = 0;
		var _g24 = this.shaders;
		while(_g15 < _g24.length) {
			var s5 = _g24[_g15];
			++_g15;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s5.vertex = false;
			}
		}
		var v4 = [];
		var f2 = [];
		this.collect(entry,v4,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g16 = 0;
		var _g25 = this.shaders;
		while(_g16 < _g25.length) {
			var s6 = _g25[_g16];
			++_g16;
			s6.marked = null;
		}
		var _g17 = 0;
		var _g26 = v4.concat(f2);
		while(_g17 < _g26.length) {
			var s7 = _g26[_g17];
			++_g17;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v5) {
			if(varMap_h.hasOwnProperty(v5.id)) {
				return;
			}
			varMap_h[v5.id] = true;
			if(v5.v.parent != null) {
				addVar(v5.parent);
			} else {
				outVars1.push(v5.v);
			}
		};
		var addVar1 = addVar;
		var _g18 = 0;
		var _g27 = v4.concat(f2);
		while(_g18 < _g27.length) {
			var s8 = _g27[_g18];
			++_g18;
			var v6 = s8.read.iterator();
			while(v6.hasNext()) {
				var v7 = v6.next();
				addVar1(v7);
			}
			var v8 = s8.write.iterator();
			while(v8.hasNext()) {
				var v9 = v8.next();
				addVar1(v9);
			}
		}
		var cleanVar = null;
		cleanVar = function(v10) {
			var _g19 = v10.type;
			if(_g19[1] == 12) {
				var vl = _g19[2];
				if(v10.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g110 = 0;
					while(_g110 < vl.length) {
						var v11 = vl[_g110];
						++_g110;
						if(varMap_h.hasOwnProperty(v11.id)) {
							cleanVar(v11);
							vout.push(v11);
						}
					}
					v10.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var cleanVar1 = cleanVar;
		var _g111 = 0;
		while(_g111 < outVars1.length) {
			var v12 = outVars1[_g111];
			++_g111;
			cleanVar1(v12);
		}
		var build = function(kind,name,a) {
			var v13 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v13);
			var exprs = [];
			var _g112 = 0;
			while(_g112 < a.length) {
				var s9 = a[_g112];
				++_g112;
				var _g28 = s9.body.e;
				if(_g28[1] == 4) {
					var el1 = _g28[2];
					var _g29 = 0;
					while(_g29 < el1.length) {
						var e1 = el1[_g29];
						++_g29;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v13, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v4),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g210 = 0;
			var _g113 = s11.vars.length;
			while(_g210 < _g113) {
				var i = _g210++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxClasses["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"] };
hxsl_Output.Const = function(v) { var $x = ["Const",0,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Value = function(v,size) { var $x = ["Value",1,v,size]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.PackNormal = function(v) { var $x = ["PackNormal",2,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.PackFloat = function(v) { var $x = ["PackFloat",3,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec2 = function(a) { var $x = ["Vec2",4,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec3 = function(a) { var $x = ["Vec3",5,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec4 = function(a) { var $x = ["Vec4",6,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Swiz = function(a,swiz) { var $x = ["Swiz",7,a,swiz]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = ["hxsl","Printer"];
hxsl_Printer.opStr = function(op) {
	switch(op[1]) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op[2];
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += ";\n";
		}
		if(s.vars.length > 0) {
			this.buffer.b += "\n";
		}
		var _g2 = 0;
		var _g11 = s.funs;
		while(_g2 < _g11.length) {
			var f = _g11[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += "\n\n";
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q[1]) {
				case 0:
					var max = q[2];
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q[2];
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q[2];
					v1 = p[0].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q[3];
					var min = q[2];
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:
				this.buffer.b += "@global ";
				break;
			case 1:
				this.buffer.b += "@input ";
				break;
			case 2:
				this.buffer.b += "@param ";
				break;
			case 3:
				this.buffer.b += "@var ";
				break;
			case 4:
				this.buffer.b += "@local ";
				break;
			case 5:
				this.buffer.b += "@output ";
				break;
			case 6:
				this.buffer.b += "@function ";
				break;
			}
		}
		this.buffer.b += "var ";
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += " : ";
		var _g3 = v.type;
		if(_g3[1] == 12) {
			var vl = _g3[2];
			this.buffer.b += "{";
			var first = true;
			var _g4 = 0;
			while(_g4 < vl.length) {
				var v2 = vl[_g4];
				++_g4;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += "}";
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += " ";
				first = false;
			} else {
				this.buffer.b += ", ";
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += " ";
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += ".";
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c[1]) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c[2];
			tmp = b;
			break;
		case 2:
			var i = c[2];
			tmp = i;
			break;
		case 3:
			var f = c[2];
			tmp = f;
			break;
		case 4:
			var s = c[2];
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			this.addConst(c);
			break;
		case 1:
			var v = _g[2];
			this.addVarName(v);
			break;
		case 2:
			var g = _g[2];
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g[2];
			this.buffer.b += "(";
			this.addExpr(e1,tabs);
			this.buffer.b += ")";
			break;
		case 4:
			var el = _g[2];
			this.buffer.b += "{";
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += ";";
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += "}";
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g[3];
			var op1 = _g[2];
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1[1]) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g[3];
			var v3 = _g[2];
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += " = ";
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g[3];
			var e4 = _g[2];
			this.addExpr(e4,tabs);
			this.buffer.b += "(";
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += ")";
			break;
		case 9:
			var regs = _g[3];
			var e6 = _g[2];
			this.addExpr(e6,tabs);
			this.buffer.b += ".";
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r[1]]);
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var cond = _g[2];
			this.buffer.b += "if( ";
			this.addExpr(cond,tabs);
			this.buffer.b += " ) ";
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += " else ";
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += "discard";
			break;
		case 12:
			var e7 = _g[2];
			this.buffer.b += "return";
			if(e7 != null) {
				this.buffer.b += " ";
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v4 = _g[2];
			this.buffer.b += "for( ";
			this.addVarName(v4);
			this.buffer.b += " in ";
			this.addExpr(it,tabs);
			this.buffer.b += " ) ";
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += "continue";
			break;
		case 15:
			this.buffer.b += "break";
			break;
		case 16:
			var e22 = _g[3];
			var e12 = _g[2];
			this.addExpr(e12,tabs);
			this.buffer.b += "[";
			this.addExpr(e22,tabs);
			this.buffer.b += "]";
			break;
		case 17:
			var el2 = _g[2];
			this.buffer.b += "[";
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += "]";
			break;
		case 18:
			var def = _g[4];
			var cases = _g[3];
			var e9 = _g[2];
			this.buffer.b += "switch( ";
			this.addExpr(e9,tabs);
			this.buffer.b += ") {";
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += "case ";
				var first2 = true;
				var _g11 = 0;
				var _g21 = c1.values;
				while(_g11 < _g21.length) {
					var v5 = _g21[_g11];
					++_g11;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			if(_g[4] == false) {
				var e10 = _g[2];
				var loop1 = _g[3];
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += " )";
			} else {
				var e13 = _g[2];
				var loop2 = _g[3];
				this.buffer.b += "while( ";
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g[4];
			var args = _g[3];
			var m = _g[2];
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += "(";
				var first3 = true;
				var _g6 = 0;
				while(_g6 < args.length) {
					var c2 = args[_g6];
					++_g6;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addConst(c2);
				}
				this.buffer.b += ")";
			}
			this.buffer.b += " ";
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = ["hxsl","AllocParam"];
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = ["hxsl","AllocGlobal"];
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = ["hxsl","RuntimeShaderData"];
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = ["hxsl","ShaderInstanceDesc"];
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = ["hxsl","RuntimeShader"];
hxsl_RuntimeShader.prototype = {
	__class__: hxsl_RuntimeShader
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = ["hxsl","ShaderList"];
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = ["hxsl","ShaderInstance"];
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = ["hxsl","ShaderGlobal"];
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = ["hxsl","ShaderConst"];
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = haxe_Unserializer.run(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = ["hxsl","SharedShader"];
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g[1]) {
			case 1:case 15:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = true;
		var i = new hxsl_ShaderInstance($eval["eval"](this.data));
		this.paramsCount = 0;
		var _g1 = 0;
		var _g11 = this.data.vars;
		while(_g1 < _g11.length) {
			var v = _g11[_g1];
			++_g1;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = ["hxsl","_Splitter","VarProps"];
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = ["hxsl","Splitter"];
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = f.kind;
			switch(_g2[1]) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		var _g3 = 0;
		var _g11 = Lambda.array(vvars);
		while(_g3 < _g11.length) {
			var inf = _g11[_g3];
			++_g3;
			var v = inf.v;
			var _g21 = v.kind;
			switch(_g21[1]) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			var _g31 = v.kind;
			switch(_g31[1]) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			var _g4 = v1.kind;
			switch(_g4[1]) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g5 = 0;
		while(_g5 < todo.length) {
			var v2 = todo[_g5];
			++_g5;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g6 = ffun.expr.e;
		if(_g6[1] == 4) {
			var el = _g6[2];
			var _g7 = 0;
			while(_g7 < finits.length) {
				var e1 = finits[_g7];
				++_g7;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g12 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g12.push(v10.v);
			}
		}
		var vvars1 = _g12;
		var _g22 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g22.push(v12.v);
			}
		}
		var fvars1 = _g22;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g[1] == 4) {
			var el = _g[2];
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars) {
		var _g = v.v.kind;
		switch(_g[1]) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError("Varying " + v.v.name + " is not written by vertex shader");
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError("Variable " + v.v.name + " is written without being initialized");
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		if(_g[1] == 1) {
			var v = _g[2];
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
		} else {
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
			this.uniqueName(v);
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var key = v.name;
		var _this = this.varNames;
		var n = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(true) {
				var _this1 = this.varNames;
				var key1 = prefix + k;
				if(!(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1))) {
					break;
				}
				++k;
			}
			v.name = prefix + k;
		}
		var key2 = v.name;
		var _this2 = this.varNames;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,v);
		} else {
			_this2.h[key2] = v;
		}
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var e1 = _g[4];
					var v1 = _g[3].e[2];
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e2 = _g[4];
						var v2 = _g[3].e[2].e[2];
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var e3 = _g[4];
					var v3 = _g[3].e[2];
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e4 = _g[4];
						var v4 = _g[3].e[2].e[2];
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g[3];
			var v5 = _g[2];
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v6 = _g[2];
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var mt__$Cooldown_CdInst = function(k,f) {
	this.k = k;
	this.frames = f;
	this.initial = f;
};
$hxClasses["mt._Cooldown.CdInst"] = mt__$Cooldown_CdInst;
mt__$Cooldown_CdInst.__name__ = ["mt","_Cooldown","CdInst"];
mt__$Cooldown_CdInst.prototype = {
	__class__: mt__$Cooldown_CdInst
};
var mt_Cooldown = function(fps) {
	if(mt_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(mt_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(mt_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			mt_Cooldown.INDEXES = _g;
		}
	}
	this.cdList = [];
	this.fastCheck = new haxe_ds_IntMap();
	this.baseFps = fps;
};
$hxClasses["mt.Cooldown"] = mt_Cooldown;
mt_Cooldown.__name__ = ["mt","Cooldown"];
mt_Cooldown.prototype = {
	destroy: function() {
		this.cdList = null;
		this.fastCheck = null;
	}
	,_getRatio: function(k) {
		var cd = this._getCdObject(k);
		var max = cd == null ? 0 : cd.initial;
		if(max <= 0) {
			return 0;
		} else {
			var cd1 = this._getCdObject(k);
			return (cd1 == null ? 0 : cd1.frames) / max;
		}
	}
	,_getCdObject: function(k) {
		var _g = 0;
		var _g1 = this.cdList;
		while(_g < _g1.length) {
			var cd = _g1[_g];
			++_g;
			if(cd.k == k) {
				return cd;
			}
		}
		return null;
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.cdList.length) {
			var cd = this.cdList[i];
			cd.frames = Math.floor((cd.frames - dt) * 1000) / 1000;
			if(cd.frames <= 0) {
				var cb = cd.cb;
				HxOverrides.remove(this.cdList,cd);
				cd.frames = 0;
				cd.cb = null;
				this.fastCheck.remove(cd.k);
				if(cb != null) {
					cb();
				}
			} else {
				++i;
			}
		}
	}
	,__class__: mt_Cooldown
};
var mt__$Delayer_Task = function(id,t,cb) {
	this.t = t;
	this.cb = cb;
	this.id = id;
};
$hxClasses["mt._Delayer.Task"] = mt__$Delayer_Task;
mt__$Delayer_Task.__name__ = ["mt","_Delayer","Task"];
mt__$Delayer_Task.prototype = {
	__class__: mt__$Delayer_Task
};
var mt_Delayer = function(fps) {
	this.now = 0;
	this.fps = fps;
	this.delays = [];
};
$hxClasses["mt.Delayer"] = mt_Delayer;
mt_Delayer.__name__ = ["mt","Delayer"];
mt_Delayer.prototype = {
	destroy: function() {
		this.delays = null;
	}
	,cmp: function(a,b) {
		if(a.t < b.t) {
			return -1;
		} else if(a.t > b.t) {
			return 1;
		} else {
			return 0;
		}
	}
	,addS: function(id,cb,sec) {
		this.delays.push(new mt__$Delayer_Task(id,this.now + sec * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,update: function(dt) {
		while(this.delays.length > 0 && this.delays[0].t <= this.now) {
			var d = this.delays.shift();
			d.cb();
			d.cb = null;
		}
		this.now += dt;
	}
	,__class__: mt_Delayer
};
var mt_deepnight_Lib = function() { };
$hxClasses["mt.deepnight.Lib"] = mt_deepnight_Lib;
mt_deepnight_Lib.__name__ = ["mt","deepnight","Lib"];
mt_deepnight_Lib.redirectTracesToH2dConsole = function(c) {
	haxe_Log.trace = function(m,pos) {
		if(pos != null && pos.customParams == null) {
			pos.customParams = ["debug"];
		}
		c.log(pos.fileName + "(" + pos.lineNumber + ") : " + Std.string(m));
	};
};
mt_deepnight_Lib.shuffleArray = function(arr,randFunc) {
	var m = arr.length;
	var i = 0;
	var tmp = null;
	while(m > 0) {
		i = randFunc(m--);
		tmp = arr[m];
		arr[m] = arr[i];
		arr[i] = tmp;
	}
};
var mt_deepnight_TType = $hxClasses["mt.deepnight.TType"] = { __ename__ : true, __constructs__ : ["TLinear","TLoop","TLoopEaseIn","TLoopEaseOut","TEase","TEaseIn","TEaseOut","TBurn","TBurnIn","TBurnOut","TZigZag","TRand","TShake","TShakeBoth","TJump","TElasticEnd","TBackOut"] };
mt_deepnight_TType.TLinear = ["TLinear",0];
mt_deepnight_TType.TLinear.toString = $estr;
mt_deepnight_TType.TLinear.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TLoop = ["TLoop",1];
mt_deepnight_TType.TLoop.toString = $estr;
mt_deepnight_TType.TLoop.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TLoopEaseIn = ["TLoopEaseIn",2];
mt_deepnight_TType.TLoopEaseIn.toString = $estr;
mt_deepnight_TType.TLoopEaseIn.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TLoopEaseOut = ["TLoopEaseOut",3];
mt_deepnight_TType.TLoopEaseOut.toString = $estr;
mt_deepnight_TType.TLoopEaseOut.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TEase = ["TEase",4];
mt_deepnight_TType.TEase.toString = $estr;
mt_deepnight_TType.TEase.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TEaseIn = ["TEaseIn",5];
mt_deepnight_TType.TEaseIn.toString = $estr;
mt_deepnight_TType.TEaseIn.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TEaseOut = ["TEaseOut",6];
mt_deepnight_TType.TEaseOut.toString = $estr;
mt_deepnight_TType.TEaseOut.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TBurn = ["TBurn",7];
mt_deepnight_TType.TBurn.toString = $estr;
mt_deepnight_TType.TBurn.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TBurnIn = ["TBurnIn",8];
mt_deepnight_TType.TBurnIn.toString = $estr;
mt_deepnight_TType.TBurnIn.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TBurnOut = ["TBurnOut",9];
mt_deepnight_TType.TBurnOut.toString = $estr;
mt_deepnight_TType.TBurnOut.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TZigZag = ["TZigZag",10];
mt_deepnight_TType.TZigZag.toString = $estr;
mt_deepnight_TType.TZigZag.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TRand = ["TRand",11];
mt_deepnight_TType.TRand.toString = $estr;
mt_deepnight_TType.TRand.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TShake = ["TShake",12];
mt_deepnight_TType.TShake.toString = $estr;
mt_deepnight_TType.TShake.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TShakeBoth = ["TShakeBoth",13];
mt_deepnight_TType.TShakeBoth.toString = $estr;
mt_deepnight_TType.TShakeBoth.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TJump = ["TJump",14];
mt_deepnight_TType.TJump.toString = $estr;
mt_deepnight_TType.TJump.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TElasticEnd = ["TElasticEnd",15];
mt_deepnight_TType.TElasticEnd.toString = $estr;
mt_deepnight_TType.TElasticEnd.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.TBackOut = ["TBackOut",16];
mt_deepnight_TType.TBackOut.toString = $estr;
mt_deepnight_TType.TBackOut.__enum__ = mt_deepnight_TType;
mt_deepnight_TType.__empty_constructs__ = [mt_deepnight_TType.TLinear,mt_deepnight_TType.TLoop,mt_deepnight_TType.TLoopEaseIn,mt_deepnight_TType.TLoopEaseOut,mt_deepnight_TType.TEase,mt_deepnight_TType.TEaseIn,mt_deepnight_TType.TEaseOut,mt_deepnight_TType.TBurn,mt_deepnight_TType.TBurnIn,mt_deepnight_TType.TBurnOut,mt_deepnight_TType.TZigZag,mt_deepnight_TType.TRand,mt_deepnight_TType.TShake,mt_deepnight_TType.TShakeBoth,mt_deepnight_TType.TJump,mt_deepnight_TType.TElasticEnd,mt_deepnight_TType.TBackOut];
var mt_deepnight_Tween = function(tw) {
	this.tw = tw;
	this.paused = false;
	this.done = false;
	this.n = this.ln = 0;
	this.delay = 0;
	this.speed = 1;
	this.set_type(mt_deepnight_TType.TEase);
	this.plays = 1;
	this.pixelSnap = false;
};
$hxClasses["mt.deepnight.Tween"] = mt_deepnight_Tween;
mt_deepnight_Tween.__name__ = ["mt","deepnight","Tween"];
mt_deepnight_Tween.prototype = {
	set_type: function(t) {
		var _gthis = this;
		this.type = t;
		var _g = this.type;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = function(step) {
				return step;
			};
			break;
		case 1:
			tmp = function(step1) {
				var n = 1 - step1;
				var n1 = 1 - step1;
				return n * n * n * 0 + 3 * step1 * (n1 * n1) * 1.33 + 3 * (step1 * step1) * (1 - step1) * 1.33 + step1 * step1 * step1 * 0;
			};
			break;
		case 2:
			tmp = function(step2) {
				var n2 = 1 - step2;
				var n3 = 1 - step2;
				return n2 * n2 * n2 * 0 + 3 * step2 * (n3 * n3) * 0 + 3 * (step2 * step2) * (1 - step2) * 2.25 + step2 * step2 * step2 * 0;
			};
			break;
		case 3:
			tmp = function(step3) {
				var n4 = 1 - step3;
				var n5 = 1 - step3;
				return n4 * n4 * n4 * 0 + 3 * step3 * (n5 * n5) * 2.25 + 3 * (step3 * step3) * (1 - step3) * 0 + step3 * step3 * step3 * 0;
			};
			break;
		case 4:
			tmp = function(step4) {
				var n6 = 1 - step4;
				var n7 = 1 - step4;
				return n6 * n6 * n6 * 0 + 3 * step4 * (n7 * n7) * 0 + 3 * (step4 * step4) * (1 - step4) + step4 * step4 * step4;
			};
			break;
		case 5:
			tmp = function(step5) {
				var n8 = 1 - step5;
				var n9 = 1 - step5;
				return n8 * n8 * n8 * 0 + 3 * step5 * (n9 * n9) * 0 + 3 * (step5 * step5) * (1 - step5) * 0.5 + step5 * step5 * step5;
			};
			break;
		case 6:
			tmp = function(step6) {
				var n10 = 1 - step6;
				var n11 = 1 - step6;
				return n10 * n10 * n10 * 0 + 3 * step6 * (n11 * n11) * 0.5 + 3 * (step6 * step6) * (1 - step6) + step6 * step6 * step6;
			};
			break;
		case 7:
			tmp = function(step7) {
				var n12 = 1 - step7;
				var n13 = 1 - step7;
				return n12 * n12 * n12 * 0 + 3 * step7 * (n13 * n13) + 3 * (step7 * step7) * (1 - step7) * 0 + step7 * step7 * step7;
			};
			break;
		case 8:
			tmp = function(step8) {
				var n14 = 1 - step8;
				var n15 = 1 - step8;
				return n14 * n14 * n14 * 0 + 3 * step8 * (n15 * n15) + 3 * (step8 * step8) * (1 - step8) + step8 * step8 * step8;
			};
			break;
		case 9:
			tmp = function(step9) {
				var n16 = 1 - step9;
				var n17 = 1 - step9;
				return n16 * n16 * n16 * 0 + 3 * step9 * (n17 * n17) * 0 + 3 * (step9 * step9) * (1 - step9) * 0 + step9 * step9 * step9;
			};
			break;
		case 10:
			tmp = function(step10) {
				var n18 = 1 - step10;
				var n19 = 1 - step10;
				return n18 * n18 * n18 * 0 + 3 * step10 * (n19 * n19) * 2.5 + 3 * (step10 * step10) * (1 - step10) * -1.5 + step10 * step10 * step10;
			};
			break;
		case 11:
			tmp = function(step11) {
				return step11;
			};
			break;
		case 12:
			tmp = function(step12) {
				var n20 = 1 - step12;
				var n21 = 1 - step12;
				return n20 * n20 * n20 * 0.5 + 3 * step12 * (n21 * n21) * 1.22 + 3 * (step12 * step12) * (1 - step12) * 1.25 + step12 * step12 * step12 * 0;
			};
			break;
		case 13:
			tmp = function(step13) {
				var n22 = 1 - step13;
				var n23 = 1 - step13;
				return n22 * n22 * n22 * 0.5 + 3 * step13 * (n23 * n23) * 1.22 + 3 * (step13 * step13) * (1 - step13) * 1.25 + step13 * step13 * step13 * 0;
			};
			break;
		case 14:
			tmp = function(step14) {
				var n24 = 1 - step14;
				var n25 = 1 - step14;
				return n24 * n24 * n24 * 0 + 3 * step14 * (n25 * n25) * 2 + 3 * (step14 * step14) * (1 - step14) * 2.79 + step14 * step14 * step14;
			};
			break;
		case 15:
			tmp = function(step15) {
				var n26 = 1 - step15;
				var n27 = 1 - step15;
				return n26 * n26 * n26 * 0 + 3 * step15 * (n27 * n27) * 0.7 + 3 * (step15 * step15) * (1 - step15) * 1.5 + step15 * step15 * step15;
			};
			break;
		case 16:
			tmp = function(step16) {
				var s = 1.70158;
				step16 = step16 / 1 - 1;
				return step16 * step16 * ((s + 1) * step16 + s) + 1;
			};
			break;
		}
		this.interpolate = tmp;
		return this.type;
	}
	,onUpdate: function() {
	}
	,onUpdateT: function(t) {
	}
	,onEnd: function() {
	}
	,onStart: function() {
	}
	,end: function(cb) {
		this.onEnd = cb;
		return this;
	}
	,chainedEvent: function() {
	}
	,interpolate: function(v) {
		return v;
	}
	,delayMs: function(d) {
		var x = d * this.tw.baseFps / 1000;
		this.delay = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,endWithoutCallbacks: function() {
		this.done = true;
	}
	,complete: function(fl_allowLoop) {
		if(fl_allowLoop == null) {
			fl_allowLoop = false;
		}
		var v = this.from + (this.to - this.from) * this.interpolate(1);
		if(this.pixelSnap) {
			v = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		}
		this.setter(v);
		this.onUpdate();
		this.onUpdateT(1);
		this.onEnd();
		this.chainedEvent();
		if(fl_allowLoop && (this.plays == -1 || this.plays > 1)) {
			if(this.plays != -1) {
				this.plays--;
			}
			this.n = this.ln = 0;
		} else {
			this.done = true;
		}
	}
	,internalUpdate: function(dt) {
		if(this.done) {
			return true;
		}
		if(this.paused) {
			return false;
		}
		if(this.delay > 0) {
			this.delay--;
			return false;
		}
		if(this.onStart != null) {
			var cb = $bind(this,this.onStart);
			this.onStart = null;
			cb();
		}
		var dist = this.to - this.from;
		if(this.type == mt_deepnight_TType.TRand) {
			this.ln += Std.random(100) < 33 ? this.speed * dt : 0;
		} else {
			this.ln += this.speed * dt;
		}
		this.n = this.interpolate(this.ln);
		if(this.ln < 1) {
			var val;
			if(this.type != mt_deepnight_TType.TShake && this.type != mt_deepnight_TType.TShakeBoth) {
				val = this.from + this.n * dist;
			} else if(this.type == mt_deepnight_TType.TShake) {
				var val1 = this.from;
				var val2 = Math.random();
				var x = this.n * dist;
				val = val1 + val2 * (x < 0 ? -x : x) * (dist > 0 ? 1 : -1);
			} else {
				val = this.from + Math.random() * this.n * dist * (Std.random(2) * 2 - 1);
			}
			if(this.pixelSnap) {
				val = (val > 0 ? val + .5 : val < 0 ? val - .5 : 0) | 0;
			}
			this.setter(val);
			this.onUpdate();
			this.onUpdateT(this.ln);
		} else {
			this.complete(true);
		}
		return this.done;
	}
	,__class__: mt_deepnight_Tween
};
var mt_deepnight_Tweenie = function(fps) {
	this.baseFps = fps;
	this.tlist = [];
};
$hxClasses["mt.deepnight.Tweenie"] = mt_deepnight_Tweenie;
mt_deepnight_Tweenie.__name__ = ["mt","deepnight","Tweenie"];
mt_deepnight_Tweenie.prototype = {
	terminate_: function(getter,setter,withCallbacks) {
		if(this.tlist == null) {
			return;
		}
		var v = getter();
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.done) {
				continue;
			}
			var old = t.getter();
			t.setter(old + 1);
			if(getter() != v) {
				t.setter(old);
				if(withCallbacks) {
					t.ln = 1;
					t.complete(false);
				} else {
					t.endWithoutCallbacks();
				}
			} else {
				t.setter(old);
			}
		}
	}
	,create_: function(getter,setter,from,to,tp,duration_ms,allowDuplicates) {
		if(allowDuplicates == null) {
			allowDuplicates = false;
		}
		if(duration_ms == null) {
			duration_ms = mt_deepnight_Tweenie.DEFAULT_DURATION;
		}
		if(!allowDuplicates) {
			this.terminate_(getter,setter,false);
		}
		var t = new mt_deepnight_Tween(this);
		t.getter = getter;
		t.setter = setter;
		t.from = from == null ? getter() : from;
		t.speed = 1 / (duration_ms * this.baseFps / 1000);
		t.to = to;
		if(tp != null) {
			t.set_type(tp);
		}
		if(from != null) {
			setter(from);
		}
		this.tlist.push(t);
		return t;
	}
	,destroy: function() {
		this.tlist = null;
	}
	,update: function(dt) {
		if(dt == null) {
			dt = 1.0;
		}
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.internalUpdate(dt)) {
				HxOverrides.remove(this.tlist,t);
			}
		}
	}
	,__class__: mt_deepnight_Tweenie
};
var mt_heaps_ParticlePool = function(tile,count,fps) {
	var this1 = new Array(count);
	this.all = this1;
	this.nalloc = 0;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var p = new mt_heaps_HParticle(this,tile.clone(),fps);
		this.all[i] = p;
		p.kill();
	}
};
$hxClasses["mt.heaps.ParticlePool"] = mt_heaps_ParticlePool;
mt_heaps_ParticlePool.__name__ = ["mt","heaps","ParticlePool"];
mt_heaps_ParticlePool.prototype = {
	free: function(kp) {
		if(this.all == null) {
			return;
		}
		if(this.nalloc > 1) {
			var idx = kp.poolIdx;
			var tmp = this.all[idx];
			this.all[idx] = this.all[this.nalloc - 1];
			this.all[idx].poolIdx = idx;
			this.all[this.nalloc - 1] = tmp;
			this.nalloc--;
		} else {
			this.nalloc = 0;
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		this.all = null;
	}
	,update: function(dt,updateCb) {
		var _g1 = 0;
		var _g = this.nalloc;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this.all[i];
			var _g2 = _this;
			var d = _g2.delayF - dt;
			d = 0 > d ? 0 : d;
			_g2.visible = d <= 0;
			_g2.delayF = d;
			if(_this.delayF <= 0 && !_this.killed) {
				if(_this.onStart != null) {
					var cb = _this.onStart;
					_this.onStart = null;
					cb();
				}
				if(_this.animId != null) {
					var _this1 = _this.animLib;
					var k = _this.animId;
					var f;
					if(k == null) {
						f = _this1.currentGroup;
					} else {
						var _this2 = _this1.groups;
						f = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
					}
					var f1 = f.anim[_this.animCursor | 0];
					var _this3 = _this.animLib;
					var k1 = _this.animId;
					var g;
					if(k1 == null) {
						g = _this3.currentGroup;
					} else {
						var _this4 = _this3.groups;
						g = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
					}
					var fd = g == null ? null : g.frames[f1];
					var tile = _this.animLib.getTile(_this.animId,f1);
					_this.t.setPos(tile.x,tile.y);
					_this.t.setSize(tile.width,tile.height);
					_this.t.dx = -(fd.realWid * _this.animXr + fd.realX | 0);
					_this.t.dy = -(fd.realHei * _this.animYr + fd.realY | 0);
					var _this5 = _this.animCursor += _this.animSpd * dt;
					var _this6 = _this.animLib;
					var k2 = _this.animId;
					var tmp;
					if(k2 == null) {
						tmp = _this6.currentGroup;
					} else {
						var _this7 = _this6.groups;
						tmp = __map_reserved[k2] != null ? _this7.getReserved(k2) : _this7.h[k2];
					}
					if(_this5 >= tmp.anim.length) {
						if(_this.animLoop) {
							var _this8 = _this;
							var _this9 = _this8.animCursor;
							var _this10 = _this.animLib;
							var k3 = _this.animId;
							var tmp1;
							if(k3 == null) {
								tmp1 = _this10.currentGroup;
							} else {
								var _this11 = _this10.groups;
								tmp1 = __map_reserved[k3] != null ? _this11.getReserved(k3) : _this11.h[k3];
							}
							_this8.animCursor = _this9 - tmp1.anim.length;
						} else {
							_this.animId = null;
							_this.animLib = null;
							_this.animCursor = 0;
							_this.kill();
						}
					}
				}
				if(!_this.killed) {
					_this.dx += _this.gx * dt;
					_this.dy += _this.gy * dt;
					_this.x += _this.dx * dt;
					_this.y += _this.dy * dt;
					if(_this.frictX == _this.frictY) {
						var v = _this.frictX;
						var frictDT = dt == 1 || v == 0 || v == 1 ? v : Math.pow(v,dt);
						_this.dx *= frictDT;
						_this.dy *= frictDT;
					} else {
						var v1 = _this.frictX;
						_this.dx *= dt == 1 || v1 == 0 || v1 == 1 ? v1 : Math.pow(v1,dt);
						var v2 = _this.frictY;
						_this.dy *= dt == 1 || v2 == 0 || v2 == 1 ? v2 : Math.pow(v2,dt);
					}
					if(_this.groundY != null && _this.dy > 0 && _this.y >= _this.groundY) {
						_this.dy = -_this.dy * _this.bounceMul;
						_this.y = _this.groundY - 1;
						if(_this.onBounce != null) {
							_this.onBounce();
						}
					}
					if(!_this.killed) {
						_this.rotation += _this.dr * dt;
						_this.scaleX += (_this.ds + _this.dsX) * dt;
						_this.scaleY += (_this.ds + _this.dsY) * dt;
						var v3 = _this.scaleMul;
						var scaleMulDT = dt == 1 || v3 == 0 || v3 == 1 ? v3 : Math.pow(v3,dt);
						_this.scaleX *= scaleMulDT;
						var v4 = _this.scaleXMul;
						_this.scaleX *= dt == 1 || v4 == 0 || v4 == 1 ? v4 : Math.pow(v4,dt);
						_this.scaleY *= scaleMulDT;
						var v5 = _this.scaleYMul;
						_this.scaleY *= dt == 1 || v5 == 0 || v5 == 1 ? v5 : Math.pow(v5,dt);
						var v6 = _this.dsFrict;
						_this.ds *= dt == 1 || v6 == 0 || v6 == 1 ? v6 : Math.pow(v6,dt);
						var v7 = _this.dsFrict;
						_this.dsX *= dt == 1 || v7 == 0 || v7 == 1 ? v7 : Math.pow(v7,dt);
						var v8 = _this.dsFrict;
						_this.dsY *= dt == 1 || v8 == 0 || v8 == 1 ? v8 : Math.pow(v8,dt);
						if(!isNaN(_this.rColor)) {
							var x = _this.rColor + _this.dColor * dt;
							_this.rColor = x < 0 ? 0 : x > 1 ? 1 : x;
							var from = _this.fromColor;
							var to = _this.toColor;
							var ratio = _this.rColor;
							var a = _$UInt_UInt_$Impl_$.toFloat(from >>> 16);
							var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(to >>> 16) - a) * ratio;
							var a1 = _$UInt_UInt_$Impl_$.toFloat(from >>> 8 & 255);
							var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(to >>> 8 & 255) - a1) * ratio;
							var a2 = _$UInt_UInt_$Impl_$.toFloat(from & 255);
							var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(to & 255) - a2) * ratio;
							var c = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) << 16 | ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 8 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0);
							var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
							var x4 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a3);
							_this.r = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / 255;
							var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
							var x5 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a4);
							_this.g = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
							var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
							var x6 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a5);
							_this.b = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
						}
						if(_this.rLifeF > 0 && _this.da != 0) {
							var _g3 = _this;
							_g3.a += _this.da * dt;
							if(_this.a > _this.maxAlpha) {
								_this.da = 0;
								_this.a = _this.maxAlpha;
							}
						}
						_this.rLifeF -= dt;
						if(_this.rLifeF <= 0) {
							var _g4 = _this;
							_g4.a -= _this.fadeOutSpeed * dt;
						} else if(_this.alphaFlicker > 0) {
							var max = _this.alphaFlicker;
							var x7 = _this.a + Math.random() * max * (Std.random(2) * 2 - 1);
							var max1 = _this.maxAlpha;
							_this.a = x7 < 0 ? 0 : x7 > max1 ? max1 : x7;
						}
						if(_this.rLifeF <= 0 && (_this.a <= 0 || _this.killOnLifeOut) || _this.bounds != null && !(_this.x >= _this.bounds.xMin && _this.x < _this.bounds.xMax && _this.y >= _this.bounds.yMin && _this.y < _this.bounds.yMax)) {
							_this.kill();
						} else if(_this.onUpdate != null) {
							_this.onUpdate(_this);
						}
					}
				}
			}
			if(updateCb != null) {
				updateCb(this.all[i]);
			}
		}
	}
	,__class__: mt_heaps_ParticlePool
};
var mt_heaps_HParticle = function(p,tile,fps,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	h2d_BatchElement.call(this,tile);
	this.fps = fps;
	this.pool = p;
	this.poolIdx = -1;
	this.reset(null,null,x,y);
};
$hxClasses["mt.heaps.HParticle"] = mt_heaps_HParticle;
mt_heaps_HParticle.__name__ = ["mt","heaps","HParticle"];
mt_heaps_HParticle.__super__ = h2d_BatchElement;
mt_heaps_HParticle.prototype = $extend(h2d_BatchElement.prototype,{
	reset: function(sb,tile,x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		if(tile != null) {
			this.t.x = tile.x;
			this.t.y = tile.y;
			this.t.width = tile.width;
			this.t.height = tile.height;
			this.t.dx = tile.dx;
			this.t.dy = tile.dy;
			this.t.innerTex = tile.innerTex;
			this.t.u = tile.u;
			this.t.u2 = tile.u2;
			this.t.v = tile.v;
			this.t.v2 = tile.v2;
		}
		this.x = x;
		this.y = y;
		if(this.batch != sb) {
			if(this.batch != null) {
				this.remove();
			}
			if(sb != null) {
				sb.add(this);
			}
		}
		this.data0 = this.data1 = this.data2 = this.data3 = this.data4 = this.data5 = this.data6 = this.data7 = NaN;
		this.animId = null;
		this.animLib = null;
		this.r = this.g = this.b = 1;
		this.visible = true;
		this.rotation = 0;
		this.scaleX = this.scaleY = 1;
		this.a = 1;
		this.scaleMul = 1;
		this.scaleXMul = this.scaleYMul = 1;
		this.dsFrict = 1;
		this.alphaFlicker = 0;
		this.fromColor = 0;
		this.dColor = this.rColor = NaN;
		this.stamp = new Date().getTime() / 1000;
		var _this = this.t;
		_this.dx = -(0.5 * _this.width | 0);
		_this.dy = -(0.5 * _this.height | 0);
		this.animXr = 0.5;
		this.animYr = 0.5;
		this.killed = false;
		if(this.a > 1) {
			this.a = 1;
		}
		this.maxAlpha = 1;
		this.dx = this.dy = this.da = this.dr = this.ds = this.dsX = this.dsY = 0;
		this.gx = this.gy = 0;
		this.frictX = this.frictY = 1;
		this.fadeOutSpeed = 0.1;
		this.bounceMul = 0.85;
		var d = 0 * this.fps;
		d = 0 > d ? 0 : d;
		this.visible = d <= 0;
		this.delayF = d;
		this.set_lifeS(1);
		this.pixel = false;
		this.bounds = mt_heaps_HParticle.DEFAULT_BOUNDS;
		this.killOnLifeOut = false;
		this.groundY = null;
		this.groupId = null;
		this.onStart = null;
		this.onKill = null;
		this.onBounce = null;
		this.onUpdate = null;
	}
	,colorAnimS: function(from,to,t) {
		this.fromColor = from;
		this.toColor = to;
		this.dColor = 1 / (t * this.fps);
		this.rColor = 0;
	}
	,setFadeS: function(targetAlpha,fadeInDurationS,fadeOutDurationS) {
		this.a = 0;
		if(this.a > targetAlpha) {
			this.a = targetAlpha;
		}
		this.maxAlpha = targetAlpha;
		if(fadeInDurationS <= 0) {
			this.a = this.maxAlpha;
		} else {
			this.da = targetAlpha / (fadeInDurationS * this.fps);
		}
		if(fadeOutDurationS <= 0) {
			this.fadeOutSpeed = 99;
		} else {
			this.fadeOutSpeed = targetAlpha / (fadeOutDurationS * this.fps);
		}
	}
	,set_lifeS: function(v) {
		var x = this.fps * v;
		this.rLifeF = this.maxLifeF = x > 0 ? x : 0;
		return v;
	}
	,kill: function() {
		if(this.killed) {
			return;
		}
		if(this.onKill != null) {
			var cb = this.onKill;
			this.onKill = null;
			cb();
		}
		this.a = 0;
		this.set_lifeS(0);
		var d = 0 * this.fps;
		d = 0 > d ? 0 : d;
		this.visible = d <= 0;
		this.delayF = d;
		this.killed = true;
		this.visible = false;
		this.pool.free(this);
	}
	,dispose: function() {
		this.remove();
		this.bounds = null;
	}
	,__class__: mt_heaps_HParticle
});
var mt_heaps_slib__$AnimManager_AnimInstance = function(s,g) {
	this.reverse = false;
	this.speed = 1.0;
	this.stopOnLastFrame = false;
	this.killAfterPlay = false;
	this.isStateAnim = false;
	this.paused = false;
	this.playDuration = -1.;
	this.plays = 1;
	this.curFrameCpt = 0.0;
	this.animCursor = 0;
	this.frames = [];
	this.spr = s;
	this.group = g;
	var _this = this.spr.lib;
	var k = this.group;
	var tmp;
	var tmp1;
	if(k != null) {
		var _this1 = _this.groups;
		tmp1 = __map_reserved[k] != null ? _this1.existsReserved(k) : _this1.h.hasOwnProperty(k);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		var _this2 = _this.groups;
		tmp = (__map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k]).frames.length > 0;
	} else {
		tmp = false;
	}
	if(!tmp) {
		throw new js__$Boot_HaxeError("unknown group " + this.group);
	}
	var _this3 = this.spr.lib;
	var k1 = this.group;
	var tmp2;
	if(k1 == null) {
		tmp2 = _this3.currentGroup;
	} else {
		var _this4 = _this3.groups;
		tmp2 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
	}
	this.frames = tmp2.anim;
};
$hxClasses["mt.heaps.slib._AnimManager.AnimInstance"] = mt_heaps_slib__$AnimManager_AnimInstance;
mt_heaps_slib__$AnimManager_AnimInstance.__name__ = ["mt","heaps","slib","_AnimManager","AnimInstance"];
mt_heaps_slib__$AnimManager_AnimInstance.prototype = {
	onEnd: function() {
	}
	,onEachLoop: function() {
	}
	,__class__: mt_heaps_slib__$AnimManager_AnimInstance
};
var mt_heaps_slib__$AnimManager_StateAnim = function(g,cb) {
	this.group = g;
	this.priority = 0;
	this.cond = cb;
	this.spd = 1.0;
};
$hxClasses["mt.heaps.slib._AnimManager.StateAnim"] = mt_heaps_slib__$AnimManager_StateAnim;
mt_heaps_slib__$AnimManager_StateAnim.__name__ = ["mt","heaps","slib","_AnimManager","StateAnim"];
mt_heaps_slib__$AnimManager_StateAnim.prototype = {
	__class__: mt_heaps_slib__$AnimManager_StateAnim
};
var mt_heaps_slib__$AnimManager_Transition = function(f,t,a,cb) {
	this.from = f;
	this.to = t;
	this.anim = a;
	this.cond = cb;
	this.spd = 1.0;
	this.reverse = false;
};
$hxClasses["mt.heaps.slib._AnimManager.Transition"] = mt_heaps_slib__$AnimManager_Transition;
mt_heaps_slib__$AnimManager_Transition.__name__ = ["mt","heaps","slib","_AnimManager","Transition"];
mt_heaps_slib__$AnimManager_Transition.prototype = {
	__class__: mt_heaps_slib__$AnimManager_Transition
};
var mt_heaps_slib_AnimManager = function(spr) {
	this.S_STAR = "*";
	this.suspendF = 0.;
	this.suspended = false;
	this.destroyed = false;
	this.needUpdates = false;
	this.genSpeed = 1.0;
	this.transitions = [];
	this.stateAnims = [];
	this.stack = [];
	this.spr = spr;
};
$hxClasses["mt.heaps.slib.AnimManager"] = mt_heaps_slib_AnimManager;
mt_heaps_slib_AnimManager.__name__ = ["mt","heaps","slib","AnimManager"];
mt_heaps_slib_AnimManager.prototype = {
	destroy: function() {
		this.destroyed = true;
		this.stopWithoutStateAnims();
		this.needUpdates = false;
		this.stateAnims = null;
		this.stack = null;
		this.spr = null;
	}
	,play: function(group,plays,queueAnim) {
		if(queueAnim == null) {
			queueAnim = false;
		}
		if(plays == null) {
			plays = 1;
		}
		var _this = this.spr.lib;
		var g;
		if(group == null) {
			g = _this.currentGroup;
		} else {
			var _this1 = _this.groups;
			g = __map_reserved[group] != null ? _this1.getReserved(group) : _this1.h[group];
		}
		if(g == null) {
			return this;
		}
		if(g.anim == null || g.anim.length == 0) {
			return this;
		}
		if(!queueAnim && (!this.destroyed && this.stack.length > 0)) {
			this.stopWithoutStateAnims();
		}
		var a = new mt_heaps_slib__$AnimManager_AnimInstance(this.spr,group);
		this.stack.push(a);
		a.plays = plays;
		this.needUpdates = true;
		if(!queueAnim) {
			var t = this.getTransition(this.spr.groupName,this.stack[0].group);
			if(t != null) {
				var _this2 = this.spr.lib;
				var k = t.anim;
				var exists;
				var exists1;
				if(k != null) {
					var _this3 = _this2.groups;
					exists1 = __map_reserved[k] != null ? _this3.existsReserved(k) : _this3.h.hasOwnProperty(k);
				} else {
					exists1 = false;
				}
				if(exists1) {
					var _this4 = _this2.groups;
					exists = (__map_reserved[k] != null ? _this4.getReserved(k) : _this4.h[k]).frames.length > 0;
				} else {
					exists = false;
				}
				if(exists) {
					var a1 = new mt_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
					this.stack.splice(0,0,a1);
					a1.speed = t.spd;
					a1.reverse = t.reverse;
				}
			}
			var _this5 = this.stack[0];
			var f = _this5.frames[_this5.reverse ? _this5.frames.length - 1 - _this5.animCursor : _this5.animCursor];
			if(_this5.spr.get_anim().onEnterFrame != null && _this5.lastFrame != f) {
				_this5.spr.get_anim().onEnterFrame(f);
			}
			if(_this5.spr.groupName != _this5.group) {
				_this5.spr.set(null,_this5.group,f);
			} else if(_this5.spr.frame != f) {
				_this5.spr.setFrame(f);
			}
			_this5.lastFrame = f;
		}
		return this;
	}
	,playOverlap: function(g,spd) {
		if(spd == null) {
			spd = 1.0;
		}
		var _this = this.spr.lib;
		var tmp;
		var tmp1;
		if(g != null) {
			var _this1 = _this.groups;
			tmp1 = __map_reserved[g] != null ? _this1.existsReserved(g) : _this1.h.hasOwnProperty(g);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this2 = _this.groups;
			tmp = (__map_reserved[g] != null ? _this2.getReserved(g) : _this2.h[g]).frames.length > 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			return;
		}
		this.overlap = new mt_heaps_slib__$AnimManager_AnimInstance(this.spr,g);
		this.overlap.speed = spd;
		var _this3 = this.overlap;
		var f = _this3.frames[_this3.reverse ? _this3.frames.length - 1 - _this3.animCursor : _this3.animCursor];
		if(_this3.spr.get_anim().onEnterFrame != null && _this3.lastFrame != f) {
			_this3.spr.get_anim().onEnterFrame(f);
		}
		if(_this3.spr.groupName != _this3.group) {
			_this3.spr.set(null,_this3.group,f);
		} else if(_this3.spr.frame != f) {
			_this3.spr.setFrame(f);
		}
		_this3.lastFrame = f;
		this.needUpdates = true;
	}
	,loop: function() {
		if(!this.destroyed && this.stack.length > 0) {
			this.stack[this.stack.length - 1].plays = 999999;
		}
		return this;
	}
	,stopWithStateAnims: function() {
		this.stack = [];
		this.applyStateAnims();
	}
	,stopWithoutStateAnims: function(k,frame) {
		this.stack = [];
		if(k != null) {
			this.spr.set(null,k,frame != null ? frame : 0);
		} else if(frame != null) {
			this.spr.setFrame(frame);
		}
	}
	,unsuspend: function() {
		this.suspended = false;
		this.suspendF = 0;
	}
	,getTransition: function(from,to) {
		var _g = 0;
		var _g1 = this.transitions;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if((t.from == this.S_STAR || t.from == from) && (t.to == this.S_STAR || t.to == to) && t.cond()) {
				return t;
			}
		}
		return null;
	}
	,registerStateAnim: function(group,priority,spd,condition) {
		if(spd == null) {
			spd = 1.0;
		}
		if(condition == null) {
			condition = function() {
				return true;
			};
		}
		this.removeStateAnim(group,priority);
		var s = new mt_heaps_slib__$AnimManager_StateAnim(group,condition);
		s.priority = priority;
		s.spd = spd;
		this.stateAnims.push(s);
		this.stateAnims.sort(function(a,b) {
			return -Reflect.compare(a.priority,b.priority);
		});
		this.applyStateAnims();
	}
	,removeStateAnim: function(group,priority) {
		var i = 0;
		while(i < this.stateAnims.length) if(this.stateAnims[i].group == group && this.stateAnims[i].priority == priority) {
			this.stateAnims.splice(i,1);
		} else {
			++i;
		}
	}
	,applyStateAnims: function() {
		if(!this.destroyed && this.stack.length > 0 && !this.stack[0].isStateAnim) {
			return;
		}
		var _g = 0;
		var _g1 = this.stateAnims;
		while(_g < _g1.length) {
			var sa = _g1[_g];
			++_g;
			if(sa.cond()) {
				if(!this.destroyed && this.stack.length > 0 && this.stack[0].group == sa.group) {
					break;
				}
				var _this = this.play(sa.group).loop();
				if(!_this.destroyed && _this.stack.length > 0) {
					_this.stack[_this.stack.length - 1].speed = sa.spd;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack[this.stack.length - 1].isStateAnim = true;
				}
				break;
			}
		}
	}
	,_update: function(dt) {
		if(this.suspended) {
			this.suspendF -= dt;
			if(this.suspendF <= 0) {
				this.unsuspend();
			}
			return;
		}
		this.applyStateAnims();
		var a = this.stack[0];
		if(a != null && !a.paused) {
			a.curFrameCpt += dt * this.genSpeed * a.speed;
			if(a.playDuration > 0) {
				a.playDuration -= dt;
				if(a.playDuration <= 0) {
					a.plays = 0;
					a.animCursor = a.frames.length;
					a.curFrameCpt = 1;
				}
			}
			while(a.curFrameCpt > 1) {
				a.curFrameCpt--;
				a.animCursor++;
				if(a.animCursor < a.frames.length) {
					var f = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f) {
						a.spr.get_anim().onEnterFrame(f);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f);
					} else if(a.spr.frame != f) {
						a.spr.setFrame(f);
					}
					a.lastFrame = f;
					continue;
				}
				a.animCursor = 0;
				a.plays--;
				if(a.plays > 0 || a.playDuration > 0) {
					a.onEachLoop();
					a = this.stack[0];
					var f1 = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f1) {
						a.spr.get_anim().onEnterFrame(f1);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f1);
					} else if(a.spr.frame != f1) {
						a.spr.setFrame(f1);
					}
					a.lastFrame = f1;
					continue;
				}
				if(a.stopOnLastFrame) {
					this.stopWithoutStateAnims();
				}
				a.onEnd();
				if(a.killAfterPlay) {
					this.spr.remove();
					break;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack.shift();
					if(this.stack.length == 0) {
						this.stopWithStateAnims();
					} else {
						var t = this.getTransition(this.spr.groupName,this.stack[0].group);
						if(t != null) {
							var _this = this.spr.lib;
							var k = t.anim;
							var exists;
							var exists1;
							if(k != null) {
								var _this1 = _this.groups;
								exists1 = __map_reserved[k] != null ? _this1.existsReserved(k) : _this1.h.hasOwnProperty(k);
							} else {
								exists1 = false;
							}
							if(exists1) {
								var _this2 = _this.groups;
								exists = (__map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k]).frames.length > 0;
							} else {
								exists = false;
							}
							if(exists) {
								var a1 = new mt_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
								this.stack.splice(0,0,a1);
								a1.speed = t.spd;
								a1.reverse = t.reverse;
							}
						}
						var _this3 = this.stack[0];
						var f2 = _this3.frames[_this3.reverse ? _this3.frames.length - 1 - _this3.animCursor : _this3.animCursor];
						if(_this3.spr.get_anim().onEnterFrame != null && _this3.lastFrame != f2) {
							_this3.spr.get_anim().onEnterFrame(f2);
						}
						if(_this3.spr.groupName != _this3.group) {
							_this3.spr.set(null,_this3.group,f2);
						} else if(_this3.spr.frame != f2) {
							_this3.spr.setFrame(f2);
						}
						_this3.lastFrame = f2;
					}
					a = this.stack[0];
				}
				if(!(!this.destroyed && this.stack.length > 0)) {
					break;
				}
			}
		}
		if(this.overlap != null && !this.spr.destroyed) {
			this.overlap.curFrameCpt += dt * this.genSpeed * this.overlap.speed;
			while(this.overlap.curFrameCpt > 1) {
				this.overlap.curFrameCpt--;
				this.overlap.animCursor++;
				var _this4 = this.overlap;
				if(_this4.animCursor >= _this4.frames.length) {
					this.overlap = null;
					if(this.stack[0] != null) {
						var _this5 = this.stack[0];
						var f3 = _this5.frames[_this5.reverse ? _this5.frames.length - 1 - _this5.animCursor : _this5.animCursor];
						if(_this5.spr.get_anim().onEnterFrame != null && _this5.lastFrame != f3) {
							_this5.spr.get_anim().onEnterFrame(f3);
						}
						if(_this5.spr.groupName != _this5.group) {
							_this5.spr.set(null,_this5.group,f3);
						} else if(_this5.spr.frame != f3) {
							_this5.spr.setFrame(f3);
						}
						_this5.lastFrame = f3;
					}
					break;
				}
			}
			if(this.overlap != null) {
				var _this6 = this.overlap;
				var f4 = _this6.frames[_this6.reverse ? _this6.frames.length - 1 - _this6.animCursor : _this6.animCursor];
				if(_this6.spr.get_anim().onEnterFrame != null && _this6.lastFrame != f4) {
					_this6.spr.get_anim().onEnterFrame(f4);
				}
				if(_this6.spr.groupName != _this6.group) {
					_this6.spr.set(null,_this6.group,f4);
				} else if(_this6.spr.frame != f4) {
					_this6.spr.setFrame(f4);
				}
				_this6.lastFrame = f4;
			}
		}
		if(!this.destroyed && !(!this.destroyed && this.stack.length > 0) && this.overlap == null) {
			this.needUpdates = false;
		}
	}
	,__class__: mt_heaps_slib_AnimManager
};
var mt_heaps_slib_SpriteInterface = function() { };
$hxClasses["mt.heaps.slib.SpriteInterface"] = mt_heaps_slib_SpriteInterface;
mt_heaps_slib_SpriteInterface.__name__ = ["mt","heaps","slib","SpriteInterface"];
mt_heaps_slib_SpriteInterface.prototype = {
	__class__: mt_heaps_slib_SpriteInterface
};
var mt_heaps_slib_HSprite = function(l,g,f,parent) {
	if(f == null) {
		f = 0;
	}
	h2d_Drawable.call(this,parent);
	this.destroyed = false;
	this.pivot = new mt_heaps_slib_SpritePivot();
	this.lastPage = -1;
	if(l != null) {
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw new js__$Boot_HaxeError("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var _this = this.pivot;
				_this.centerFactorX = this.lib.defaultCenterX;
				_this.centerFactorY = this.lib.defaultCenterY;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var _this1 = this.lib;
			var k = this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			this.group = tmp;
			var _this3 = this.lib;
			var k1 = this.groupName;
			var g1;
			if(k1 == null) {
				g1 = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			this.frameData = g1 == null ? null : g1.frames[f];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + f + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(f);
		} else {
			this.setEmptyTexture();
		}
	} else {
		this.setEmptyTexture();
	}
};
$hxClasses["mt.heaps.slib.HSprite"] = mt_heaps_slib_HSprite;
mt_heaps_slib_HSprite.__name__ = ["mt","heaps","slib","HSprite"];
mt_heaps_slib_HSprite.__interfaces__ = [mt_heaps_slib_SpriteInterface];
mt_heaps_slib_HSprite.__super__ = h2d_Drawable;
mt_heaps_slib_HSprite.prototype = $extend(h2d_Drawable.prototype,{
	toString: function() {
		return "HSprite_" + this.groupName + "[" + this.frame + "]";
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new mt_heaps_slib_AnimManager(this);
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,setEmptyTexture: function() {
		this.rawTile = h2d_Tile.fromColor(8453888,4,4);
	}
	,set: function(l,g,frame,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw new js__$Boot_HaxeError("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var _this = this.pivot;
				_this.centerFactorX = this.lib.defaultCenterX;
				_this.centerFactorY = this.lib.defaultCenterY;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new mt_heaps_slib_AnimManager(this);
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this1 = this.lib;
			var k = this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			this.group = tmp;
			var _this3 = this.lib;
			var k1 = this.groupName;
			var g1;
			if(k1 == null) {
				g1 = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			this.frameData = g1 == null ? null : g1.frames[frame];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	}
	,setFrame: function(f) {
		var old = this.frame;
		this.frame = f;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var prev = this.frameData;
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			var g;
			if(k == null) {
				g = _this.currentGroup;
			} else {
				var _this1 = _this.groups;
				g = __map_reserved[k] != null ? _this1.getReserved(k) : _this1.h[k];
			}
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.lastFrame != this.frameData.page) {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
				this.lastPage = this.frameData.page;
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		if(this.lib != null) {
			this.lib.addChild(this);
		}
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(!this.destroyed) {
			this.destroyed = true;
			if(this.lib != null) {
				this.lib.removeChild(this);
			}
			if(this._animManager != null) {
				this._animManager.destroy();
				this._animManager = null;
			}
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPos(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this1 = this.pivot;
				if(!_this1.isUndefined && _this1.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this2 = this.pivot;
			if(!_this2.isUndefined && !_this2.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this3 = this.pivot;
				if(!_this3.isUndefined && _this3.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp = this.rawTile.dx;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd1 = this.frameData;
			this.rawTile.setPos(fd1.x,fd1.y);
			this.rawTile.setSize(fd1.wid,fd1.hei);
			var _this4 = this.pivot;
			if(!_this4.isUndefined && !_this4.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd1.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd1.realY | 0);
			} else {
				var _this5 = this.pivot;
				if(!_this5.isUndefined && _this5.usingFactor) {
					this.rawTile.dx = -(fd1.realWid * this.pivot.centerFactorX + fd1.realX | 0);
					this.rawTile.dy = -(fd1.realHei * this.pivot.centerFactorY + fd1.realY | 0);
				}
			}
		} else {
			var _this6 = this.pivot;
			if(!_this6.isUndefined && !_this6.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this7 = this.pivot;
				if(!_this7.isUndefined && _this7.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp1 = this.rawTile.dy;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd2 = this.frameData;
			this.rawTile.setPos(fd2.x,fd2.y);
			this.rawTile.setSize(fd2.wid,fd2.hei);
			var _this8 = this.pivot;
			if(!_this8.isUndefined && !_this8.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd2.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd2.realY | 0);
			} else {
				var _this9 = this.pivot;
				if(!_this9.isUndefined && _this9.usingFactor) {
					this.rawTile.dx = -(fd2.realWid * this.pivot.centerFactorX + fd2.realX | 0);
					this.rawTile.dy = -(fd2.realHei * this.pivot.centerFactorY + fd2.realY | 0);
				}
			}
		} else {
			var _this10 = this.pivot;
			if(!_this10.isUndefined && !_this10.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this11 = this.pivot;
				if(!_this11.isUndefined && _this11.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp2 = this.rawTile.width;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd3 = this.frameData;
			this.rawTile.setPos(fd3.x,fd3.y);
			this.rawTile.setSize(fd3.wid,fd3.hei);
			var _this12 = this.pivot;
			if(!_this12.isUndefined && !_this12.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd3.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd3.realY | 0);
			} else {
				var _this13 = this.pivot;
				if(!_this13.isUndefined && _this13.usingFactor) {
					this.rawTile.dx = -(fd3.realWid * this.pivot.centerFactorX + fd3.realX | 0);
					this.rawTile.dy = -(fd3.realHei * this.pivot.centerFactorY + fd3.realY | 0);
				}
			}
		} else {
			var _this14 = this.pivot;
			if(!_this14.isUndefined && !_this14.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this15 = this.pivot;
				if(!_this15.isUndefined && _this15.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.addBounds(relativeTo,out,tmp,tmp1,tmp2,this.rawTile.height);
	}
	,draw: function(ctx) {
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPos(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this1 = this.pivot;
				if(!_this1.isUndefined && _this1.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this2 = this.pivot;
			if(!_this2.isUndefined && !_this2.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this3 = this.pivot;
				if(!_this3.isUndefined && _this3.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.emitTile(ctx,this.rawTile);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new mt_heaps_slib_AnimManager(this);
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			var dt = !isNaN(mt_heaps_slib_SpriteLib.DT) ? mt_heaps_slib_SpriteLib.DT : ctx.elapsedTime * hxd_Timer.wantedFPS;
			if(_this.needUpdates) {
				_this._update(dt);
			}
		}
	}
	,__class__: mt_heaps_slib_HSprite
});
var mt_heaps_slib_HSpriteBE = function(sb,l,g,f) {
	if(f == null) {
		f = 0;
	}
	if(l.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	h2d_BatchElement.call(this,l.pages[0].clone());
	this.destroyed = false;
	this.pivot = new mt_heaps_slib_SpritePivot();
	sb.add(this);
	var changed = false;
	if(l != null && this.lib != l) {
		changed = true;
		if(g == null) {
			this.groupName = null;
			this.group = null;
			this.frameData = null;
		}
		if(this.allocated && this.lib != null) {
			this.lib.removeChild(this);
		}
		this.lib = l;
		if(this.allocated) {
			this.lib.addChild(this);
		}
		if(this.pivot.isUndefined) {
			var _this = this.pivot;
			_this.centerFactorX = this.lib.defaultCenterX;
			_this.centerFactorY = this.lib.defaultCenterY;
			_this.usingFactor = true;
			_this.isUndefined = false;
			this.updateTile();
		}
	}
	if(g != null && g != this.groupName) {
		changed = true;
		this.groupName = g;
	}
	if(f != null && f != this.frame) {
		changed = true;
		this.frame = f;
	}
	if(!this.destroyed && this.groupName != null && changed) {
		var _this1 = this.lib;
		var k = this.groupName;
		var tmp;
		if(k == null) {
			tmp = _this1.currentGroup;
		} else {
			var _this2 = _this1.groups;
			tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
		}
		this.group = tmp;
		var _this3 = this.lib;
		var k1 = this.groupName;
		var g1;
		if(k1 == null) {
			g1 = _this3.currentGroup;
		} else {
			var _this4 = _this3.groups;
			g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
		}
		this.frameData = g1 == null ? null : g1.frames[f];
		if(this.frameData == null) {
			throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + f + ")");
		}
		this.updateTile();
		if(this.onFrameChange != null) {
			this.onFrameChange();
		}
	}
};
$hxClasses["mt.heaps.slib.HSpriteBE"] = mt_heaps_slib_HSpriteBE;
mt_heaps_slib_HSpriteBE.__name__ = ["mt","heaps","slib","HSpriteBE"];
mt_heaps_slib_HSpriteBE.__interfaces__ = [mt_heaps_slib_SpriteInterface];
mt_heaps_slib_HSpriteBE.__super__ = h2d_BatchElement;
mt_heaps_slib_HSpriteBE.prototype = $extend(h2d_BatchElement.prototype,{
	onAdd: function() {
		if(this.allocated) {
			return;
		}
		this.allocated = true;
		if(this.lib != null) {
			this.lib.addChild(this);
		}
	}
	,onRemove: function() {
		if(!this.allocated) {
			return;
		}
		this.allocated = false;
		if(this.lib != null) {
			this.lib.removeChild(this);
		}
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new mt_heaps_slib_AnimManager(this);
			if(this.batch != null) {
				this.batch.hasUpdate = true;
			}
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,toString: function() {
		return "HSpriteBE_" + this.groupName + "[" + this.frame + "]";
	}
	,set: function(l,g,f,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(f == null) {
			f = 0;
		}
		var changed = false;
		if(l != null && this.lib != l) {
			changed = true;
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var _this = this.pivot;
				_this.centerFactorX = this.lib.defaultCenterX;
				_this.centerFactorY = this.lib.defaultCenterY;
				_this.usingFactor = true;
				_this.isUndefined = false;
				this.updateTile();
			}
		}
		if(g != null && g != this.groupName) {
			changed = true;
			this.groupName = g;
		}
		if(f != null && f != this.frame) {
			changed = true;
			this.frame = f;
		}
		if(!this.destroyed && this.groupName != null && changed) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new mt_heaps_slib_AnimManager(this);
					if(this.batch != null) {
						this.batch.hasUpdate = true;
					}
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this1 = this.lib;
			var k = this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			this.group = tmp;
			var _this3 = this.lib;
			var k1 = this.groupName;
			var g1;
			if(k1 == null) {
				g1 = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			this.frameData = g1 == null ? null : g1.frames[f];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + f + ")");
			}
			this.updateTile();
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,setFrame: function(f) {
		var changed = f != this.frame;
		this.frame = f;
		if(!this.destroyed && this.groupName != null && changed) {
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			var g;
			if(k == null) {
				g = _this.currentGroup;
			} else {
				var _this1 = _this.groups;
				g = __map_reserved[k] != null ? _this1.getReserved(k) : _this1.h[k];
			}
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
			this.updateTile();
		}
	}
	,updateTile: function() {
		if(!(!this.destroyed && this.groupName != null)) {
			return;
		}
		var fd = this.frameData;
		this.lib.updTile(this.t,this.groupName,this.frame);
		var _this = this.pivot;
		if(!_this.isUndefined && !_this.usingFactor) {
			var x = -this.pivot.coordX - fd.realX;
			this.t.dx = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
			var x1 = -this.pivot.coordY - fd.realY;
			this.t.dy = (x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0;
		}
		var _this1 = this.pivot;
		if(!_this1.isUndefined && _this1.usingFactor) {
			this.t.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
			this.t.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
		}
	}
	,remove: function() {
		h2d_BatchElement.prototype.remove.call(this);
		if(!this.destroyed) {
			this.destroyed = true;
			if(this._animManager != null) {
				this._animManager.destroy();
				this._animManager = null;
			}
		}
	}
	,update: function(et) {
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new mt_heaps_slib_AnimManager(this);
				if(this.batch != null) {
					this.batch.hasUpdate = true;
				}
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			var dt = !isNaN(mt_heaps_slib_SpriteLib.DT) ? mt_heaps_slib_SpriteLib.DT : et * hxd_Timer.wantedFPS;
			if(_this.needUpdates) {
				_this._update(dt);
			}
		}
		return h2d_BatchElement.prototype.update.call(this,et);
	}
	,__class__: mt_heaps_slib_HSpriteBE
});
var mt_heaps_slib_HSpriteBatch = function(t,parent) {
	h2d_SpriteBatch.call(this,t,parent);
};
$hxClasses["mt.heaps.slib.HSpriteBatch"] = mt_heaps_slib_HSpriteBatch;
mt_heaps_slib_HSpriteBatch.__name__ = ["mt","heaps","slib","HSpriteBatch"];
mt_heaps_slib_HSpriteBatch.__super__ = h2d_SpriteBatch;
mt_heaps_slib_HSpriteBatch.prototype = $extend(h2d_SpriteBatch.prototype,{
	onAdd: function() {
		h2d_SpriteBatch.prototype.onAdd.call(this);
		var c = this.first;
		while(c != null) {
			if((c instanceof mt_heaps_slib_HSpriteBE)) {
				c.onAdd();
			}
			c = c.next;
		}
	}
	,onRemove: function() {
		h2d_SpriteBatch.prototype.onRemove.call(this);
		var c = this.first;
		while(c != null) {
			if((c instanceof mt_heaps_slib_HSpriteBE)) {
				c.onRemove();
			}
			c = c.next;
		}
	}
	,add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e = h2d_SpriteBatch.prototype.add.call(this,e,before);
		if(this.allocated && (e instanceof mt_heaps_slib_HSpriteBE)) {
			e.onAdd();
		}
		return e;
	}
	,'delete': function(e) {
		h2d_SpriteBatch.prototype["delete"].call(this,e);
		if(this.allocated && (e instanceof mt_heaps_slib_HSpriteBE)) {
			e.onRemove();
		}
	}
	,__class__: mt_heaps_slib_HSpriteBatch
});
var mt_heaps_slib_FrameData = function(page,x,y,wid,hei,realX,realY,realWid,realHei,tile) {
	this.page = page;
	this.x = x;
	this.y = y;
	this.wid = wid;
	this.hei = hei;
	this.realX = realX;
	this.realY = realY;
	this.realWid = realWid;
	this.realHei = realHei;
	this.tile = tile;
};
$hxClasses["mt.heaps.slib.FrameData"] = mt_heaps_slib_FrameData;
mt_heaps_slib_FrameData.__name__ = ["mt","heaps","slib","FrameData"];
mt_heaps_slib_FrameData.prototype = {
	__class__: mt_heaps_slib_FrameData
};
var mt_heaps_slib_LibGroup = function(id,maxWid,maxHei,frames,anim) {
	this.id = id;
	this.maxWid = maxWid;
	this.maxHei = maxHei;
	this.frames = frames;
	this.anim = anim;
};
$hxClasses["mt.heaps.slib.LibGroup"] = mt_heaps_slib_LibGroup;
mt_heaps_slib_LibGroup.__name__ = ["mt","heaps","slib","LibGroup"];
mt_heaps_slib_LibGroup.prototype = {
	__class__: mt_heaps_slib_LibGroup
};
var mt_heaps_slib_SLBError = $hxClasses["mt.heaps.slib.SLBError"] = { __ename__ : true, __constructs__ : ["NoGroupSelected","GroupAlreadyExists","InvalidFrameDuration","EndFrameLower","InvalidFrames","NoCurrentGroup","AnimFrameExceeds","AssetImportFailed","NotSameSLBFromBatch"] };
mt_heaps_slib_SLBError.NoGroupSelected = ["NoGroupSelected",0];
mt_heaps_slib_SLBError.NoGroupSelected.toString = $estr;
mt_heaps_slib_SLBError.NoGroupSelected.__enum__ = mt_heaps_slib_SLBError;
mt_heaps_slib_SLBError.GroupAlreadyExists = function(g) { var $x = ["GroupAlreadyExists",1,g]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.InvalidFrameDuration = function(s) { var $x = ["InvalidFrameDuration",2,s]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.EndFrameLower = function(s) { var $x = ["EndFrameLower",3,s]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.InvalidFrames = function(s) { var $x = ["InvalidFrames",4,s]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.NoCurrentGroup = ["NoCurrentGroup",5];
mt_heaps_slib_SLBError.NoCurrentGroup.toString = $estr;
mt_heaps_slib_SLBError.NoCurrentGroup.__enum__ = mt_heaps_slib_SLBError;
mt_heaps_slib_SLBError.AnimFrameExceeds = function(id,anim,frame) { var $x = ["AnimFrameExceeds",6,id,anim,frame]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.AssetImportFailed = function(e) { var $x = ["AssetImportFailed",7,e]; $x.__enum__ = mt_heaps_slib_SLBError; $x.toString = $estr; return $x; };
mt_heaps_slib_SLBError.NotSameSLBFromBatch = ["NotSameSLBFromBatch",8];
mt_heaps_slib_SLBError.NotSameSLBFromBatch.toString = $estr;
mt_heaps_slib_SLBError.NotSameSLBFromBatch.__enum__ = mt_heaps_slib_SLBError;
mt_heaps_slib_SLBError.__empty_constructs__ = [mt_heaps_slib_SLBError.NoGroupSelected,mt_heaps_slib_SLBError.NoCurrentGroup,mt_heaps_slib_SLBError.NotSameSLBFromBatch];
var mt_heaps_slib_SpriteLib = function(pages,normalPages) {
	this.groups = new haxe_ds_StringMap();
	this.defaultCenterX = 0;
	this.defaultCenterY = 0;
	this.gridX = this.gridY = 16;
	this.children = [];
	this.pages = pages;
	this.normalPages = normalPages;
};
$hxClasses["mt.heaps.slib.SpriteLib"] = mt_heaps_slib_SpriteLib;
mt_heaps_slib_SpriteLib.__name__ = ["mt","heaps","slib","SpriteLib"];
mt_heaps_slib_SpriteLib.prototype = {
	createGroup: function(k) {
		var _this = this.groups;
		if(__map_reserved[k] != null ? _this.existsReserved(k) : _this.h.hasOwnProperty(k)) {
			throw new js__$Boot_HaxeError(mt_heaps_slib_SLBError.GroupAlreadyExists(k));
		}
		var this1 = this.groups;
		var _g1 = k;
		var _g = [];
		var value = new mt_heaps_slib_LibGroup(_g1,0,0,_g,[]);
		var _this1 = this1;
		if(__map_reserved[k] != null) {
			_this1.setReserved(k,value);
		} else {
			_this1.h[k] = value;
		}
		var tmp;
		if(k == null) {
			tmp = this.currentGroup;
		} else {
			var _this2 = this.groups;
			tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
		}
		this.currentGroup = tmp;
		return this.currentGroup;
	}
	,sliceCustom: function(groupName,page,frame,x,y,wid,hei,realX,realY,realWid,realHei) {
		var g;
		var g1;
		var g2;
		if(groupName != null) {
			var _this = this.groups;
			g2 = __map_reserved[groupName] != null ? _this.existsReserved(groupName) : _this.h.hasOwnProperty(groupName);
		} else {
			g2 = false;
		}
		if(g2) {
			var _this1 = this.groups;
			g1 = (__map_reserved[groupName] != null ? _this1.getReserved(groupName) : _this1.h[groupName]).frames.length > 0;
		} else {
			g1 = false;
		}
		if(g1) {
			if(groupName == null) {
				g = this.currentGroup;
			} else {
				var _this2 = this.groups;
				g = __map_reserved[groupName] != null ? _this2.getReserved(groupName) : _this2.h[groupName];
			}
		} else {
			g = this.createGroup(groupName);
		}
		var x1 = g.maxWid;
		g.maxWid = x1 > wid ? x1 : wid;
		var x2 = g.maxHei;
		g.maxHei = x2 > hei ? x2 : hei;
		var fd = new mt_heaps_slib_FrameData(page,x,y,wid,hei,realX,realY,realWid,realHei,null);
		g.frames[frame] = fd;
		return fd;
	}
	,resliceCustom: function(groupName,frame,fd) {
		var g;
		var g1;
		var g2;
		if(groupName != null) {
			var _this = this.groups;
			g2 = __map_reserved[groupName] != null ? _this.existsReserved(groupName) : _this.h.hasOwnProperty(groupName);
		} else {
			g2 = false;
		}
		if(g2) {
			var _this1 = this.groups;
			g1 = (__map_reserved[groupName] != null ? _this1.getReserved(groupName) : _this1.h[groupName]).frames.length > 0;
		} else {
			g1 = false;
		}
		if(g1) {
			if(groupName == null) {
				g = this.currentGroup;
			} else {
				var _this2 = this.groups;
				g = __map_reserved[groupName] != null ? _this2.getReserved(groupName) : _this2.h[groupName];
			}
		} else {
			g = this.createGroup(groupName);
		}
		var x = g.maxWid;
		var y = fd.wid;
		g.maxWid = x > y ? x : y;
		var x1 = g.maxHei;
		var y1 = fd.hei;
		g.maxHei = x1 > y1 ? x1 : y1;
		g.frames[frame] = fd;
		return fd;
	}
	,toString: function() {
		var l = [];
		var k = this.groups.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var g;
			if(k1 == null) {
				g = this.currentGroup;
			} else {
				var _this = this.groups;
				g = __map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1];
			}
			l.push(k1 + " (" + g.maxWid + "x" + g.maxHei + ")" + (g.frames.length > 1 ? " " + g.frames.length + "f" : "") + (g.anim.length > 1 ? " animated(" + g.anim.length + "f)" : ""));
		}
		l.sort(function(a,b) {
			return Reflect.compare(a,b);
		});
		return "| " + l.join("\n| ");
	}
	,addChild: function(s) {
		this.children.push(s);
	}
	,removeChild: function(s) {
		HxOverrides.remove(this.children,s);
	}
	,getTile: function(g,frame,px,py) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var g1;
		if(g == null) {
			g1 = this.currentGroup;
		} else {
			var _this = this.groups;
			g1 = __map_reserved[g] != null ? _this.getReserved(g) : _this.h[g];
		}
		var fd = g1 == null ? null : g1.frames[frame];
		if(fd == null) {
			throw new js__$Boot_HaxeError("Unknown group " + g + "#" + frame + "!");
		}
		var t = this.pages[fd.page].clone();
		return this.updTile(t,g,frame,px,py);
	}
	,updTile: function(t,g,frame,px,py) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var g1;
		if(g == null) {
			g1 = this.currentGroup;
		} else {
			var _this = this.groups;
			g1 = __map_reserved[g] != null ? _this.getReserved(g) : _this.h[g];
		}
		var fd = g1 == null ? null : g1.frames[frame];
		if(fd == null) {
			throw new js__$Boot_HaxeError("Unknown group " + g + "#" + frame + "!");
		}
		t.setPos(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		return t;
	}
	,getTileRandom: function(g,px,py,rndFunc) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		var tmp;
		var tmp1;
		if(g != null) {
			var _this = this.groups;
			tmp1 = __map_reserved[g] != null ? _this.existsReserved(g) : _this.h.hasOwnProperty(g);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this1 = this.groups;
			tmp = (__map_reserved[g] != null ? _this1.getReserved(g) : _this1.h[g]).frames.length > 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			throw new js__$Boot_HaxeError("Unknown group " + g);
		}
		var tmp2;
		if(g == null) {
			tmp2 = this.currentGroup;
		} else {
			var _this2 = this.groups;
			tmp2 = __map_reserved[g] != null ? _this2.getReserved(g) : _this2.h[g];
		}
		return this.getTile(g,(rndFunc == null ? Std.random : rndFunc)(tmp2.frames.length),px,py);
	}
	,__defineAnim: function(group,anim) {
		if(this.currentGroup == null && group == null) {
			throw new js__$Boot_HaxeError(mt_heaps_slib_SLBError.NoCurrentGroup);
		}
		if(group != null) {
			var tmp;
			if(group == null) {
				tmp = this.currentGroup;
			} else {
				var _this = this.groups;
				tmp = __map_reserved[group] != null ? _this.getReserved(group) : _this.h[group];
			}
			this.currentGroup = tmp;
		}
		var _g = 0;
		while(_g < anim.length) {
			var f = anim[_g];
			++_g;
			if(f >= this.currentGroup.frames.length) {
				throw new js__$Boot_HaxeError(mt_heaps_slib_SLBError.AnimFrameExceeds(this.currentGroup.id,"[" + anim.join(",") + "] " + this.currentGroup.frames.length,f));
			}
		}
		this.currentGroup.anim = anim;
	}
	,__class__: mt_heaps_slib_SpriteLib
};
var mt_heaps_slib_SpritePivot = function() {
	this.isUndefined = true;
};
$hxClasses["mt.heaps.slib.SpritePivot"] = mt_heaps_slib_SpritePivot;
mt_heaps_slib_SpritePivot.__name__ = ["mt","heaps","slib","SpritePivot"];
mt_heaps_slib_SpritePivot.prototype = {
	__class__: mt_heaps_slib_SpritePivot
};
var mt_heaps_slib_assets_Atlas = function() { };
$hxClasses["mt.heaps.slib.assets.Atlas"] = mt_heaps_slib_assets_Atlas;
mt_heaps_slib_assets_Atlas.__name__ = ["mt","heaps","slib","assets","Atlas"];
mt_heaps_slib_assets_Atlas.ltick = function() {
	if(mt_heaps_slib_assets_Atlas.LOADING_TICK_FUN != null) {
		mt_heaps_slib_assets_Atlas.LOADING_TICK_FUN();
	}
};
mt_heaps_slib_assets_Atlas.load = function(atlasPath,onReload,notZeroBaseds,properties) {
	var notZeroMap = new haxe_ds_StringMap();
	if(notZeroBaseds != null) {
		var _g = 0;
		while(_g < notZeroBaseds.length) {
			var id = notZeroBaseds[_g];
			++_g;
			if(__map_reserved[id] != null) {
				notZeroMap.setReserved(id,true);
			} else {
				notZeroMap.h[id] = true;
			}
		}
	}
	var propertiesMap = new haxe_ds_StringMap();
	if(properties != null) {
		var _g1 = 0;
		var _g2 = properties.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var value = properties.length - 1 - i;
			var key = properties[i];
			if(__map_reserved[key] != null) {
				propertiesMap.setReserved(key,value);
			} else {
				propertiesMap.h[key] = value;
			}
		}
	}
	var res = hxd_Res.load(atlasPath);
	var basePath = atlasPath.indexOf("/") < 0 ? "" : HxOverrides.substr(atlasPath,0,atlasPath.lastIndexOf("/") + 1);
	var atlas = res.to(hxd_res_Atlas);
	var lib = mt_heaps_slib_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
	res.watch(function() {
		mt_heaps_slib_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
		if(onReload != null) {
			onReload();
		}
	});
	return lib;
};
mt_heaps_slib_assets_Atlas.convertToSlib = function(atlas,notZeroBaseds,properties,atlasName) {
	mt_heaps_slib_assets_Atlas.ltick();
	var contents = atlas.getContents();
	mt_heaps_slib_assets_Atlas.ltick();
	var bestVariants = new haxe_ds_StringMap();
	var propertiesReg = new EReg("(.*)((\\.[a-z_\\-]+)+)$","gi");
	var rawName = contents.keys();
	while(rawName.hasNext()) {
		var rawName1 = rawName.next();
		var groupName = rawName1;
		var groupProps = [];
		if(propertiesReg.match(rawName1)) {
			var str = HxOverrides.substr(propertiesReg.matched(2),1,null);
			groupProps = str.split(".");
			groupName = propertiesReg.matched(1);
		}
		var score = 0;
		if(groupProps.length > 0) {
			var _g1 = 0;
			var _g = groupProps.length;
			while(_g1 < _g) {
				var i = _g1++;
				var key = groupProps[i];
				var prio = __map_reserved[key] != null ? properties.getReserved(key) : properties.h[key];
				if(prio != null) {
					score |= 1 << prio;
				}
			}
			if(score == 0) {
				continue;
			}
		}
		var e = __map_reserved[groupName] != null ? bestVariants.getReserved(groupName) : bestVariants.h[groupName];
		if(e == null) {
			var value = { rawName : rawName1, score : score};
			if(__map_reserved[groupName] != null) {
				bestVariants.setReserved(groupName,value);
			} else {
				bestVariants.h[groupName] = value;
			}
		} else if(score > e.score) {
			e.rawName = rawName1;
			e.score = score;
		}
	}
	var pageMap = new haxe_ds_ObjectMap();
	var pages = [];
	var group = new haxe_ds__$StringMap_StringMapIterator(contents,contents.arrayKeys());
	while(group.hasNext()) {
		var group1 = group.next();
		var _g2 = 0;
		while(_g2 < group1.length) {
			var frame = group1[_g2];
			++_g2;
			var tex = frame.t.innerTex;
			var page = pageMap.h[tex.__id__];
			if(page == null) {
				pageMap.set(tex,pages.length);
				mt_heaps_slib_assets_Atlas.ltick();
				pages.push(h2d_Tile.fromTexture(tex));
				mt_heaps_slib_assets_Atlas.ltick();
			}
		}
	}
	var nrmPages = [];
	var _g11 = 0;
	var _g3 = pages.length;
	while(_g11 < _g3) {
		var i1 = _g11++;
		var name = pages[i1].innerTex.name;
		var nrmName = HxOverrides.substr(name,0,name.length - 4) + "_n.png";
		mt_heaps_slib_assets_Atlas.ltick();
		nrmPages[i1] = hxd_res_Loader.currentInstance.exists(nrmName) ? h2d_Tile.fromTexture(hxd_Res.load(nrmName).toTexture()) : null;
		mt_heaps_slib_assets_Atlas.ltick();
	}
	var lib = new mt_heaps_slib_SpriteLib(pages,nrmPages);
	var frameReg = new EReg("(.*?)(_?)([0-9]+)$","gi");
	var numReg = new EReg("^[0-9]+$","");
	var groupName1 = bestVariants.keys();
	while(groupName1.hasNext()) {
		var groupName2 = groupName1.next();
		var rawName2 = (__map_reserved[groupName2] != null ? bestVariants.getReserved(groupName2) : bestVariants.h[groupName2]).rawName;
		var content = __map_reserved[rawName2] != null ? contents.getReserved(rawName2) : contents.h[rawName2];
		if(content.length == 1) {
			var e1 = content[0];
			var page1 = pageMap.h[e1.t.innerTex.__id__];
			var k = groupName2;
			var f = 0;
			var regBoth = false;
			if(frameReg.match(k)) {
				k = frameReg.matched(1);
				f = Std.parseInt(frameReg.matched(3));
				if(__map_reserved[k] != null ? notZeroBaseds.existsReserved(k) : notZeroBaseds.h.hasOwnProperty(k)) {
					--f;
				}
				if(frameReg.matched(2).length == 0) {
					regBoth = true;
				}
			}
			var fd = lib.sliceCustom(k,page1,f,e1.t.x,e1.t.y,e1.t.width,e1.t.height,-e1.t.dx,-e1.t.dy,e1.width,e1.height);
			if(regBoth) {
				lib.resliceCustom(groupName2,0,fd);
			}
		} else {
			var k1 = groupName2;
			if(k1.indexOf("/") >= 0) {
				k1 = HxOverrides.substr(k1,k1.lastIndexOf("/") + 1,null);
			}
			var _g12 = 0;
			var _g4 = content.length;
			while(_g12 < _g4) {
				var i2 = _g12++;
				var e2 = content[i2];
				var page2 = pageMap.h[e2.t.innerTex.__id__];
				lib.sliceCustom(k1,page2,i2,e2.t.x,e2.t.y,e2.t.width,e2.t.height,-e2.t.dx,-e2.t.dy,e2.width,e2.height);
			}
		}
	}
	mt_heaps_slib_assets_Atlas.ltick();
	var id = lib.groups.keys();
	while(id.hasNext()) {
		var id1 = id.next();
		var tmp;
		var tmp1;
		if(id1 != null) {
			var _this = lib.groups;
			tmp1 = __map_reserved[id1] != null ? _this.existsReserved(id1) : _this.h.hasOwnProperty(id1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this1 = lib.groups;
			tmp = (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]).frames.length > 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			throw new js__$Boot_HaxeError("Unknown group " + id1);
		}
		var nframes;
		if(id1 == null) {
			nframes = lib.currentGroup;
		} else {
			var _this2 = lib.groups;
			nframes = __map_reserved[id1] != null ? _this2.getReserved(id1) : _this2.h[id1];
		}
		var nframes1 = nframes.frames.length;
		var a = mt_heaps_slib_assets_Atlas.CACHE_ANIMS[nframes1];
		if(a == null) {
			var _g5 = [];
			var _g21 = 0;
			var _g13 = nframes1;
			while(_g21 < _g13) {
				var i3 = _g21++;
				_g5.push(i3);
			}
			a = _g5;
			if(nframes1 < 256) {
				mt_heaps_slib_assets_Atlas.CACHE_ANIMS[nframes1] = a;
			}
		}
		lib.__defineAnim(id1,a);
		var p = id1.lastIndexOf("/");
		if(p >= 0) {
			var id2 = HxOverrides.substr(id1,p + 1,null);
			if(id2 != null && id2.length > 0 && !numReg.match(id2)) {
				var _this3 = lib.groups;
				if(__map_reserved[id2] != null ? _this3.existsReserved(id2) : _this3.h.hasOwnProperty(id2)) {
					haxe_Log.trace("Warning, duplicate short name: " + id2 + " in " + atlasName + ":" + id1,{ fileName : "mt/heaps/slib/assets/Atlas.hx", lineNumber : 187, className : "mt.heaps.slib.assets.Atlas", methodName : "convertToSlib"});
				}
				var this1 = lib.groups;
				var _this4 = lib.groups;
				var value1 = __map_reserved[id1] != null ? _this4.getReserved(id1) : _this4.h[id1];
				var _this5 = this1;
				if(__map_reserved[id2] != null) {
					_this5.setReserved(id2,value1);
				} else {
					_this5.h[id2] = value1;
				}
			}
		}
	}
	mt_heaps_slib_assets_Atlas.ltick();
	return lib;
};
var stb_format_tools_Crc32 = function() { };
$hxClasses["stb.format.tools.Crc32"] = stb_format_tools_Crc32;
stb_format_tools_Crc32.__name__ = ["stb","format","tools","Crc32"];
stb_format_tools_Crc32.init = function() {
	if(stb_format_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	stb_format_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		}
		stb_format_tools_Crc32.table[i] = s;
	}
};
var stb_format_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = stb_format_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["stb.format.vorbis.Reader"] = stb_format_vorbis_Reader;
stb_format_vorbis_Reader.__name__ = ["stb","format","vorbis","Reader"];
stb_format_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new stb_format_vorbis_Reader(input,function(pos) {
		stb_format_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
stb_format_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
stb_format_vorbis_Reader.readAll = function(input,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var decoder = stb_format_vorbis_VorbisDecoder.start(input);
	var header = decoder.header;
	var count = 0;
	while(true) {
		var n = decoder.read(output,65536,header.channel,header.sampleRate,useFloat);
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
stb_format_vorbis_Reader.prototype = {
	get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,__class__: stb_format_vorbis_Reader
};
var stb_format_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new stb_format_vorbis_data_Page();
	stb_format_tools_Crc32.init();
};
$hxClasses["stb.format.vorbis.VorbisDecodeState"] = stb_format_vorbis_VorbisDecodeState;
stb_format_vorbis_VorbisDecodeState.__name__ = ["stb","format","vorbis","VorbisDecodeState"];
stb_format_vorbis_VorbisDecodeState.prototype = {
	setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g1 = 0;
		var _g = segmentCount;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new stb_format_vorbis_data_ProbedPage();
			var _g11 = 0;
			var _g2 = segmentCount;
			while(_g11 < _g2) {
				var i3 = _g11++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(stb_format_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof stb_format_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "stb.format.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "stb.format.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof haxe_io_Eof)) {
					var e2 = e1;
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "stb.format.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 307, className : "stb.format.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 310, className : "stb.format.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g[1]) {
		case 0:
			var l = _g[3];
			var e = _g[2];
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 518, className : "stb.format.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g1 = this.findPage(seekFunc,inputLength);
			switch(_g1[1]) {
			case 0:
				var l1 = _g1[3];
				var e1 = _g1[2];
				end = e1;
				last = l1;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g11 = 0;
		var _g2 = 6;
		while(_g11 < _g2) {
			var i = _g11++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 552, className : "stb.format.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new stb_format_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					var _g = 4;
					while(_g < 27) {
						var i = _g++;
						this.inputPosition += 1;
						header[i] = this.input.readByte();
					}
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					var _g1 = 22;
					while(_g1 < 26) {
						var i1 = _g1++;
						header[i1] = 0;
					}
					var crc = 0;
					var _g2 = 0;
					while(_g2 < 27) {
						var i2 = _g2++;
						crc = crc << 8 ^ stb_format_tools_Crc32.table[header[i2] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g11 = 0;
						var _g3 = header[26];
						while(_g11 < _g3) {
							var i3 = _g11++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ stb_format_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g12 = 0;
						var _g4 = len;
						while(_g12 < _g4) {
							var i4 = _g12++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ stb_format_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
						if((e1 instanceof haxe_io_Eof)) {
							var e2 = e1;
							return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return stb_format_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e3 ) {
			var e4 = (e3 instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if((e4 instanceof haxe_io_Eof)) {
				var e5 = e4;
				return stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e3;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new stb_format_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g1 = 0;
		var _g = 27;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g11 = 0;
		var _g2 = n;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g12 = 0;
		var _g3 = pageHeader[26];
		while(_g12 < _g3) {
			var i2 = _g12++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g13 = 0;
		var _g4 = pageHeader[26];
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g14 = 0;
				var _g5 = len1;
				while(_g14 < _g5) {
					var i4 = _g14++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g15 = 0;
				var _g6 = len2;
				while(_g15 < _g6) {
					var i5 = _g15++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g1 = 0;
		var _g = c.entries;
		while(_g1 < _g) {
			var i = _g1++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 846, className : "stb.format.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: stb_format_vorbis_VorbisDecodeState
};
var stb_format_vorbis__$VorbisDecodeState_FindPageResult = $hxClasses["stb.format.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"] };
stb_format_vorbis__$VorbisDecodeState_FindPageResult.Found = function(end,last) { var $x = ["Found",0,end,last]; $x.__enum__ = stb_format_vorbis__$VorbisDecodeState_FindPageResult; $x.toString = $estr; return $x; };
stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound = ["NotFound",1];
stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound.toString = $estr;
stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound.__enum__ = stb_format_vorbis__$VorbisDecodeState_FindPageResult;
stb_format_vorbis__$VorbisDecodeState_FindPageResult.__empty_constructs__ = [stb_format_vorbis__$VorbisDecodeState_FindPageResult.NotFound];
var stb_format_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this2 = new Array(header.channel);
	this.previousWindow = this2;
	var this3 = new Array(header.channel);
	this.finalY = this3;
	var _g1 = 0;
	var _g = header.channel;
	while(_g1 < _g) {
		var i = _g1++;
		var this4 = this.channelBuffers;
		var this5 = new Array(header.blocksize1);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var this7 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["stb.format.vorbis.VorbisDecoder"] = stb_format_vorbis_VorbisDecoder;
stb_format_vorbis_VorbisDecoder.__name__ = ["stb","format","vorbis","VorbisDecoder"];
stb_format_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new stb_format_vorbis_VorbisDecodeState(input);
	var header = stb_format_vorbis_data_Header.read(decodeState);
	var decoder = new stb_format_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
stb_format_vorbis_VorbisDecoder.prototype = {
	read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g1 = this.channelBufferStart;
			var _g = this.channelBufferStart + k;
			while(_g1 < _g) {
				var j = _g1++;
				var _g3 = 0;
				var _g2 = sampleRepeat;
				while(_g3 < _g2) {
					var sr = _g3++;
					var _g5 = 0;
					var _g4 = this.header.channel;
					while(_g5 < _g4) {
						var i = _g5++;
						var _g7 = 0;
						var _g6 = channelRepeat;
						while(_g7 < _g6) {
							var cr = _g7++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output.writeFloat(value);
							} else {
								output.writeInt16(Math.floor(value * 32767));
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g11 = n;
		var _g8 = len;
		while(_g11 < _g8) {
			var j1 = _g11++;
			var _g31 = 0;
			var _g21 = sampleRepeat;
			while(_g31 < _g21) {
				var sr1 = _g31++;
				var _g51 = 0;
				var _g41 = this.header.channel;
				while(_g51 < _g41) {
					var i1 = _g51++;
					var _g71 = 0;
					var _g61 = channelRepeat;
					while(_g71 < _g61) {
						var cr1 = _g71++;
						if(useFloat) {
							output.writeFloat(0);
						} else {
							output.writeInt16(0);
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 182, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 214, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g[1]) {
				case 0:
					break;
				case 1:
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 244, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 250, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 270, className : "stb.format.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g1 = 0;
			var _g = this.header.channel;
			while(_g1 < _g) {
				var i = _g1++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g3 = 0;
				var _g2 = n;
				while(_g3 < _g2) {
					var j = _g3++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g11 = 0;
		var _g4 = this.header.channel;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g31 = 0;
			var _g21 = len - right;
			while(_g31 < _g21) {
				var j1 = _g31++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		stb_format_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		stb_format_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		stb_format_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + -1] - u[eeOffset2 + -1];
			var _g = eeOffset0;
			var _g1 = u;
			_g1[_g] = _g1[_g] + u[eeOffset2];
			var _g2 = eeOffset0 + -1;
			var _g11 = u;
			_g11[_g2] = _g11[_g2] + u[eeOffset2 + -1];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -2] - u[eeOffset2 + -2];
			k01_21 = u[eeOffset0 + -3] - u[eeOffset2 + -3];
			var _g3 = eeOffset0 + -2;
			var _g12 = u;
			_g12[_g3] = _g12[_g3] + u[eeOffset2 + -2];
			var _g4 = eeOffset0 + -3;
			var _g13 = u;
			_g13[_g4] = _g13[_g4] + u[eeOffset2 + -3];
			u[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -4] - u[eeOffset2 + -4];
			k01_21 = u[eeOffset0 + -5] - u[eeOffset2 + -5];
			var _g5 = eeOffset0 + -4;
			var _g14 = u;
			_g14[_g5] = _g14[_g5] + u[eeOffset2 + -4];
			var _g6 = eeOffset0 + -5;
			var _g15 = u;
			_g15[_g6] = _g15[_g6] + u[eeOffset2 + -5];
			u[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -6] - u[eeOffset2 + -6];
			k01_21 = u[eeOffset0 + -7] - u[eeOffset2 + -7];
			var _g7 = eeOffset0 + -6;
			var _g16 = u;
			_g16[_g7] = _g16[_g7] + u[eeOffset2 + -6];
			var _g8 = eeOffset0 + -7;
			var _g17 = u;
			_g17[_g8] = _g17[_g8] + u[eeOffset2 + -7];
			u[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + -1] - u[eeOffset21 + -1];
			var _g9 = eeOffset01;
			var _g18 = u;
			_g18[_g9] = _g18[_g9] + u[eeOffset21];
			var _g10 = eeOffset01 + -1;
			var _g19 = u;
			_g19[_g10] = _g19[_g10] + u[eeOffset21 + -1];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -1] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -2] - u[eeOffset21 + -2];
			k01_211 = u[eeOffset01 + -3] - u[eeOffset21 + -3];
			var _g20 = eeOffset01 + -2;
			var _g110 = u;
			_g110[_g20] = _g110[_g20] + u[eeOffset21 + -2];
			var _g21 = eeOffset01 + -3;
			var _g111 = u;
			_g111[_g21] = _g111[_g21] + u[eeOffset21 + -3];
			u[eeOffset21 + -2] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -3] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -4] - u[eeOffset21 + -4];
			k01_211 = u[eeOffset01 + -5] - u[eeOffset21 + -5];
			var _g22 = eeOffset01 + -4;
			var _g112 = u;
			_g112[_g22] = _g112[_g22] + u[eeOffset21 + -4];
			var _g23 = eeOffset01 + -5;
			var _g113 = u;
			_g113[_g23] = _g113[_g23] + u[eeOffset21 + -5];
			u[eeOffset21 + -4] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -5] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -6] - u[eeOffset21 + -6];
			k01_211 = u[eeOffset01 + -7] - u[eeOffset21 + -7];
			var _g24 = eeOffset01 + -6;
			var _g114 = u;
			_g114[_g24] = _g114[_g24] + u[eeOffset21 + -6];
			var _g25 = eeOffset01 + -7;
			var _g115 = u;
			_g115[_g25] = _g115[_g25] + u[eeOffset21 + -7];
			u[eeOffset21 + -6] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -7] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + -1] - u[eOffset2 + -1];
			var _g26 = eOffset01;
			var _g116 = u;
			_g116[_g26] = _g116[_g26] + u[eOffset2];
			var _g27 = eOffset01 + -1;
			var _g117 = u;
			_g117[_g27] = _g117[_g27] + u[eOffset2 + -1];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -1] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -2] - u[eOffset2 + -2];
			k01_212 = u[eOffset01 + -3] - u[eOffset2 + -3];
			var _g28 = eOffset01 + -2;
			var _g118 = u;
			_g118[_g28] = _g118[_g28] + u[eOffset2 + -2];
			var _g29 = eOffset01 + -3;
			var _g119 = u;
			_g119[_g29] = _g119[_g29] + u[eOffset2 + -3];
			u[eOffset2 + -2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -3] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -4] - u[eOffset2 + -4];
			k01_212 = u[eOffset01 + -5] - u[eOffset2 + -5];
			var _g30 = eOffset01 + -4;
			var _g120 = u;
			_g120[_g30] = _g120[_g30] + u[eOffset2 + -4];
			var _g31 = eOffset01 + -5;
			var _g121 = u;
			_g121[_g31] = _g121[_g31] + u[eOffset2 + -5];
			u[eOffset2 + -4] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -5] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -6] - u[eOffset2 + -6];
			k01_212 = u[eOffset01 + -7] - u[eOffset2 + -7];
			var _g32 = eOffset01 + -6;
			var _g122 = u;
			_g122[_g32] = _g122[_g32] + u[eOffset2 + -6];
			var _g33 = eOffset01 + -7;
			var _g123 = u;
			_g123[_g33] = _g123[_g33] + u[eOffset2 + -7];
			u[eOffset2 + -6] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -7] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + -1] - u[eOffset21 + -1];
			var _g34 = eOffset02;
			var _g124 = u;
			_g124[_g34] = _g124[_g34] + u[eOffset21];
			var _g35 = eOffset02 + -1;
			var _g125 = u;
			_g125[_g35] = _g125[_g35] + u[eOffset21 + -1];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -1] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -2] - u[eOffset21 + -2];
			k01_213 = u[eOffset02 + -3] - u[eOffset21 + -3];
			var _g36 = eOffset02 + -2;
			var _g126 = u;
			_g126[_g36] = _g126[_g36] + u[eOffset21 + -2];
			var _g37 = eOffset02 + -3;
			var _g127 = u;
			_g127[_g37] = _g127[_g37] + u[eOffset21 + -3];
			u[eOffset21 + -2] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -3] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -4] - u[eOffset21 + -4];
			k01_213 = u[eOffset02 + -5] - u[eOffset21 + -5];
			var _g38 = eOffset02 + -4;
			var _g128 = u;
			_g128[_g38] = _g128[_g38] + u[eOffset21 + -4];
			var _g39 = eOffset02 + -5;
			var _g129 = u;
			_g129[_g39] = _g129[_g39] + u[eOffset21 + -5];
			u[eOffset21 + -4] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -5] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -6] - u[eOffset21 + -6];
			k01_213 = u[eOffset02 + -7] - u[eOffset21 + -7];
			var _g40 = eOffset02 + -6;
			var _g130 = u;
			_g130[_g40] = _g130[_g40] + u[eOffset21 + -6];
			var _g41 = eOffset02 + -7;
			var _g131 = u;
			_g131[_g41] = _g131[_g41] + u[eOffset21 + -7];
			u[eOffset21 + -6] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -7] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + -1] - u[eOffset22 + -1];
			var _g42 = eOffset03;
			var _g132 = u;
			_g132[_g42] = _g132[_g42] + u[eOffset22];
			var _g43 = eOffset03 + -1;
			var _g133 = u;
			_g133[_g43] = _g133[_g43] + u[eOffset22 + -1];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -1] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -2] - u[eOffset22 + -2];
			k01_214 = u[eOffset03 + -3] - u[eOffset22 + -3];
			var _g44 = eOffset03 + -2;
			var _g134 = u;
			_g134[_g44] = _g134[_g44] + u[eOffset22 + -2];
			var _g45 = eOffset03 + -3;
			var _g135 = u;
			_g135[_g45] = _g135[_g45] + u[eOffset22 + -3];
			u[eOffset22 + -2] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -3] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -4] - u[eOffset22 + -4];
			k01_214 = u[eOffset03 + -5] - u[eOffset22 + -5];
			var _g46 = eOffset03 + -4;
			var _g136 = u;
			_g136[_g46] = _g136[_g46] + u[eOffset22 + -4];
			var _g47 = eOffset03 + -5;
			var _g137 = u;
			_g137[_g47] = _g137[_g47] + u[eOffset22 + -5];
			u[eOffset22 + -4] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -5] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -6] - u[eOffset22 + -6];
			k01_214 = u[eOffset03 + -7] - u[eOffset22 + -7];
			var _g48 = eOffset03 + -6;
			var _g138 = u;
			_g138[_g48] = _g138[_g48] + u[eOffset22 + -6];
			var _g49 = eOffset03 + -7;
			var _g139 = u;
			_g139[_g49] = _g139[_g49] + u[eOffset22 + -7];
			u[eOffset22 + -6] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -7] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + -1] - u[eOffset23 + -1];
			var _g50 = eOffset04;
			var _g140 = u;
			_g140[_g50] = _g140[_g50] + u[eOffset23];
			var _g51 = eOffset04 + -1;
			var _g141 = u;
			_g141[_g51] = _g141[_g51] + u[eOffset23 + -1];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -1] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -2] - u[eOffset23 + -2];
			k01_215 = u[eOffset04 + -3] - u[eOffset23 + -3];
			var _g52 = eOffset04 + -2;
			var _g142 = u;
			_g142[_g52] = _g142[_g52] + u[eOffset23 + -2];
			var _g53 = eOffset04 + -3;
			var _g143 = u;
			_g143[_g53] = _g143[_g53] + u[eOffset23 + -3];
			u[eOffset23 + -2] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -3] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -4] - u[eOffset23 + -4];
			k01_215 = u[eOffset04 + -5] - u[eOffset23 + -5];
			var _g54 = eOffset04 + -4;
			var _g144 = u;
			_g144[_g54] = _g144[_g54] + u[eOffset23 + -4];
			var _g55 = eOffset04 + -5;
			var _g145 = u;
			_g145[_g55] = _g145[_g55] + u[eOffset23 + -5];
			u[eOffset23 + -4] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -5] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -6] - u[eOffset23 + -6];
			k01_215 = u[eOffset04 + -7] - u[eOffset23 + -7];
			var _g56 = eOffset04 + -6;
			var _g146 = u;
			_g146[_g56] = _g146[_g56] + u[eOffset23 + -6];
			var _g57 = eOffset04 + -7;
			var _g147 = u;
			_g147[_g57] = _g147[_g57] + u[eOffset23 + -7];
			u[eOffset23 + -6] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -7] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g148 = 2;
		var _g58 = ld - 3 >> 1;
		while(_g148 < _g58) {
			var l = _g148++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g310 = 0;
			var _g210 = lim;
			while(_g310 < _g210) {
				var i6 = _g310++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + -1] - u[eOffset24 + -1];
					var _g59 = eOffset05;
					var _g149 = u;
					_g149[_g59] = _g149[_g59] + u[eOffset24];
					var _g60 = eOffset05 + -1;
					var _g150 = u;
					_g150[_g60] = _g150[_g60] + u[eOffset24 + -1];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -1] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -2] - u[eOffset24 + -2];
					k01_216 = u[eOffset05 + -3] - u[eOffset24 + -3];
					var _g61 = eOffset05 + -2;
					var _g151 = u;
					_g151[_g61] = _g151[_g61] + u[eOffset24 + -2];
					var _g62 = eOffset05 + -3;
					var _g152 = u;
					_g152[_g62] = _g152[_g62] + u[eOffset24 + -3];
					u[eOffset24 + -2] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -3] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -4] - u[eOffset24 + -4];
					k01_216 = u[eOffset05 + -5] - u[eOffset24 + -5];
					var _g63 = eOffset05 + -4;
					var _g153 = u;
					_g153[_g63] = _g153[_g63] + u[eOffset24 + -4];
					var _g64 = eOffset05 + -5;
					var _g154 = u;
					_g154[_g64] = _g154[_g64] + u[eOffset24 + -5];
					u[eOffset24 + -4] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -5] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -6] - u[eOffset24 + -6];
					k01_216 = u[eOffset05 + -7] - u[eOffset24 + -7];
					var _g65 = eOffset05 + -6;
					var _g155 = u;
					_g155[_g65] = _g155[_g65] + u[eOffset24 + -6];
					var _g66 = eOffset05 + -7;
					var _g156 = u;
					_g156[_g66] = _g156[_g66] + u[eOffset24 + -7];
					u[eOffset24 + -6] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -7] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g157 = ld - 3 >> 1;
		var _g67 = ld - 6;
		while(_g157 < _g67) {
			var l1 = _g157++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + -1] - u[eeOffset22 + -1];
					u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
					u[eeOffset02 + -1] = u[eeOffset02 + -1] + u[eeOffset22 + -1];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + -1] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + -2] - u[eeOffset22 + -2];
					k111 = u[eeOffset02 + -3] - u[eeOffset22 + -3];
					u[eeOffset02 + -2] = u[eeOffset02 + -2] + u[eeOffset22 + -2];
					u[eeOffset02 + -3] = u[eeOffset02 + -3] + u[eeOffset22 + -3];
					u[eeOffset22 + -2] = k00 * A2 - k111 * A3;
					u[eeOffset22 + -3] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + -4] - u[eeOffset22 + -4];
					k111 = u[eeOffset02 + -5] - u[eeOffset22 + -5];
					u[eeOffset02 + -4] = u[eeOffset02 + -4] + u[eeOffset22 + -4];
					u[eeOffset02 + -5] = u[eeOffset02 + -5] + u[eeOffset22 + -5];
					u[eeOffset22 + -4] = k00 * A4 - k111 * A5;
					u[eeOffset22 + -5] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + -6] - u[eeOffset22 + -6];
					k111 = u[eeOffset02 + -7] - u[eeOffset22 + -7];
					u[eeOffset02 + -6] = u[eeOffset02 + -6] + u[eeOffset22 + -6];
					u[eeOffset02 + -7] = u[eeOffset02 + -7] + u[eeOffset22 + -7];
					u[eeOffset22 + -6] = k00 * A6 - k111 * A7;
					u[eeOffset22 + -7] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + -8];
			u[zOffset + -8] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + -1];
			t1 = u[zOffset + -9];
			u[zOffset + -9] = t0 - t1;
			u[zOffset + -1] = t0 + t1;
			t0 = u[zOffset + -2];
			t1 = u[zOffset + -10];
			var k001 = t0 - t1;
			u[zOffset + -2] = t0 + t1;
			t0 = u[zOffset + -3];
			t1 = u[zOffset + -11];
			var k112 = t0 - t1;
			u[zOffset + -3] = t0 + t1;
			u[zOffset + -10] = (k001 + k112) * A21;
			u[zOffset + -11] = (k112 - k001) * A21;
			t0 = u[zOffset + -4];
			t1 = u[zOffset + -12];
			k001 = t1 - t0;
			u[zOffset + -4] = t0 + t1;
			t0 = u[zOffset + -5];
			t1 = u[zOffset + -13];
			k112 = t0 - t1;
			u[zOffset + -5] = t0 + t1;
			u[zOffset + -12] = k112;
			u[zOffset + -13] = k001;
			t0 = u[zOffset + -6];
			t1 = u[zOffset + -14];
			k001 = t1 - t0;
			u[zOffset + -6] = t0 + t1;
			t0 = u[zOffset + -7];
			t1 = u[zOffset + -15];
			k112 = t0 - t1;
			u[zOffset + -7] = t0 + t1;
			u[zOffset + -14] = (k001 + k112) * A21;
			u[zOffset + -15] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + -4];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + -2];
			t11 = u[zOffset + -6];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + -2] = y0 - y2;
			var k33 = u[zOffset + -3] - u[zOffset + -7];
			u[zOffset + -4] = k002 + k33;
			u[zOffset + -6] = k002 - k33;
			t01 = u[zOffset + -1];
			t11 = u[zOffset + -5];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + -3] + u[zOffset + -7];
			u[zOffset + -1] = y1 + y3;
			u[zOffset + -3] = y1 - y3;
			u[zOffset + -5] = k113 - k22;
			u[zOffset + -7] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + -4];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + -2];
			t12 = u[zOffset1 + -6];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + -2] = y01 - y21;
			var k331 = u[zOffset1 + -3] - u[zOffset1 + -7];
			u[zOffset1 + -4] = k003 + k331;
			u[zOffset1 + -6] = k003 - k331;
			t02 = u[zOffset1 + -1];
			t12 = u[zOffset1 + -5];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + -3] + u[zOffset1 + -7];
			u[zOffset1 + -1] = y11 + y31;
			u[zOffset1 + -3] = y11 - y31;
			u[zOffset1 + -5] = k114 - k221;
			u[zOffset1 + -7] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			var _this = this.decodeState;
			var tmp;
			if(_this.validBits < 0) {
				tmp = 0;
			} else if(_this.validBits < 1) {
				if(_this.validBits == 0) {
					_this.acc = 0;
				}
				while(true) {
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						_this.validBits = -1;
						break;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
						_this.validBits += 8;
					}
					if(!(_this.validBits < 1)) {
						break;
					}
				}
				if(_this.validBits < 0) {
					tmp = 0;
				} else {
					var z = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z;
				}
			} else {
				var z1 = _this.acc & 1;
				_this.acc = _this.acc >>> 1;
				_this.validBits -= 1;
				tmp = z1;
			}
			if(tmp != 0) {
				while(true) {
					var _this1 = this.decodeState;
					var x;
					if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
						x = -1;
					} else {
						_this1.bytesInSeg--;
						_this1.inputPosition += 1;
						x = _this1.input.readByte();
					}
					_this1.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var _this2 = this.decodeState;
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
		var i;
		if(_this2.validBits < 0) {
			i = 0;
		} else if(_this2.validBits < n1) {
			if(n1 > 24) {
				i = _this2.readBits(24) + (_this2.readBits(n1 - 24) << 24);
			} else {
				if(_this2.validBits == 0) {
					_this2.acc = 0;
				}
				while(true) {
					if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
						_this2.validBits = -1;
						break;
					} else {
						_this2.bytesInSeg--;
						_this2.inputPosition += 1;
						_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
						_this2.validBits += 8;
					}
					if(!(_this2.validBits < n1)) {
						break;
					}
				}
				if(_this2.validBits < 0) {
					i = 0;
				} else {
					var z2 = _this2.acc & (1 << n1) - 1;
					_this2.acc = _this2.acc >>> n1;
					_this2.validBits -= n1;
					i = z2;
				}
			}
		} else {
			var z3 = _this2.acc & (1 << n1) - 1;
			_this2.acc = _this2.acc >>> n1;
			_this2.validBits -= n1;
			i = z3;
		}
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 514, className : "stb.format.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n2;
		var prev;
		var next;
		if(m.blockflag) {
			n2 = this.header.blocksize1;
			var _this3 = this.decodeState;
			if(_this3.validBits < 0) {
				prev = 0;
			} else if(_this3.validBits < 1) {
				if(_this3.validBits == 0) {
					_this3.acc = 0;
				}
				while(true) {
					if(_this3.bytesInSeg == 0 && (_this3.lastSeg || _this3.next() == 0)) {
						_this3.validBits = -1;
						break;
					} else {
						_this3.bytesInSeg--;
						_this3.inputPosition += 1;
						_this3.acc = _this3.acc + (_this3.input.readByte() << _this3.validBits);
						_this3.validBits += 8;
					}
					if(!(_this3.validBits < 1)) {
						break;
					}
				}
				if(_this3.validBits < 0) {
					prev = 0;
				} else {
					var z4 = _this3.acc & 1;
					_this3.acc = _this3.acc >>> 1;
					_this3.validBits -= 1;
					prev = z4;
				}
			} else {
				var z5 = _this3.acc & 1;
				_this3.acc = _this3.acc >>> 1;
				_this3.validBits -= 1;
				prev = z5;
			}
			var _this4 = this.decodeState;
			if(_this4.validBits < 0) {
				next = 0;
			} else if(_this4.validBits < 1) {
				if(_this4.validBits == 0) {
					_this4.acc = 0;
				}
				while(true) {
					if(_this4.bytesInSeg == 0 && (_this4.lastSeg || _this4.next() == 0)) {
						_this4.validBits = -1;
						break;
					} else {
						_this4.bytesInSeg--;
						_this4.inputPosition += 1;
						_this4.acc = _this4.acc + (_this4.input.readByte() << _this4.validBits);
						_this4.validBits += 8;
					}
					if(!(_this4.validBits < 1)) {
						break;
					}
				}
				if(_this4.validBits < 0) {
					next = 0;
				} else {
					var z6 = _this4.acc & 1;
					_this4.acc = _this4.acc >>> 1;
					_this4.validBits -= 1;
					next = z6;
				}
			} else {
				var z7 = _this4.acc & 1;
				_this4.acc = _this4.acc >>> 1;
				_this4.validBits -= 1;
				next = z7;
			}
		} else {
			next = 0;
			prev = next;
			n2 = this.header.blocksize0;
		}
		var windowCenter = n2 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n2 - this.header.blocksize0 >> 2, end : n2 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n2 * 3 - this.header.blocksize0 >> 2, end : n2 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n2}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g1 = 0;
		var _g = this.header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/VorbisDecoder.hx", lineNumber : 576, className : "stb.format.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				var _this = this.decodeState;
				var tmp;
				if(_this.validBits < 0) {
					tmp = 0;
				} else if(_this.validBits < 1) {
					if(_this.validBits == 0) {
						_this.acc = 0;
					}
					while(true) {
						if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
							_this.validBits = -1;
							break;
						} else {
							_this.bytesInSeg--;
							_this.inputPosition += 1;
							_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
							_this.validBits += 8;
						}
						if(!(_this.validBits < 1)) {
							break;
						}
					}
					if(_this.validBits < 0) {
						tmp = 0;
					} else {
						var z = _this.acc & 1;
						_this.acc = _this.acc >>> 1;
						_this.validBits -= 1;
						tmp = z;
					}
				} else {
					var z1 = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z1;
				}
				if(tmp != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var _this1 = this.decodeState;
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n1 = (range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1;
					var tmp1;
					if(_this1.validBits < 0) {
						tmp1 = 0;
					} else if(_this1.validBits < n1) {
						if(n1 > 24) {
							tmp1 = _this1.readBits(24) + (_this1.readBits(n1 - 24) << 24);
						} else {
							if(_this1.validBits == 0) {
								_this1.acc = 0;
							}
							while(true) {
								if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
									_this1.validBits = -1;
									break;
								} else {
									_this1.bytesInSeg--;
									_this1.inputPosition += 1;
									_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
									_this1.validBits += 8;
								}
								if(!(_this1.validBits < n1)) {
									break;
								}
							}
							if(_this1.validBits < 0) {
								tmp1 = 0;
							} else {
								var z2 = _this1.acc & (1 << n1) - 1;
								_this1.acc = _this1.acc >>> n1;
								_this1.validBits -= n1;
								tmp1 = z2;
							}
						}
					} else {
						var z3 = _this1.acc & (1 << n1) - 1;
						_this1.acc = _this1.acc >>> n1;
						_this1.validBits -= n1;
						tmp1 = z3;
					}
					fy[0] = tmp1;
					var _this2 = this.decodeState;
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n3 = (range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1;
					var tmp2;
					if(_this2.validBits < 0) {
						tmp2 = 0;
					} else if(_this2.validBits < n3) {
						if(n3 > 24) {
							tmp2 = _this2.readBits(24) + (_this2.readBits(n3 - 24) << 24);
						} else {
							if(_this2.validBits == 0) {
								_this2.acc = 0;
							}
							while(true) {
								if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
									_this2.validBits = -1;
									break;
								} else {
									_this2.bytesInSeg--;
									_this2.inputPosition += 1;
									_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
									_this2.validBits += 8;
								}
								if(!(_this2.validBits < n3)) {
									break;
								}
							}
							if(_this2.validBits < 0) {
								tmp2 = 0;
							} else {
								var z4 = _this2.acc & (1 << n3) - 1;
								_this2.acc = _this2.acc >>> n3;
								_this2.validBits -= n3;
								tmp2 = z4;
							}
						}
					} else {
						var z5 = _this2.acc & (1 << n3) - 1;
						_this2.acc = _this2.acc >>> n3;
						_this2.validBits -= n3;
						tmp2 = z5;
					}
					fy[1] = tmp2;
					var _g3 = 0;
					var _g2 = g.partitions;
					while(_g3 < _g2) {
						var j = _g3++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this3 = this.decodeState;
							if(_this3.validBits < 10) {
								_this3.prepHuffman();
							}
							var i1 = c.fastHuffman[_this3.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this3.acc = _this3.acc >>> l;
								_this3.validBits -= l;
								if(_this3.validBits < 0) {
									_this3.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this3.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g5 = 0;
						var _g4 = cdim;
						while(_g5 < _g4) {
							var k = _g5++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp3 = offset++;
							var tmp4;
							if(book >= 0) {
								var _this4 = this.decodeState;
								var c1 = codebooks[book];
								if(_this4.validBits < 10) {
									_this4.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this4.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this4.acc = _this4.acc >>> l1;
									_this4.validBits -= l1;
									if(_this4.validBits < 0) {
										_this4.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this4.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp4 = val1;
							} else {
								tmp4 = 0;
							}
							fy[tmp3] = tmp4;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g31 = 2;
					var _g21 = g.values;
					while(_g31 < _g21) {
						var j1 = _g31++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g32 = 0;
					var _g22 = g.values;
					while(_g32 < _g22) {
						var j2 = _g32++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g11 = 0;
		var _g6 = this.header.channel;
		while(_g11 < _g6) {
			var i3 = _g11++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g12 = 0;
		var _g7 = map.couplingSteps;
		while(_g12 < _g7) {
			var i4 = _g12++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g13 = 0;
		var _g8 = map.submaps;
		while(_g13 < _g8) {
			var i5 = _g13++;
			var this4 = new Array(this.header.channel);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g33 = 0;
			var _g23 = this.header.channel;
			while(_g33 < _g23) {
				var j3 = _g33++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g14 = 0;
			var _g9 = n21;
			while(_g14 < _g9) {
				var j4 = _g14++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g15 = 0;
		var _g10 = this.header.channel;
		while(_g15 < _g10) {
			var i7 = _g15++;
			if(reallyZeroChannel[i7]) {
				var _g34 = 0;
				var _g24 = n21;
				while(_g34 < _g24) {
					var j5 = _g34++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g16 = 0;
		var _g17 = this.header.channel;
		while(_g16 < _g17) {
			var i8 = _g16++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this5 = this.decodeState;
		while(_this5.bytesInSeg != 0 || !_this5.lastSeg && _this5.next() != 0) {
			_this5.bytesInSeg--;
			_this5.inputPosition += 1;
			_this5.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: stb_format_vorbis_VorbisDecoder
};
var stb_format_vorbis_VorbisTools = function() { };
$hxClasses["stb.format.vorbis.VorbisTools"] = stb_format_vorbis_VorbisTools;
stb_format_vorbis_VorbisTools.__name__ = ["stb","format","vorbis","VorbisTools"];
stb_format_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
stb_format_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
stb_format_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
stb_format_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g1 = 0;
	var _g = n2;
	while(_g1 < _g) {
		var i = _g1++;
		$window[i] = Math.sin(1.5707963267948966 * stb_format_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
stb_format_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
stb_format_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g1 = 0;
	var _g = n8;
	while(_g1 < _g) {
		var i = _g1++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
stb_format_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g1 = 0;
	var _g = n4;
	while(_g1 < _g) {
		var k = _g1++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g11 = 0;
	var _g2 = n8;
	while(_g11 < _g2) {
		var k1 = _g11++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
stb_format_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(stb_format_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		stb_format_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = stb_format_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				stb_format_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -stb_format_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = stb_format_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g12 = x + 1;
	var _g3 = x1;
	while(_g12 < _g3) {
		var i1 = _g12++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g21 = i1;
		var _g31 = output;
		_g31[_g21] = _g31[_g21] * stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
var stb_format_vorbis_data_Codebook = function() {
};
$hxClasses["stb.format.vorbis.data.Codebook"] = stb_format_vorbis_data_Codebook;
stb_format_vorbis_data_Codebook.__name__ = ["stb","format","vorbis","data","Codebook"];
stb_format_vorbis_data_Codebook.read = function(decodeState) {
	var c = new stb_format_vorbis_data_Codebook();
	var tmp;
	var tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp2 = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp2 = z1;
	}
	if(tmp2 == 66) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z3;
		}
		tmp1 = tmp3 != 67;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z4 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp4 = z4;
			}
		} else {
			var z5 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z5;
		}
		tmp = tmp4 != 86;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 40, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	var x;
	if(decodeState.validBits < 0) {
		x = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x = z7;
	}
	var tmp5;
	if(decodeState.validBits < 0) {
		tmp5 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else {
			var z8 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z8;
		}
	} else {
		var z9 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp5 = z9;
	}
	c.dimensions = (tmp5 << 8) + x;
	var x1;
	if(decodeState.validBits < 0) {
		x1 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x1 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x1 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x1 = z11;
	}
	var y;
	if(decodeState.validBits < 0) {
		y = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			y = 0;
		} else {
			var z12 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			y = z12;
		}
	} else {
		var z13 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		y = z13;
	}
	var tmp6;
	if(decodeState.validBits < 0) {
		tmp6 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else {
			var z14 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp6 = z14;
		}
	} else {
		var z15 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp6 = z15;
	}
	c.entries = (tmp6 << 16) + (y << 8) + x1;
	var ordered;
	if(decodeState.validBits < 0) {
		ordered = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			ordered = 0;
		} else {
			var z16 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			ordered = z16;
		}
	} else {
		var z17 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		ordered = z17;
	}
	var tmp7;
	if(ordered != 0) {
		tmp7 = false;
	} else {
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z18 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp8 = z18;
			}
		} else {
			var z19 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp8 = z19;
		}
		tmp7 = tmp8 != 0;
	}
	c.sparse = tmp7;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength;
		if(decodeState.validBits < 0) {
			currentLength = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				currentLength = 0;
			} else {
				var z20 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				currentLength = z20;
			}
		} else {
			var z21 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			currentLength = z21;
		}
		var currentLength1 = currentLength + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0;
			var n1;
			if(decodeState.validBits < 0) {
				n1 = 0;
			} else if(decodeState.validBits < n) {
				if(n > 24) {
					n1 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						n1 = 0;
					} else {
						var z22 = decodeState.acc & (1 << n) - 1;
						decodeState.acc = decodeState.acc >>> n;
						decodeState.validBits -= n;
						n1 = z22;
					}
				}
			} else {
				var z23 = decodeState.acc & (1 << n) - 1;
				decodeState.acc = decodeState.acc >>> n;
				decodeState.validBits -= n;
				n1 = z23;
			}
			if(currentEntry + n1 > c.entries) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 67, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g1 = 0;
			var _g = n1;
			while(_g1 < _g) {
				var i = _g1++;
				lengths[currentEntry + i] = currentLength1;
			}
			currentEntry += n1;
			++currentLength1;
		}
	} else {
		var _g11 = 0;
		var _g2 = c.entries;
		while(_g11 < _g2) {
			var j = _g11++;
			var present;
			if(c.sparse) {
				if(decodeState.validBits < 0) {
					present = 0;
				} else if(decodeState.validBits < 1) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						present = 0;
					} else {
						var z24 = decodeState.acc & 1;
						decodeState.acc = decodeState.acc >>> 1;
						decodeState.validBits -= 1;
						present = z24;
					}
				} else {
					var z25 = decodeState.acc & 1;
					decodeState.acc = decodeState.acc >>> 1;
					decodeState.validBits -= 1;
					present = z25;
				}
			} else {
				present = 1;
			}
			if(present != 0) {
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 5) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 5)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z26 = decodeState.acc & 31;
						decodeState.acc = decodeState.acc >>> 5;
						decodeState.validBits -= 5;
						val = z26;
					}
				} else {
					var z27 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					val = z27;
				}
				lengths[j] = val + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp9;
	if(c.sparse) {
		tmp9 = total;
	} else {
		var sortedCount = 0;
		var _g12 = 0;
		var _g3 = c.entries;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp9 = sortedCount;
	}
	c.sortedEntries = tmp9;
	var values = null;
	if(!c.sparse) {
		var this2 = new Array(c.entries);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var this3 = new Array(c.sortedEntries);
			c.codewordLengths = this3;
			var this4 = new Array(c.entries);
			c.codewords = this4;
			var this5 = new Array(c.entries);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 120, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this6 = new Array(c.sortedEntries);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	var tmp10;
	if(decodeState.validBits < 0) {
		tmp10 = 0;
	} else if(decodeState.validBits < 4) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 4)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp10 = 0;
		} else {
			var z28 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp10 = z28;
		}
	} else {
		var z29 = decodeState.acc & 15;
		decodeState.acc = decodeState.acc >>> 4;
		decodeState.validBits -= 4;
		tmp10 = z29;
	}
	c.lookupType = tmp10;
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 143, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2;
		if(decodeState.validBits < 0) {
			x2 = 0;
		} else if(decodeState.validBits < 32) {
			x2 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z30 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x2 = z30;
		}
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x3;
		if(decodeState.validBits < 0) {
			x3 = 0;
		} else if(decodeState.validBits < 32) {
			x3 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z31 = decodeState.acc & -1;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x3 = z31;
		}
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		var sign1 = x3 & -2147483648;
		var exp1 = (x3 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		var tmp11;
		if(decodeState.validBits < 0) {
			tmp11 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp11 = 0;
			} else {
				var z32 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp11 = z32;
			}
		} else {
			var z33 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp11 = z33;
		}
		c.valueBits = tmp11 + 1;
		var tmp12;
		if(decodeState.validBits < 0) {
			tmp12 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp12 = 0;
			} else {
				var z34 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp12 = z34;
			}
		} else {
			var z35 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp12 = z35;
		}
		c.sequenceP = tmp12 != 0;
		if(c.lookupType == 1) {
			c.lookupValues = stb_format_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this7 = new Array(c.lookupValues);
		var mults = this7;
		var _g13 = 0;
		var _g4 = c.lookupValues;
		while(_g13 < _g4) {
			var j2 = _g13++;
			var n2 = c.valueBits;
			var q;
			if(decodeState.validBits < 0) {
				q = 0;
			} else if(decodeState.validBits < n2) {
				if(n2 > 24) {
					q = decodeState.readBits(24) + (decodeState.readBits(n2 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n2)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						q = 0;
					} else {
						var z36 = decodeState.acc & (1 << n2) - 1;
						decodeState.acc = decodeState.acc >>> n2;
						decodeState.validBits -= n2;
						q = z36;
					}
				}
			} else {
				var z37 = decodeState.acc & (1 << n2) - 1;
				decodeState.acc = decodeState.acc >>> n2;
				decodeState.validBits -= n2;
				q = z37;
			}
			if(q == -1) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 161, className : "stb.format.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var this8 = new Array(c.lookupValues);
		c.multiplicands = this8;
		var _g14 = 0;
		var _g5 = c.lookupValues;
		while(_g14 < _g5) {
			var j3 = _g14++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g15 = 1;
			var _g6 = c.lookupValues;
			while(_g15 < _g6) {
				var j4 = _g15++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
stb_format_vorbis_data_Codebook.prototype = {
	computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		var _g = 0;
		while(_g < 32) {
			var x = _g++;
			available[x] = 0;
		}
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g1 = 0;
			var _g = this.entries;
			while(_g1 < _g) {
				var i = _g1++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g11 = 0;
			var _g2 = this.sortedEntries;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(stb_format_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g12 = 0;
		var _g3 = len1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g1 = 0;
		var _g = 1024;
		while(_g1 < _g) {
			var i = _g1++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g11 = 0;
			var _g4 = len;
			while(_g11 < _g4) {
				var i2 = _g11++;
				var val2 = multiplicands[z + i2] + last1;
				var _g21 = offset + i2;
				var _g31 = output;
				_g31[_g21] = _g31[_g21] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g12 = 0;
			var _g5 = len;
			while(_g12 < _g5) {
				var i3 = _g12++;
				var _g22 = offset + i3;
				var _g32 = output;
				_g32[_g22] = _g32[_g22] + (multiplicands[z + i3] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1 * step;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g11 = 0;
		var _g4 = len;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var val2 = multiplicands[z + i2] + last;
			var _g21 = offset + i2 * step;
			var _g31 = output;
			_g31[_g21] = _g31[_g21] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 488, className : "stb.format.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Codebook.hx", lineNumber : 503, className : "stb.format.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g1 = 0;
					var _g = effective;
					while(_g1 < _g) {
						var i1 = _g1++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						var _g2 = pInter;
						var _g3 = residueBuffers[cInter];
						_g3[_g2] = _g3[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g11 = 0;
					var _g4 = effective;
					while(_g11 < _g4) {
						var i2 = _g11++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						var _g21 = pInter;
						var _g31 = residueBuffers[cInter];
						_g31[_g21] = _g31[_g21] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g12 = 0;
					var _g5 = effective;
					while(_g12 < _g5) {
						var i3 = _g12++;
						var val3 = multiplicands[z + i3] + last;
						var _g22 = pInter;
						var _g32 = residueBuffers[cInter];
						_g32[_g22] = _g32[_g22] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g13 = 0;
					var _g6 = effective;
					while(_g13 < _g6) {
						var i4 = _g13++;
						var val4 = multiplicands[z + i4] + last;
						var _g23 = pInter;
						var _g33 = residueBuffers[cInter];
						_g33[_g23] = _g33[_g23] + val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g1 = 0;
			var _g = step;
			while(_g1 < _g) {
				var k = _g1++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: stb_format_vorbis_data_Codebook
};
var stb_format_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["stb.format.vorbis.data.Comment"] = stb_format_vorbis_data_Comment;
stb_format_vorbis_data_Comment.__name__ = ["stb","format","vorbis","data","Comment"];
stb_format_vorbis_data_Comment.prototype = {
	get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,__class__: stb_format_vorbis_data_Comment
};
var stb_format_vorbis_data_Floor = function() {
};
$hxClasses["stb.format.vorbis.data.Floor"] = stb_format_vorbis_data_Floor;
stb_format_vorbis_data_Floor.__name__ = ["stb","format","vorbis","data","Floor"];
stb_format_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new stb_format_vorbis_data_Floor();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	floor.type = tmp;
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 28, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new stb_format_vorbis_data_Floor0();
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp1 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp1 = z3;
		}
		g.order = tmp1;
		var tmp2;
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp2 = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp2 = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z5;
		}
		g.rate = tmp2;
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z6 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp3 = z6;
			}
		} else {
			var z7 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp3 = z7;
		}
		g.barkMapSize = tmp3;
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 6) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 6)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z8 = decodeState.acc & 63;
				decodeState.acc = decodeState.acc >>> 6;
				decodeState.validBits -= 6;
				tmp4 = z8;
			}
		} else {
			var z9 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			tmp4 = z9;
		}
		g.amplitudeBits = tmp4;
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z10 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp5 = z10;
			}
		} else {
			var z11 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z11;
		}
		g.amplitudeOffset = tmp5;
		var tmp6;
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp6 = 0;
			} else {
				var z12 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp6 = z12;
			}
		} else {
			var z13 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp6 = z13;
		}
		g.numberOfBooks = tmp6 + 1;
		var _g1 = 0;
		var _g = g.numberOfBooks;
		while(_g1 < _g) {
			var j = _g1++;
			var this1 = g.bookList;
			var val;
			if(decodeState.validBits < 0) {
				val = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val = 0;
				} else {
					var z14 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z14;
				}
			} else {
				var z15 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z15;
			}
			this1[j] = val;
		}
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 41, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new stb_format_vorbis_data_Floor1();
		var maxClass = -1;
		var tmp7;
		if(decodeState.validBits < 0) {
			tmp7 = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else {
				var z16 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				tmp7 = z16;
			}
		} else {
			var z17 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			tmp7 = z17;
		}
		g1.partitions = tmp7;
		var this2 = new Array(g1.partitions);
		g1.partitionClassList = this2;
		var _g11 = 0;
		var _g2 = g1.partitions;
		while(_g11 < _g2) {
			var j1 = _g11++;
			var this3 = g1.partitionClassList;
			var val1;
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val1 = 0;
				} else {
					var z18 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					val1 = z18;
				}
			} else {
				var z19 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				val1 = z19;
			}
			this3[j1] = val1;
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this4 = new Array(maxClass + 1);
		g1.classDimensions = this4;
		var this5 = new Array(maxClass + 1);
		g1.classMasterbooks = this5;
		var this6 = new Array(maxClass + 1);
		g1.classSubclasses = this6;
		var this7 = new Array(maxClass + 1);
		g1.subclassBooks = this7;
		var _g12 = 0;
		var _g3 = maxClass + 1;
		while(_g12 < _g3) {
			var j2 = _g12++;
			var this8 = g1.classDimensions;
			var val2;
			if(decodeState.validBits < 0) {
				val2 = 0;
			} else if(decodeState.validBits < 3) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 3)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val2 = 0;
				} else {
					var z20 = decodeState.acc & 7;
					decodeState.acc = decodeState.acc >>> 3;
					decodeState.validBits -= 3;
					val2 = z20;
				}
			} else {
				var z21 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				val2 = z21;
			}
			this8[j2] = val2 + 1;
			var this9 = g1.classSubclasses;
			var val3;
			if(decodeState.validBits < 0) {
				val3 = 0;
			} else if(decodeState.validBits < 2) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 2)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val3 = 0;
				} else {
					var z22 = decodeState.acc & 3;
					decodeState.acc = decodeState.acc >>> 2;
					decodeState.validBits -= 2;
					val3 = z22;
				}
			} else {
				var z23 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				val3 = z23;
			}
			this9[j2] = val3;
			if(g1.classSubclasses[j2] != 0) {
				var this10 = g1.classMasterbooks;
				var val4;
				if(decodeState.validBits < 0) {
					val4 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val4 = 0;
					} else {
						var z24 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val4 = z24;
					}
				} else {
					var z25 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val4 = z25;
				}
				this10[j2] = val4;
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 64, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this11 = g1.subclassBooks;
			var this12 = new Array(kl);
			this11[j2] = this12;
			var _g31 = 0;
			var _g21 = kl;
			while(_g31 < _g21) {
				var k = _g31++;
				var this13 = g1.subclassBooks[j2];
				var val5;
				if(decodeState.validBits < 0) {
					val5 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val5 = 0;
					} else {
						var z26 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val5 = z26;
					}
				} else {
					var z27 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val5 = z27;
				}
				this13[k] = val5 - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Floor.hx", lineNumber : 73, className : "stb.format.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 2) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 2)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z28 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				tmp8 = z28;
			}
		} else {
			var z29 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z29;
		}
		g1.floor1Multiplier = tmp8 + 1;
		var tmp9;
		if(decodeState.validBits < 0) {
			tmp9 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp9 = 0;
			} else {
				var z30 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp9 = z30;
			}
		} else {
			var z31 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp9 = z31;
		}
		g1.rangebits = tmp9;
		var this14 = new Array(250);
		g1.xlist = this14;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g13 = 0;
		var _g4 = g1.partitions;
		while(_g13 < _g4) {
			var j3 = _g13++;
			var c = g1.partitionClassList[j3];
			var _g32 = 0;
			var _g22 = g1.classDimensions[c];
			while(_g32 < _g22) {
				var k1 = _g32++;
				var this15 = g1.xlist;
				var index = g1.values;
				var n = g1.rangebits;
				var val6;
				if(decodeState.validBits < 0) {
					val6 = 0;
				} else if(decodeState.validBits < n) {
					if(n > 24) {
						val6 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
					} else {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < n)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							val6 = 0;
						} else {
							var z32 = decodeState.acc & (1 << n) - 1;
							decodeState.acc = decodeState.acc >>> n;
							decodeState.validBits -= n;
							val6 = z32;
						}
					}
				} else {
					var z33 = decodeState.acc & (1 << n) - 1;
					decodeState.acc = decodeState.acc >>> n;
					decodeState.validBits -= n;
					val6 = z33;
				}
				this15[index] = val6;
				g1.values++;
			}
		}
		var _g14 = 0;
		var _g5 = g1.values;
		while(_g14 < _g5) {
			var j4 = _g14++;
			p.push(new stb_format_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(stb_format_vorbis_VorbisTools.pointCompare);
		var this16 = new Array(g1.values);
		g1.sortedOrder = this16;
		var _g15 = 0;
		var _g6 = g1.values;
		while(_g15 < _g6) {
			var j5 = _g15++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var this17 = new Array(g1.values);
		g1.neighbors = this17;
		var _g16 = 2;
		var _g7 = g1.values;
		while(_g16 < _g7) {
			var j6 = _g16++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g17 = 0;
			var _g8 = j6;
			while(_g17 < _g8) {
				var i = _g17++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this18 = g1.neighbors;
			var this19 = new Array(g1.values);
			this18[j6] = this19;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
stb_format_vorbis_data_Floor.prototype = {
	__class__: stb_format_vorbis_data_Floor
};
var stb_format_vorbis_data_Floor0 = function() {
};
$hxClasses["stb.format.vorbis.data.Floor0"] = stb_format_vorbis_data_Floor0;
stb_format_vorbis_data_Floor0.__name__ = ["stb","format","vorbis","data","Floor0"];
stb_format_vorbis_data_Floor0.prototype = {
	__class__: stb_format_vorbis_data_Floor0
};
var stb_format_vorbis_data_Floor1 = function() {
};
$hxClasses["stb.format.vorbis.data.Floor1"] = stb_format_vorbis_data_Floor1;
stb_format_vorbis_data_Floor1.__name__ = ["stb","format","vorbis","data","Floor1"];
stb_format_vorbis_data_Floor1.prototype = {
	__class__: stb_format_vorbis_data_Floor1
};
var stb_format_vorbis_data_Header = function() {
};
$hxClasses["stb.format.vorbis.data.Header"] = stb_format_vorbis_data_Header;
stb_format_vorbis_data_Header.__name__ = ["stb","format","vorbis","data","Header"];
stb_format_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 46, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 49, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 52, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 57, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var x;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header.b[i] = x & 255;
	}
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 300, className : "stb.format.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 66, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new stb_format_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 73, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 75, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 80, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x1 = decodeState.input.readByte();
	var log0 = x1 & 15;
	var log1 = x1 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 93, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 96, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 99, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x2 = decodeState.input.readByte();
	if((x2 & 1) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 105, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new stb_format_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g1 = 0;
	var _g2 = commentCount;
	while(_g1 < _g2) {
		var i1 = _g1++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x3 = packetInput.readByte();
	if((x3 & 1) == 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 141, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x4 != 5) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 149, className : "stb.format.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g3 = 0;
	while(_g3 < 6) {
		var i2 = _g3++;
		var x5;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x5 = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x5 = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header2.b[i2] = x5 & 255;
	}
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 300, className : "stb.format.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount;
	if(decodeState.validBits < 0) {
		codebookCount = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			codebookCount = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			codebookCount = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		codebookCount = z1;
	}
	var codebookCount1 = codebookCount + 1;
	var this1 = new Array(codebookCount1);
	header1.codebooks = this1;
	var _g11 = 0;
	var _g4 = codebookCount1;
	while(_g11 < _g4) {
		var i3 = _g11++;
		header1.codebooks[i3] = stb_format_vorbis_data_Codebook.read(decodeState);
	}
	var x6;
	if(decodeState.validBits < 0) {
		x6 = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x6 = 0;
		} else {
			var z2 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			x6 = z2;
		}
	} else {
		var z3 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		x6 = z3;
	}
	x2 = x6 + 1;
	var _g12 = 0;
	var _g5 = x2;
	while(_g12 < _g5) {
		var i4 = _g12++;
		var tmp;
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z5;
		}
		if(tmp != 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 165, className : "stb.format.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount;
	if(decodeState.validBits < 0) {
		floorCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			floorCount = 0;
		} else {
			var z6 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			floorCount = z6;
		}
	} else {
		var z7 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		floorCount = z7;
	}
	var floorCount1 = floorCount + 1;
	var this2 = new Array(floorCount1);
	header1.floorConfig = this2;
	var _g13 = 0;
	var _g6 = floorCount1;
	while(_g13 < _g6) {
		var i5 = _g13++;
		header1.floorConfig[i5] = stb_format_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount;
	if(decodeState.validBits < 0) {
		residueCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			residueCount = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			residueCount = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		residueCount = z9;
	}
	var residueCount1 = residueCount + 1;
	var this3 = new Array(residueCount1);
	header1.residueConfig = this3;
	var _g14 = 0;
	var _g7 = residueCount1;
	while(_g14 < _g7) {
		var i6 = _g14++;
		header1.residueConfig[i6] = stb_format_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount;
	if(decodeState.validBits < 0) {
		mappingCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingCount = 0;
		} else {
			var z10 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			mappingCount = z10;
		}
	} else {
		var z11 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		mappingCount = z11;
	}
	var mappingCount1 = mappingCount + 1;
	var this4 = new Array(mappingCount1);
	header1.mapping = this4;
	var _g15 = 0;
	var _g8 = mappingCount1;
	while(_g15 < _g8) {
		var i7 = _g15++;
		var map = stb_format_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i7] = map;
		var _g31 = 0;
		var _g21 = map.submaps;
		while(_g31 < _g21) {
			var j = _g31++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 191, className : "stb.format.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 194, className : "stb.format.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount;
	if(decodeState.validBits < 0) {
		modeCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			modeCount = 0;
		} else {
			var z12 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			modeCount = z12;
		}
	} else {
		var z13 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		modeCount = z13;
	}
	var modeCount1 = modeCount + 1;
	var this5 = new Array(modeCount1);
	header1.modes = this5;
	var _g16 = 0;
	var _g9 = modeCount1;
	while(_g16 < _g9) {
		var i8 = _g16++;
		var mode = stb_format_vorbis_data_Mode.read(decodeState);
		header1.modes[i8] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Header.hx", lineNumber : 205, className : "stb.format.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
stb_format_vorbis_data_Header.prototype = {
	__class__: stb_format_vorbis_data_Header
};
var stb_format_vorbis_data_IntPoint = function() {
};
$hxClasses["stb.format.vorbis.data.IntPoint"] = stb_format_vorbis_data_IntPoint;
stb_format_vorbis_data_IntPoint.__name__ = ["stb","format","vorbis","data","IntPoint"];
stb_format_vorbis_data_IntPoint.prototype = {
	__class__: stb_format_vorbis_data_IntPoint
};
var stb_format_vorbis_data_Mapping = function() {
};
$hxClasses["stb.format.vorbis.data.Mapping"] = stb_format_vorbis_data_Mapping;
stb_format_vorbis_data_Mapping.__name__ = ["stb","format","vorbis","data","Mapping"];
stb_format_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new stb_format_vorbis_data_Mapping();
	var mappingType;
	if(decodeState.validBits < 0) {
		mappingType = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingType = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			mappingType = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		mappingType = z1;
	}
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 22, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g1 = 0;
	var _g = channels;
	while(_g1 < _g) {
		var j = _g1++;
		m.chan[j] = new stb_format_vorbis_data_MappingChannel();
	}
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z2 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z2;
		}
	} else {
		var z3 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z3;
	}
	if(tmp != 0) {
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z4 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp1 = z4;
			}
		} else {
			var z5 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp1 = z5;
		}
		m.submaps = tmp1 + 1;
	} else {
		m.submaps = 1;
	}
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z6 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp2 = z6;
		}
	} else {
		var z7 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp2 = z7;
	}
	if(tmp2 != 0) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z8 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z8;
			}
		} else {
			var z9 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z9;
		}
		m.couplingSteps = tmp3 + 1;
		var _g11 = 0;
		var _g2 = m.couplingSteps;
		while(_g11 < _g2) {
			var k = _g11++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
			var tmp4;
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else if(decodeState.validBits < n1) {
				if(n1 > 24) {
					tmp4 = decodeState.readBits(24) + (decodeState.readBits(n1 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp4 = 0;
					} else {
						var z10 = decodeState.acc & (1 << n1) - 1;
						decodeState.acc = decodeState.acc >>> n1;
						decodeState.validBits -= n1;
						tmp4 = z10;
					}
				}
			} else {
				var z11 = decodeState.acc & (1 << n1) - 1;
				decodeState.acc = decodeState.acc >>> n1;
				decodeState.validBits -= n1;
				tmp4 = z11;
			}
			m.chan[k].magnitude = tmp4;
			var n2 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n3 = n2 < 16384 ? n2 < 16 ? log2_41[n2] : n2 < 512 ? 5 + log2_41[n2 >> 5] : 10 + log2_41[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_41[n2 >> 15] : 20 + log2_41[n2 >> 20] : n2 < 536870912 ? 25 + log2_41[n2 >> 25] : n2 < -2147483648 ? 30 + log2_41[n2 >> 30] : 0;
			var tmp5;
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else if(decodeState.validBits < n3) {
				if(n3 > 24) {
					tmp5 = decodeState.readBits(24) + (decodeState.readBits(n3 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n3)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp5 = 0;
					} else {
						var z12 = decodeState.acc & (1 << n3) - 1;
						decodeState.acc = decodeState.acc >>> n3;
						decodeState.validBits -= n3;
						tmp5 = z12;
					}
				}
			} else {
				var z13 = decodeState.acc & (1 << n3) - 1;
				decodeState.acc = decodeState.acc >>> n3;
				decodeState.validBits -= n3;
				tmp5 = z13;
			}
			m.chan[k].angle = tmp5;
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 46, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 49, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 52, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	var tmp6;
	if(decodeState.validBits < 0) {
		tmp6 = 0;
	} else if(decodeState.validBits < 2) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 2)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else {
			var z14 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp6 = z14;
		}
	} else {
		var z15 = decodeState.acc & 3;
		decodeState.acc = decodeState.acc >>> 2;
		decodeState.validBits -= 2;
		tmp6 = z15;
	}
	if(tmp6 != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 61, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g12 = 0;
		var _g3 = channels;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var tmp7;
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					tmp7 = 0;
				} else {
					var z16 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					tmp7 = z16;
				}
			} else {
				var z17 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp7 = z17;
			}
			m.chan[j1].mux = tmp7;
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 67, className : "stb.format.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g13 = 0;
		var _g4 = channels;
		while(_g13 < _g4) {
			var j2 = _g13++;
			m.chan[j2].mux = 0;
		}
	}
	var this2 = new Array(m.submaps);
	m.submapFloor = this2;
	var this3 = new Array(m.submaps);
	m.submapResidue = this3;
	var _g14 = 0;
	var _g5 = m.submaps;
	while(_g14 < _g5) {
		var j3 = _g14++;
		if(decodeState.validBits >= 0) {
			if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits >= 0) {
					var z18 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
				}
			} else {
				var z19 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
			}
		}
		var this4 = m.submapFloor;
		var val;
		if(decodeState.validBits < 0) {
			val = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val = 0;
			} else {
				var z20 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z20;
			}
		} else {
			var z21 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val = z21;
		}
		this4[j3] = val;
		var this5 = m.submapResidue;
		var val1;
		if(decodeState.validBits < 0) {
			val1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else {
				var z22 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val1 = z22;
			}
		} else {
			var z23 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val1 = z23;
		}
		this5[j3] = val1;
	}
	return m;
};
stb_format_vorbis_data_Mapping.prototype = {
	doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "stb/format/vorbis/data/Mapping.hx", lineNumber : 94, className : "stb.format.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g1 = 1;
			var _g = g.values;
			while(_g1 < _g) {
				var q = _g1++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					stb_format_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g11 = lx;
				var _g2 = n2;
				while(_g11 < _g2) {
					var j1 = _g11++;
					var _g21 = j1;
					var _g3 = target;
					_g3[_g21] = _g3[_g21] * stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: stb_format_vorbis_data_Mapping
};
var stb_format_vorbis_data_MappingChannel = function() {
};
$hxClasses["stb.format.vorbis.data.MappingChannel"] = stb_format_vorbis_data_MappingChannel;
stb_format_vorbis_data_MappingChannel.__name__ = ["stb","format","vorbis","data","MappingChannel"];
stb_format_vorbis_data_MappingChannel.prototype = {
	__class__: stb_format_vorbis_data_MappingChannel
};
var stb_format_vorbis_data_Mode = function() {
};
$hxClasses["stb.format.vorbis.data.Mode"] = stb_format_vorbis_data_Mode;
stb_format_vorbis_data_Mode.__name__ = ["stb","format","vorbis","data","Mode"];
stb_format_vorbis_data_Mode.read = function(decodeState) {
	var m = new stb_format_vorbis_data_Mode();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z1;
	}
	m.blockflag = tmp != 0;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp1 = z3;
	}
	m.windowtype = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp2 = z5;
	}
	m.transformtype = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp3 = z7;
	}
	m.mapping = tmp3;
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mode.hx", lineNumber : 22, className : "stb.format.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Mode.hx", lineNumber : 25, className : "stb.format.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
stb_format_vorbis_data_Mode.prototype = {
	__class__: stb_format_vorbis_data_Mode
};
var stb_format_vorbis_data_Page = function() {
};
$hxClasses["stb.format.vorbis.data.Page"] = stb_format_vorbis_data_Page;
stb_format_vorbis_data_Page.__name__ = ["stb","format","vorbis","data","Page"];
stb_format_vorbis_data_Page.prototype = {
	clone: function() {
		var page = new stb_format_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "stb/format/vorbis/VorbisDecodeState.hx", lineNumber : 323, className : "stb.format.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "stb/format/vorbis/data/Page.hx", lineNumber : 34, className : "stb.format.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: stb_format_vorbis_data_Page
};
var stb_format_vorbis_data_ProbedPage = function() {
};
$hxClasses["stb.format.vorbis.data.ProbedPage"] = stb_format_vorbis_data_ProbedPage;
stb_format_vorbis_data_ProbedPage.__name__ = ["stb","format","vorbis","data","ProbedPage"];
stb_format_vorbis_data_ProbedPage.prototype = {
	__class__: stb_format_vorbis_data_ProbedPage
};
var stb_format_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["stb.format.vorbis.data.ReaderError"] = stb_format_vorbis_data_ReaderError;
stb_format_vorbis_data_ReaderError.__name__ = ["stb","format","vorbis","data","ReaderError"];
stb_format_vorbis_data_ReaderError.prototype = {
	__class__: stb_format_vorbis_data_ReaderError
};
var stb_format_vorbis_data_ReaderErrorType = $hxClasses["stb.format.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"] };
stb_format_vorbis_data_ReaderErrorType.NEED_MORE_DATA = ["NEED_MORE_DATA",0];
stb_format_vorbis_data_ReaderErrorType.NEED_MORE_DATA.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.NEED_MORE_DATA.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INVALID_API_MIXING = ["INVALID_API_MIXING",1];
stb_format_vorbis_data_ReaderErrorType.INVALID_API_MIXING.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INVALID_API_MIXING.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.OUTOFMEM = ["OUTOFMEM",2];
stb_format_vorbis_data_ReaderErrorType.OUTOFMEM.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.OUTOFMEM.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED = ["FEATURE_NOT_SUPPORTED",3];
stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS = ["TOO_MANY_CHANNELS",4];
stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE = ["FILE_OPEN_FAILURE",5];
stb_format_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH = ["SEEK_WITHOUT_LENGTH",6];
stb_format_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.UNEXPECTED_EOF = ["UNEXPECTED_EOF",7];
stb_format_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.SEEK_INVALID = ["SEEK_INVALID",8];
stb_format_vorbis_data_ReaderErrorType.SEEK_INVALID.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.SEEK_INVALID.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP = ["INVALID_SETUP",9];
stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM = ["INVALID_STREAM",10];
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN = ["MISSING_CAPTURE_PATTERN",11];
stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION = ["INVALID_STREAM_STRUCTURE_VERSION",12];
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID = ["CONTINUED_PACKET_FLAG_INVALID",13];
stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER = ["INCORRECT_STREAM_SERIAL_NUMBER",14];
stb_format_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE = ["INVALID_FIRST_PAGE",15];
stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE = ["BAD_PACKET_TYPE",16];
stb_format_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE = ["CANT_FIND_LAST_PAGE",17];
stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED = ["SEEK_FAILED",18];
stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.OTHER = ["OTHER",19];
stb_format_vorbis_data_ReaderErrorType.OTHER.toString = $estr;
stb_format_vorbis_data_ReaderErrorType.OTHER.__enum__ = stb_format_vorbis_data_ReaderErrorType;
stb_format_vorbis_data_ReaderErrorType.__empty_constructs__ = [stb_format_vorbis_data_ReaderErrorType.NEED_MORE_DATA,stb_format_vorbis_data_ReaderErrorType.INVALID_API_MIXING,stb_format_vorbis_data_ReaderErrorType.OUTOFMEM,stb_format_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,stb_format_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,stb_format_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE,stb_format_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH,stb_format_vorbis_data_ReaderErrorType.UNEXPECTED_EOF,stb_format_vorbis_data_ReaderErrorType.SEEK_INVALID,stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM,stb_format_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,stb_format_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,stb_format_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,stb_format_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER,stb_format_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,stb_format_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE,stb_format_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,stb_format_vorbis_data_ReaderErrorType.SEEK_FAILED,stb_format_vorbis_data_ReaderErrorType.OTHER];
var stb_format_vorbis_data_Residue = function() {
};
$hxClasses["stb.format.vorbis.data.Residue"] = stb_format_vorbis_data_Residue;
stb_format_vorbis_data_Residue.__name__ = ["stb","format","vorbis","data","Residue"];
stb_format_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new stb_format_vorbis_data_Residue();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	r.type = tmp;
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Residue.hx", lineNumber : 29, className : "stb.format.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp1 = z3;
	}
	r.begin = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp2 = z5;
	}
	r.end = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp3 = z7;
	}
	r.partSize = tmp3 + 1;
	var classifications;
	if(decodeState.validBits < 0) {
		classifications = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			classifications = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			classifications = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		classifications = z9;
	}
	var classifications1 = r.classifications = classifications + 1;
	var tmp4;
	if(decodeState.validBits < 0) {
		tmp4 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp4 = z11;
	}
	r.classbook = tmp4;
	var _g1 = 0;
	var _g = r.classifications;
	while(_g1 < _g) {
		var j = _g1++;
		var highBits = 0;
		var lowBits;
		if(decodeState.validBits < 0) {
			lowBits = 0;
		} else if(decodeState.validBits < 3) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 3)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				lowBits = 0;
			} else {
				var z12 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				lowBits = z12;
			}
		} else {
			var z13 = decodeState.acc & 7;
			decodeState.acc = decodeState.acc >>> 3;
			decodeState.validBits -= 3;
			lowBits = z13;
		}
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z14 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp5 = z14;
			}
		} else {
			var z15 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp5 = z15;
		}
		if(tmp5 != 0) {
			if(decodeState.validBits < 0) {
				highBits = 0;
			} else if(decodeState.validBits < 5) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 5)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					highBits = 0;
				} else {
					var z16 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					highBits = z16;
				}
			} else {
				var z17 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				highBits = z17;
			}
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this2 = new Array(r.classifications);
	r.residueBooks = this2;
	var _g11 = 0;
	var _g2 = r.classifications;
	while(_g11 < _g2) {
		var j1 = _g11++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				var this5 = r.residueBooks[j1];
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z18 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val = z18;
					}
				} else {
					var z19 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z19;
				}
				this5[k] = val;
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new stb_format_vorbis_data_ReaderError(stb_format_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "stb/format/vorbis/data/Residue.hx", lineNumber : 55, className : "stb.format.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this6 = new Array(el);
	r.classdata = this6;
	var _g12 = 0;
	var _g3 = el;
	while(_g12 < _g3) {
		var j2 = _g12++;
		var temp = j2;
		var k1 = classwords;
		var this7 = r.classdata;
		var this8 = new Array(classwords);
		var cd = this7[j2] = this8;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications1;
			temp = temp / classifications1 | 0;
		}
	}
	return r;
};
stb_format_vorbis_data_Residue.prototype = {
	decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead);
		var partClassdata = this1;
		var _g1 = 0;
		var _g = ch;
		while(_g1 < _g) {
			var i = _g1++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g3 = 0;
				var _g2 = buffer.length;
				while(_g3 < _g2) {
					var j = _g3++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g11 = 0;
			var _g4 = ch;
			while(_g11 < _g4) {
				var j1 = _g11++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g5 = 0;
			while(_g5 < 8) {
				var pass = _g5++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							partClassdata[classSet] = this.classdata[q];
						}
						var _g21 = 0;
						var _g12 = classwords;
						while(_g21 < _g12) {
							var i2 = _g21++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = partClassdata[classSet][i2];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
						++classSet;
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i3 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i3 >= 0) {
								var l1 = c2.codewordLengths[i3];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i3;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							partClassdata[classSet] = this.classdata[q1];
						}
						var _g22 = 0;
						var _g13 = classwords;
						while(_g22 < _g13) {
							var i4 = _g22++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var c3 = partClassdata[classSet][i4];
							var b1 = this.residueBooks[c3][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
						++classSet;
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i5 = c4.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i5 >= 0) {
								var l2 = c4.codewordLengths[i5];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i5;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val2 = c4.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							partClassdata[classSet] = this.classdata[q2];
						}
						var _g23 = 0;
						var _g14 = classwords;
						while(_g23 < _g14) {
							var i6 = _g23++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var c5 = partClassdata[classSet][i6];
							var b2 = this.residueBooks[c5][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
						++classSet;
					}
				}
			}
			return;
		}
		var _g6 = 0;
		while(_g6 < 8) {
			var pass1 = _g6++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g24 = 0;
					var _g15 = ch;
					while(_g24 < _g15) {
						var j2 = _g24++;
						if(!doNotDecode[j2]) {
							var c6 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c6.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i7 >= 0) {
								var l3 = c6.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i7;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c6);
							}
							if(c6.sparse) {
								val3 = c6.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							partClassdata[j2 * partRead + classSet1] = this.classdata[temp];
						}
					}
				}
				var _g25 = 0;
				var _g16 = classwords;
				while(_g25 < _g16) {
					var i8 = _g25++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g41 = 0;
					var _g31 = ch;
					while(_g41 < _g31) {
						var j3 = _g41++;
						if(!doNotDecode[j3]) {
							var c7 = partClassdata[j3 * partRead + classSet1][i8];
							var b3 = this.residueBooks[c7][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
				++classSet1;
			}
		}
	}
	,__class__: stb_format_vorbis_data_Residue
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
haxe_Resource.content = [{ name : "R_sfx_grunt4_wav", data : ""},{ name : "R_sfx_explode0_wav", data : ""},{ name : "R_sfx_grunt0_wav", data : ""},{ name : "R_sfx_old_pew3_wav", data : ""},{ name : "R_levels_png", data : "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"},{ name : "R_sfx_explode2_wav", data : ""},{ name : "R_sfx_grunt3_wav", data : ""},{ name : "R_sfx_pew1_wav", data : ""},{ name : "R_sfx_reload0_wav", data : ""},{ name : "R_sfx_old_pew1_wav", data : ""},{ name : "R_minecraftiaOutline_fnt", data : ""},{ name : "R_sfx_land0_wav", data : "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0wGeAWkBNAH+AMoAlABgACoA9v/A/4z/V/8h/+3+uP6D/k/+Gv7l/bD9AABRAh0C6gG2AXwBPwEDAccAiwCSAMYA+wAuAWIBlwHLAf8BNAJnApsC0AIDAzcDbAOfA9MDCAQ8BG8EpATYBAsFQAV0BagF2wUQBkMGdwarBq8G6wYmB2EHnAfXBxIITQiICMII/gg4CXMJrgnpCSQKXgqZCtQKDgtJC4QLvwv5CzQMbgypDOMMHg20CUwGhwbBBv0GNwdyB60H6AciCF0ImAjTCA0J+gUnBk0GPwYlBgsG8gXZBb8FpgWMBXIFWAU/BSYFDAXzBNoEwASmBI4EdARbBEIEKAQPBPUD3APCA6oDkQN3A14DRAMrAxID+QLfAscCrgKUAnsCYgJJAjACFwL9AeUBywGyAZkBgAFnAU8BNQEcATAC+QfgB8UHrAeTB3kHXwdFBywHEgf4Bt8GxgatBpMGeQZfBkYGLQYTBvkF4AXKBcgFyAXHBccFxgXFBcUFxAXEBcQFxAXDBcMFwgXCBcIFwQXBBcAFwAXABb8FvwW+Bb4FvgW9Bb0FvAW8BbwFuwW7BboFugW6BboFuQW4BbgFuAW3BbcFtgW2BbYFtQUMBjgGNwY3BjYGNgY1BjUGNAY0BjMGMwYzBjIGMgYxBjAGMAYvBi8GLgYuBi4GLQYsBiwGKwYrBisGKwY0BkEGTAZZBmQGcAZ9BogGlAagBqwGuAbEBs8G3AbnBvQG/wYLBxcHIwcuBzsHRgdSB14Hagd2B4EHjQeaB6UHsQe8B8kH1QfgB+wH9wcDCA8IqgU6BUYFUgVfBWsFdwWDBY8FnAWnBbQFwAXLBdcF5AXwBfwFCAYUBiAGLAY4BkQGUAZcBuUG8Qb/BgwHGAclBzIHPwdMB1gHZAdwB3wHhweSB54HqQe1B8EHzAfYB+MH7wf6BwUIEAgcCCgIMwg/CEoIVghhCGwIeAiDCI8ImgilCLEIvAjHCNII3QjpCHkHOAdDB04HWgdmB3EHfAeIB5MHnwerB7YHwgfNB9kH5AfvB/oHBggRCB0IKQgzCD8ISghVCGEIbQh4CIMIjgiaCKUIsQi8CMcI0wjeCOkI9AgACQkJ7wjJCKMIfQhYCDMIDQjnB8IHnAd3B1EHKwcGB+AGugaVBm8GSgYlBv8F2QW0BY4FaQVEBR4F+QTZB7oKkwpuCkcK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YABjAGYAaQBrAG4AcQBzAHIAcQBwAG8AbQBtAGsAawBqAGgAZwBmAGUAZABjAGIAYABgAF4AXgBdAFsAWgBZAFgAVwBWAFUAUwBTAFIAUABQAE4ATgBMAEsASwBJAEgARwBGAEUARQBDAEIAQQBAAD8AZwC3ALYAtACzALIAsQCwAK8ArQCtAKwAqgCpAKcApwClAKUAowCiAKEAnwCfAJ0AnQCbAJoAmQCYAJcAlgCVAJQAkgCRAJAAjwCXAKAAqwC0AL4AyADRANwA5QDvAPkAAgEMARYBIAEqATMBPQFGAU8BWgFjAWwBdgGAAYkBkwGcAaUBrgG4AcEBywHUAd0B5wHwAfkBAwIFAv8BCAIRAhsCJAItAjYCPwJIAlECWgJjAm0CdQJ/AogCkAIvAzkDRQNQA1sDZgNwA3wDhwOSA5wDqAOzA70DyAPTA90D6QP0A/4DCQQUBB4EKQQ0BD4ESARTBF4EZgRkBGIEXwRcBFoEWARVBFIEUAROBEsESARGBEQEQQQ+BDwEOQQ3BDUEMgQvBC0EKgQoBCYEIwQhBB4EGwQZBAYEAQT+A/wD+QP3A/UD8wPwA+0D6wPoA+YD5APhA98D3QPaA9gD1gPTA9ADzwPMA8oDyAPFA8MDwQO+A7wDuQO3A7QDsgOwA64DqwOpA6cDpAOiA58DnQObA5gDlgOUA5EDkAONA4sDiAOGA4QDgQN4A28DZgNdA1MDSwNCAzgDLwMmAx0DFAMLAwID+QLwAucC3gLVAs0CxAK6ArECqQKgAmkCMQIpAiECGQIQAgcC/gH2Ae4B5QHcAdQBzAHDAbsBswGqAaMBmgGSAYkBggF6AXIBaQFhAVgBUAFJAS0BJQEeARcBDwEIAQAB+ADwAOkA4gDaANMAywDEALwAtACtAKYAnwCYAJAAiACBAHoAcwBrAGQAXQBWAE8ARwBGAEkASgBNAE8AUgBUAFYAWABbAF0AXwBiAGMAZQBoAGoAbQBuAHEAcwB1AHgApQCwALEAtAC1ALgAuQC8AL0AwADBAMQAxQDIAMoAywDOAM8A0QDTANUA1wDZANsA3QDfAOEA4wDlAOcA6ADqAOwA7gDwAPIA9AD1APgA+gD8AP0A/wAAAQMBBQEGAQgBCgEMAQ0BDwERARMBFAEWARgBGgEcAR0BHwEgASMBJQEmAScBKQEqASwBLQEuAS8BMAEyATQBNQE3ATcBOAE6ATwBPQE+AUABQQFCAUMBRAFbAXEBcQFzAXQBdAF2AXcBeAF4AXoBewF8AXwBfgF+AYABgQGBAYMBgwGEAYYBhgGHAYgBgwGEAYQBhgGGAYgBiAGJAYoBiwGMAY0BjgGOAZABkQGRAZIBkwGTAZUBlgGWAZcBmAGYAZkBmgGbAZwBnAGdAZ4BnwGgAaEBoQGiAaMBmgGPAYMBeAFsAWABVAFJAT0BMgEmARsBEAEFAfoA7wDjANgAzADCALYAqwChAJUAigB/AHQAagA1ACMAGQAPAAQA+v/v/+b/2//R/8f/vf+z/6n/n/+W/4v/gf93/27/ZP9b/1D/R/89/zT/Kv8g/xf/Dv8E//r+8f7n/t7+1P7M/sP+uf6w/qb+nf6U/ov+gv55/nD+Z/5e/lb+TP5E/jr+Mv4p/iD+GP4P/gb+/f34/fv9/v0C/gX+Cf4N/hD+E/4X/hr+Hf4h/iT+J/4r/i7+Mf41/jj+O/4//kL+Rf5I/kz+T/5S/lX+WP5c/l/+Yv5l/mj+a/5v/nP+ef6f/qL+pP6n/qn+rP6v/rH+s/62/rj+u/6+/sD+w/7G/sj+yv7N/tD+0v7U/tf+2f7c/t7+4P7j/uX+6P7r/u3+8P7y/vT+9v75/vv+/v4A/wL/Bf8H/wn/DP8O/xD/E/8V/xf/G/8i/yj/Lv80/zr/QP9H/03/U/9Z/1//Zf9r/3H/d/99/4L/if+P/5T/mv+g/6b/rP+x/7f/vf/D/8n/zv/U/9r/3//k/+r/8P/1//v/AAAFAAoAEAAVABsAIAAlACsAMAA1ADsAQABFAEoAUABVAFoAXgBkAGkAbgBzAHgAfQCCAIYAjACQAJYAmwCfAKQAqACtALIAtwC8AMAAxQDKAM4A0gDXANsA4ADlAOoA7gDyAPQA7gDpAOMA3QDYANEAzADGAMAAugC1AK8AqQCkAJ8AmACTAI4AiACCAH0AeAByAG0AfQB2AHAAaQBjAF0AVgBQAEoARAA+ADcAMQAsACUAHwAZABMADQAHAAEA+//2/+//6v/k/97/2P/S/8z/x//C/7z/tv+w/6v/pv+h/5v/lf+Q/4v/hv+B/3v/dv9w/2v/Zv9h/1z/V/9S/03/SP9D/z7/Of80/zD/K/8m/yH/HP8X/xf/Gv8c/x//If8k/yf/Kf8s/y7/MP8z/zb/OP87/z3/QP9C/0T/R/9J/0z/Tv9Q/1L/VP9X/1n/XP9e/2D/Yv9l/2f/av9r/27/cP9y/3X/dv95/3v/ff9//4H/g/+G/4f/iv+L/43/kP+S/5P/lf+Y/5r/nP+d/6D/ov+j/6b/p/+q/6v/rf+v/7H/s/+0/7f/uf+6/7z/vf/A/8H/w//F/8f/yP/K/8z/zv/P/9H/0//U/9X/1P/T/9L/0v/R/9D/0f/Q/8//z//P/87/zf/N/8z/y//L/8r/yf/I/8j/x//H/8b/xv/F/8T/w//D/8L/wf/B/8D/wP/A/7//vv++/73/vf+8/7z/vP+7/7r/uv+5/7n/uf+4/7f/t/+2/7b/tv+2/7X/tf+0/7T/tP+z/7P/s/+y/7L/sf+x/7D/sP+w/7D/r/+v/6//rv+u/63/rv+u/63/rf+s/6z/rP+s/6z/q/+r/6z/rf+v/7L/tP+1/7f/uf+6/73/vv/A/8H/xP/F/8f/yf/L/8z/zv/Q/9L/0//U/9b/2P/Z/9v/3f/e/9//4f/i/+T/5v/n/+j/6f/r/+z/7v/v//H/8v/z//T/9f/3//j/+f/7//v//P/+////AAABAAIABAAEAAYABgAIAAkACQALAAwADAANAA8ADwAQABEAEQATABMAFAAWABYAFwAYABkAGQAaABsAGwAcAB0AHQAeAB8AHwAfAB8AHwAeAB8AHwAeAB4AHgAeAB0AHQAdAB0AHQAcAB0AHQAcABsAHAAbABsAGwAbABsAGwAaABoAGgAaABkAGQAZABkAGAAYABgAGAAYABcAFwAWABcAFgAWABUAFgAWABUAFQAUABQAFAAUABMAEwASABMAEwASABEAEQARABEAEQAQABAAEAAPAA8ADgAOAA0ADgANAA0ADQAMAAwACwALAAsACgAKAAoACgAJAAgACAAHAAcABgAGAAYABQAFAAQABAAEAAQAAwADAAIAAg},{ name : "R_sfx_cover0_wav", data : "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},{ name : "R_sfx_grunt1_wav", data : ""},{ name : "R_sfx_pew0_wav", data : ""},{ name : "R_sfx_old_pew2_wav", data : ""},{ name : "R_gameElements_png", data : ""},{ name : "R_minecraftiaOutline_png", data : "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"},{ name : "R_sfx_grunt2_wav", data : ""},{ name : "R_sfx_explode1_wav", data : "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o8NJsOicfr6i34XrJPctCzYf2irbN0o1PhyaIVYnEC3KMoM4PD4CSP9//3//f/9//3/Zf/9//3//f/9/MGv/f/9//3//f/9//3//f/9//38YXSrT+dhEzs3SWNfj23Dg/eSL6X8N9hFtFkwXYBAsFHkJxP4L85Hcmqprn9yWNpontCzNp79JnSyOd4wZwA/P4/Oo/uEJDxUxIEkrpODUvZXQoveq+rP9uwDDA8oG2E2acl5XMXQEcYBej1J3XBpox2uiZHJdRG62c/Nw/38KecRxg2pDY2VgJmUvQN888EEER2MvxRcvHdgk6SwiNBg6AkIYSVJGqUD+Oin/d+5h5ZveuOWA28/V2eom+efJArtGx7M6Qi1YLFNnEHPMfv9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f019cn7/f/9//3//f4J3GFMFSfQ+vhr1jeuDAIAAgACAAIB3hzSQlaQYxOLLZg/mUq9adWI/aw102XurfV100mpYUYhLJP9F9nkZ4Rl1EToWIisVPq44ACxTH+YSKA4HGnIz/DeVPGRGEE7mVdldKF8cPy5SkmiyatJs824ScTFzTnX2TvclTRJP/ToZUCkeM9U1Oiz6IlMytTXILNwj9xqV+zeCAIAAgACAI8id0QLbLuT27YP36/8YRP9/33ClO3RFFU/BTmpIEUK2O1k1ByxNTDV7q2zIX6du/3//f/9/PXYVYXNTlkONWGxqKnPne/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/U2syWgFdt2NgawhzsHr/f/9//3//f7lewXf/f/9//3//f/9//3//f/9//3//f1F6a2LwVP1q/3//f/9/83V7S1w2SB+bSCBZHXSMev9//3//f/9//3//f/9//3//f/9/cy9lMKstzx82IwYkaBdtCeIDEQ98GoxH/3//f/9//3//f/9/rXt+dk9xa21HX7ZJ0cdNzbrSJtiP3ffiX+hX9hkNuRJnGDIlgjjiMm4p/R9JG/cZeBFyAmLzReQP1rfwmiVLM+AhNQIF7vPZ48Um5kL5if/RBfApCGaraTFxumx5TfFNaU/fUFdS0FNvNvQkRx/PI9gn4hoeCgkARAtYGaspbSUPIboqbEIGPqE5OzXVMPM1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Tv9O/07/Tv9O/07/Tv9O/0//Tv9P/0//T/9P/1D/T/9Q/1D/UP9Q/1D/UP9Q/1H/Uf9R/1H/Uf9S/zf/A/8D/wT/A/8D/wT/BP8F/wT/Bf8F/wT/Bf8F/wX/BP8F/wT/Bf8E/wX/BP8F/wT/BP8F/wX/BP8E/wT/BP8E/wT/BP8E/wT/A/9p/zQANQA1ADUANQA1ADQANQA1ADQANAA1ADQANAA0ADQANAA0ADQANAA0ADQANAAzADQAMwA0ADMAMwA0ADMAMwAzADMANAAzADMABgDY/9j/2P/Y/9j/2P/Y/9j/2P/Y/9n/2P/Y/9j/2P/Z/9j/2P/Z/9j/2P/Z/9j/2f/Y/9n/2P/Z/9j/2f/Y/9n/2P/Z/9j/2P/Z/3H+cf5x/nH+cP5x/nH+cP5x/nD+cf5w/nH+cP5w/nH+cP5w/nH+cf5w/nH+cf5y/nL+c/5y/nP+dP50/nT+dP51/nX+dv52/nf+Bf+T/5L/k/+T/5P/k/+T/5P/k/+U/5P/k/+U/5T/lP+U/5P/lP+U/5T/lP+V/5T/lP+U/5T/lP+V/5T/lP+V/5T/lP+V/5T/lf+U/6oAqQCqAKoAqQCqAKkAqgCpAKkAqQCpAKkAqQCpAKgAqACoAKcAqACnAKgAqACnAKcApwCmAKcApgCmAKYApQCmAKUApgCmAKUAiQCDAIMAgwCDAIMAhACDAIMAgwCEAIMAgwCEAIMAgwCEAIMAgwCEAIMAhACDAIQAgwCEAIMAhACDAIQAgwCEAIMAhACDAIMAgwCH/1T/VP9U/1X/Vf9V/1X/Vv9V/1X/Vv9W/1b/V/9W/1f/V/9X/1f/V/9X/1j/V/9X/1j/WP9Y/1j/WP9Y/1j/WP9Y/1j/WP9Z/6X/tf+0/7X/tf+0/7X/tf+0/7X/tf+1/7X/tf+1/7X/tf+1/7X/tf+1/7X/tf+1/7X/tf+2/7X/tv+1/7X/tv+2/7b/tv+2/7b/7f/t/+3/7P/t/+3/7f/t/+z/7f/t/+3/7f/t/+3/7f/t/+3/7f/t/+3/7f/t/+3/7f/t/+7/7f/t/+3/7f/t/+3/7f/u/+3/zf+N/43/jf+N/43/jv+O/47/jv+O/47/j/+O/47/jv+P/47/j/+O/47/j/+O/4//jv+P/4//jv+P/4//jv+P/4//j/+P/4//jv/uADQBNQE0ATQBNAE0ATMBNAE0ATMBMwEyATIBMgEyATEBMQExATEBMQExATABMAEwATABMAEwAS8BLwEvAS4BLgEuAS4BLgFKAIX+hv6F/ob+hv6F/ob+hv6G/ob+hv6G/ob+hv6H/ob+h/6G/of+hv6G/of+h/6H/of+h/6H/oj+h/6H/oj+iP6I/oj+iP6J/jABMAEwATABMAEwAS8BLwEvAS8BLgEuAS4BLgEuAS0BLgEuAS0BLQEtASwBLQEtASwBLAEsASsBKwErASsBKwEqASsBKgEqAQsBBAEEAQQBBAEEAQMBAwEDAQMBAwECAQMBAgECAQIBAgECAQEBAgEBAQEBAAEBAQABAAEAAQAB/wD/AP8A/wD+AP4A/gD9AE8ALQAsAC0ALQAtAC0ALAAtAC0ALAAtACwALQAsAC0ALAAsACwALQAsACwALAAsACwALAAsACsALAAsACwAKwAsACsALAArAIUAhQCFAIUAhACEAIQAhACEAIQAgwCEAIMAgwCEAIMAgwCDAIMAgwCDAIMAgwCDAIMAgwCCAIMAggCDAIMAggCCAIIAggCZAA8BDgEOAQ4BDgENAQ4BDgENAQ4BDgEOAQ0BDgENAQ4BDQENAQ0BDQENAQ4BDgENAQ0BDQENAQ0BDQEMAQ0BDQEMAQ0BDAEPARIBEQERAREBEQERARABEAEPAQ8BDwEOAQ8BDgEOAQ0BDQENAQwBDAEMAQwBCwELAQsBCgELAQoBCgEJAQkBCQEJAQkBCAHK/sv+yv7K/sv+y/7L/sz+zP7M/sz+zP7N/s3+zv7O/s7+zv7P/s7+zv7P/s/+0P7Q/tD+0f7Q/tH+0f7R/tH+0f7R/tH+LP+G/4f/hv+G/4f/hv+H/4f/h/+G/4b/h/+H/4f/h/+H/4f/h/+H/4f/h/+H/4f/iP+H/4j/iP+I/4j/iP+I/4n/if+I/5j/4P/g/+H/4f/g/+H/4f/g/+H/4f/h/+H/4P/h/+H/4f/h/+H/4f/h/+H/4f/i/+H/4f/h/+L/4f/h/+L/4f/h/+L/4f/i//H+8f7y/vL+8v7y/vP+8/7z/vP+8/7z/vT+8/70/vT+9P71/vT+9f71/vX+9f72/vb+9v72/vb+9/73/vj+9/74/vj++P7M//b/9//3//f/9//3//f/9v/3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/j/96/3r/ev97/3r/ev96/3v/e/96/3v/e/97/3z/e/98/3z/fP98/33/fP99/3z/ff99/33/ff99/33/ff9+/37/fv9+/04ATQBOAE4ATQBOAE4ATQBNAE4ATQBNAE0ATQBNAE0ATQBNAEwATQBNAEwATQBMAE0ATABNAEwATABNAE0ATABMAEwAXwC+AL0AvgC9AL0AvQC8AL0AvQC8ALwAuwC7ALsAugC7ALsAugC6ALkAuQC5ALkAuAC4ALgAuAC3ALcAtwC3ALcAtwC2AJ8AlACUAJMAlACTAJQAkwCTAJQAkwCTAJMAkwCTAJMAkwCTAJMAkwCTAJMAkgCTAJMAkgCTAJIAkwCSAJMAkwCSAJIAkgBuAG0AbgBtAG0AbQBtAG0AbQBtAG0AbABtAG0AbABsAGsAbABsAGsAawBsAGwAawBqAGsAawBqAGsAagBqAGoAagBqAFcARABDAEMAQwBDAEMAQwBDAEMAQwBDAEIAQwBCAEMAQgBCAEIAQwBCAEIAQgBBAEIAQgBCAEEAQgBCAEIAQQBCAEEASwB9AH0AfAB9AHwAfQB8AHwAfAB8AHwAewB8AHwAfAB7AHsAewB7AHsAewB7AHoAewB6AHsAewB6AHoAegB6AHkAegB6AOD/3//f/+D/3//g/9//4P/f/9//4P/f/+D/4P/g/9//4P/g/+D/4P/f/+D/4P/g/+D/4P/g/+H/4P/g/+D/4P/h/+D/Tf8x/zD/Mf8x/zH/Mf8x/zH/Mv8y/zL/Mv8y/zP/M/8z/zP/M/80/zT/NP80/zX/NP81/zX/Nf81/zb/Nf82/zb/Nv9X/17/Xv9e/17/Xv9e/1//Xv9f/1//Xv9f/1//X/9f/1//YP9f/1//YP9g/2H/YP9g/2H/Yf9g/2D/Yf9i/2H/Yf9i/z4AaQBpAGkAaQBpAGgAaQBoAGgAaQBoAGgAaABoAGgAaABnAGgAaABnAGgAZwBnAGgAZwBnAGcAZwBnAGYAZwBnAGYAMQAxADEAMAAxADEAMAAxADAAMQAwADEAMQAwADAAMAAwADAAMAAvADAAMAAvADAALwAwAC8ALwAvAC8ALwAvAC8AJgD9//z//f/9//3//f/9//3//f/9//3//f/8//3//f/9//3//f/9//3//f/9//3//f/9//3//f/8//3//f/9//3//f/Y/7T/tP+0/7X/tP+0/7X/tP+1/7X/tP+1/7X/tf+1/7X/tf+1/7X/tf+1/7X/tf+2/7b/tf+2/7b/tv+2/7b/tv+2/0sAaQBoAGgAaQBpAGkAaABoAGgAaABoAGgAaABnAGcAZwBnAGcAZwBnAGcAZgBnAGYAZgBnAGYAZgBmAGYAZgBmADAAxf/G/8X/xv/G/8b/xv/G/8b/xv/G/8f/xv/H/8f/xv/H/8f/x//H/8f/yP/H/8j/x//I/8f/x//I/8j/yP/I/8n/pgCmAKYApgClAKUApQCkAKUApACkAKQApACkAKQAowCjAKMAowCjAKMAogCiAKIAogChAKIAoQChAKEAoAChAKAAJQDo/+f/5//n/+f/6P/n/+f/6P/n/+j/5//o/+f/6P/o/+f/6P/o/+j/5//o/+j/6P/o/+j/6P/o/+j/6P/o/+n/vP9l/2T/ZP9l/2X/Zf9l/2X/Zv9m/2b/Zv9m/2f/Zv9n/2f/Z/9n/2j/Z/9o/2f/Z/9o/2n/aP9o/2j/aP9p/2n/mP99AHwAfQB9AHwAfAB7AHwAfAB8AHsAewB7AHoAegB6AHoAeQB6AHoAeQB5AHgAeAB4AHgAeAB3AHgAdwB3AHcAZgAXABcAFwAXABcAFwAXABcAFwAWABcAFwAWABcAFwAXABcAFgAWABcAFgAXABYAFgAWABcAFgAWABYAFgAXABcAGwA0ADQANAAzADQAMwA0ADMANAAzADMAMwAzADQANAAzADMAMwAzADMAMgAzADIAMwAyADMAMgAyADIAMgAyADIAJQDn/+b/5//n/+b/5//n/+f/5//m/+b/5//n/+f/5//n/+f/5//n/+f/6P/n/+f/6P/n/+j/5//o/+f/6P/o/+f/xf+A/4H/gf+B/4H/gf+C/4L/gv+C/4L/g/+D/4P/g/+D/4T/hP+E/4T/hP+F/4X/hf+F/4b/hv+G/4b/hv+G/4f/FwBfAF8AXwBeAF8AXwBeAF4AXQBeAF0AXgBdAF0AXQBdAF0AXABdAFwAXABbAFwAWwBcAFwAWwBbAFsAWwBaAFoA7v/t/+7/7v/u/+7/7v/v/+7/7v/u/+7/7//u/+7/7//u/+//7v/v/+7/7//u/+//7//u/+//7//v/+7/7//v//X/AwACAAMAAgADAAIAAwADAAIAAwACAAMAAgADAAIAAwACAAMAAgADAAIAAwACAAMAAgADAAIAAgADAAIAAwACAMj/vf+8/7z/vf+9/73/vf++/73/vv+9/77/vv++/77/vv++/7//vv+//7//v/+//7//v/+//8D/wP/A/8D/wP+8/7P/s/+z/7T/tP+0/7T/tf+0/7X/tf+2/7X/tv+2/7b/tv+2/7f/tv+3/7f/t/+3/7f/t/+4/7f/uP+4/7j/uP/y//P/8v/z//L/8//z//L/8//z//P/8v/z//P/8//z//P/8//y//L/8//z//P/8//z//P/8//0//P/8//z//T/xP+t/63/rf+t/67/rv+u/6//rv+v/6//r/+w/6//sP+w/7D/sf+w/7D/sP+x/7H/sf+x/7L/sv+z/7P/s/+0//D/LQAtACwALAAsACwALAAsACsALAArACsAKwArACsAKwAqACoAKwAqACoAKgAqACkAKgAqACoAKQAqACoAKQAcAAAAAQAAAAEAAAABAAEAAAABAAAAAQAAAAEAAAABAAAAAQABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAACgA9AD0APAA9ADwAPAA8ADwAPAA7ADwAPAA8ADsAOwA6ADoAOwA7ADoAOgA5ADoAOgA5ADgAOQA5ADkAOAA4ADUAIwAjACMAIgAjACMAIgAiACMAIgAiACIAIgAhACIAIgAiACEAIQAhACEAIQAhACAAIQAgACAAIQAhACAAIAAfABoAGgAZABkAGAAZABkAGAAZABgAGQAZABgAGAAYABgAGAAYABcAGAAXABgAGAAXABcAFwAXABcAFwAWABcAGAAhACAAIAAgACAAHwAfAB8AHwAfAB8AHgAeAB8AHgAeAB4AHgAeAB0AHQAeAB4AHQAdAB0AHAAdAB0AHAAcAB0AHgAeAB0AHQAdAB0AHQAcAB0AHQAcABwAHAAbABwAGwAbABsAGwAbABsAGgAaABsAGwAaABoAGgAZABkAGQANAAYABQAGAAYABQAGAAUABgAFAAUABgAFAAUABQAGAAUABQAFAAUABQAFAAUABQAFAAUABQAEAAUABQAFAAQADwAPAA8ADwAPAA4ADwAOAA4ADgAOAA4ADgANAA4ADQAOAA0ADQANAA0ADQANAA0ADQANAA0ADAAMAAwADAAMAAkACgAKAAkACQAJAAkACAAJAAkACAAJAAgACQAJAAgACAAIAAgACAAHAAgACAAHAAcACAAHAAcABwAHAAcACwAOAA0ADQANAA0ADQAMAA0ADQAMAAwADAALAAwADAAMAAsACwAKAAoACwAKAAoACgAJAAkACgAJAAkACQAJAAcABwAGAAcABgAHAAYABgAGAAYABQAGAAUABQAFAAUABQAFAAUABAAFAAQABAAEAAQABAAEAAMAAwADAAMAAwACAAMAAgACAAIAAgACAAIAAgABAAEAAQABAAEAAQABAAAAAAAAAA"},{ name : "R_sfx_gun0_wav", data : ""},{ name : "R_sfx_reload2_wav", data : ""},{ name : "R_sfx_explode3_wav", data : ""},{ name : "R_gameElements_atlas", data : ""},{ name : "R_sfx_reload1_wav", data : ""},{ name : "R_sfx_death0_wav", data : ""},{ name : "R_sfx_pew2_wav", data : ""},{ name : "R_sfx_gun1_wav", data : ""},{ name : "R_sfx_gun2_wav", data : ""}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Area.ALL = [];
mt_deepnight_Sfx.GLOBAL_GROUPS = new haxe_ds_IntMap();
Assets.SBANK = (function($this) {
	var $r;
	var cover0 = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new mt_deepnight_Sfx(hxd_Res.load("sfx/cover0.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/cover0.wav").toSound());
		}
	};
	var death0 = function(quickPlayVolume1) {
		if(quickPlayVolume1 != null) {
			var s1 = new mt_deepnight_Sfx(hxd_Res.load("sfx/death0.wav").toSound());
			return s1.play(null,quickPlayVolume1);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/death0.wav").toSound());
		}
	};
	var explode0 = function(quickPlayVolume2) {
		if(quickPlayVolume2 != null) {
			var s2 = new mt_deepnight_Sfx(hxd_Res.load("sfx/explode0.wav").toSound());
			return s2.play(null,quickPlayVolume2);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/explode0.wav").toSound());
		}
	};
	var explode1 = function(quickPlayVolume3) {
		if(quickPlayVolume3 != null) {
			var s3 = new mt_deepnight_Sfx(hxd_Res.load("sfx/explode1.wav").toSound());
			return s3.play(null,quickPlayVolume3);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/explode1.wav").toSound());
		}
	};
	var explode2 = function(quickPlayVolume4) {
		if(quickPlayVolume4 != null) {
			var s4 = new mt_deepnight_Sfx(hxd_Res.load("sfx/explode2.wav").toSound());
			return s4.play(null,quickPlayVolume4);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/explode2.wav").toSound());
		}
	};
	var explode3 = function(quickPlayVolume5) {
		if(quickPlayVolume5 != null) {
			var s5 = new mt_deepnight_Sfx(hxd_Res.load("sfx/explode3.wav").toSound());
			return s5.play(null,quickPlayVolume5);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/explode3.wav").toSound());
		}
	};
	var grunt0 = function(quickPlayVolume6) {
		if(quickPlayVolume6 != null) {
			var s6 = new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt0.wav").toSound());
			return s6.play(null,quickPlayVolume6);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt0.wav").toSound());
		}
	};
	var grunt1 = function(quickPlayVolume7) {
		if(quickPlayVolume7 != null) {
			var s7 = new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt1.wav").toSound());
			return s7.play(null,quickPlayVolume7);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt1.wav").toSound());
		}
	};
	var grunt2 = function(quickPlayVolume8) {
		if(quickPlayVolume8 != null) {
			var s8 = new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt2.wav").toSound());
			return s8.play(null,quickPlayVolume8);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt2.wav").toSound());
		}
	};
	var grunt3 = function(quickPlayVolume9) {
		if(quickPlayVolume9 != null) {
			var s9 = new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt3.wav").toSound());
			return s9.play(null,quickPlayVolume9);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt3.wav").toSound());
		}
	};
	var grunt4 = function(quickPlayVolume10) {
		if(quickPlayVolume10 != null) {
			var s10 = new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt4.wav").toSound());
			return s10.play(null,quickPlayVolume10);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/grunt4.wav").toSound());
		}
	};
	var gun0 = function(quickPlayVolume11) {
		if(quickPlayVolume11 != null) {
			var s11 = new mt_deepnight_Sfx(hxd_Res.load("sfx/gun0.wav").toSound());
			return s11.play(null,quickPlayVolume11);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/gun0.wav").toSound());
		}
	};
	var gun1 = function(quickPlayVolume12) {
		if(quickPlayVolume12 != null) {
			var s12 = new mt_deepnight_Sfx(hxd_Res.load("sfx/gun1.wav").toSound());
			return s12.play(null,quickPlayVolume12);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/gun1.wav").toSound());
		}
	};
	var gun2 = function(quickPlayVolume13) {
		if(quickPlayVolume13 != null) {
			var s13 = new mt_deepnight_Sfx(hxd_Res.load("sfx/gun2.wav").toSound());
			return s13.play(null,quickPlayVolume13);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/gun2.wav").toSound());
		}
	};
	var land0 = function(quickPlayVolume14) {
		if(quickPlayVolume14 != null) {
			var s14 = new mt_deepnight_Sfx(hxd_Res.load("sfx/land0.wav").toSound());
			return s14.play(null,quickPlayVolume14);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/land0.wav").toSound());
		}
	};
	var music = function(quickPlayVolume15) {
		if(quickPlayVolume15 != null) {
			var s15 = new mt_deepnight_Sfx(hxd_Res.load("sfx/music.ogg").toSound());
			return s15.play(null,quickPlayVolume15);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/music.ogg").toSound());
		}
	};
	var pew0 = function(quickPlayVolume16) {
		if(quickPlayVolume16 != null) {
			var s16 = new mt_deepnight_Sfx(hxd_Res.load("sfx/pew0.wav").toSound());
			return s16.play(null,quickPlayVolume16);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/pew0.wav").toSound());
		}
	};
	var pew1 = function(quickPlayVolume17) {
		if(quickPlayVolume17 != null) {
			var s17 = new mt_deepnight_Sfx(hxd_Res.load("sfx/pew1.wav").toSound());
			return s17.play(null,quickPlayVolume17);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/pew1.wav").toSound());
		}
	};
	var pew2 = function(quickPlayVolume18) {
		if(quickPlayVolume18 != null) {
			var s18 = new mt_deepnight_Sfx(hxd_Res.load("sfx/pew2.wav").toSound());
			return s18.play(null,quickPlayVolume18);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/pew2.wav").toSound());
		}
	};
	var reload0 = function(quickPlayVolume19) {
		if(quickPlayVolume19 != null) {
			var s19 = new mt_deepnight_Sfx(hxd_Res.load("sfx/reload0.wav").toSound());
			return s19.play(null,quickPlayVolume19);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/reload0.wav").toSound());
		}
	};
	var reload1 = function(quickPlayVolume20) {
		if(quickPlayVolume20 != null) {
			var s20 = new mt_deepnight_Sfx(hxd_Res.load("sfx/reload1.wav").toSound());
			return s20.play(null,quickPlayVolume20);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/reload1.wav").toSound());
		}
	};
	var reload2 = function(quickPlayVolume21) {
		if(quickPlayVolume21 != null) {
			var s21 = new mt_deepnight_Sfx(hxd_Res.load("sfx/reload2.wav").toSound());
			return s21.play(null,quickPlayVolume21);
		} else {
			return new mt_deepnight_Sfx(hxd_Res.load("sfx/reload2.wav").toSound());
		}
	};
	$r = { cover0 : cover0, death0 : death0, explode0 : explode0, explode1 : explode1, explode2 : explode2, explode3 : explode3, grunt0 : grunt0, grunt1 : grunt1, grunt2 : grunt2, grunt3 : grunt3, grunt4 : grunt4, gun0 : gun0, gun1 : gun1, gun2 : gun2, land0 : land0, music : music, pew0 : pew0, pew1 : pew1, pew2 : pew2, reload0 : reload0, reload1 : reload1, reload2 : reload2};
	return $r;
}(this));
h2d_Console.HIDE_LOG_TIMEOUT = 3.;
Const.FPS = 60;
Const.GRID = 16;
Const.SCALE = 5;
Const.UNIQ = 0;
Const.INFINITE = 999999;
Const.PAUSE_SLOWMO = 0.03;
Const._inc = 0;
Const.DP_BG = Const._inc++;
Const.DP_FX_BG = Const._inc++;
Const.DP_PROPS = Const._inc++;
Const.DP_MOBS = Const._inc++;
Const.DP_HERO = Const._inc++;
Const.DP_FX_TOP = Const._inc++;
Const.DP_UI = Const._inc++;
Const.DP_TOP = Const._inc++;
Entity.ALL = [];
mt_Process.CUSTOM_STAGE_WIDTH = -1;
mt_Process.CUSTOM_STAGE_HEIGHT = -1;
mt_Process.UNIQ_ID = 0;
mt_Process.ROOTS = [];
Main.BG = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
en_Cover.ALL = [];
en_Mob.ALL = [];
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
h2d_Flow.tmpBounds = new h2d_col_Bounds();
h3d_Buffer.GUID = 0;
h3d_Matrix.tmp = new h3d_Matrix();
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g4 = 0;
			var _g3 = i;
			while(_g4 < _g3) {
				var k = _g4++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__;
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.nativeFlip = false;
h3d_mat_Texture.checkerTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.noiseTextureKeys = new haxe_ds_IntMap();
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}, fields : { quality : { range : [1,4,1], inspect : null}, sigma : { range : [0,2], inspect : null}, passes : { range : [0,5,1], inspect : null}, gain : { range : [0,5,1], inspect : null}}};
h3d_pass__$Border_BorderShader.SRC = "oy4:namey29:h3d.pass._Border.BorderShadery4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-299R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini274y3:maxi330y4:filey72:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fpass%2FBorder.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i280R16i324R17R18gR19jR4:5:2i4jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i280R16i295R17R18gR19r17R20jR21:1:1oR0y8:positionR9i-297R5jR10:4:0R11r17y6:parentoR0y6:outputR9i-296R5r22R11jR4:12:1ar21oR0y5:colorR9i-298R5r22R11jR4:5:2i4r16R25r23ghgggoR14oR15i298R16i324R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i298R16i302R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i303R16i317R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0R24R9i-295R5jR10:1:0R11r41R25oR0y5:inputR9i-294R5r43R11jR4:12:1ar42hgggoR14oR15i319R16i320R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1zgoR14oR15i322R16i323R17R18gR19r50R20jR21:0:1jR30:3:1i1ghgghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-300R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i356R16i388R17R18gR19r3R20jR21:4:1aoR14oR15i362R16i382R17R18gR19r26R20jR21:5:3r18oR14oR15i362R16i374R17R18gR19r26R20jR21:1:1r25goR14oR15i377R16i382R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0R27R9i-293R5jR10:2:0R11r78ggghgR12ahghy4:varsar79r44r23r5r63hg";
h3d_shader_ScreenShader.SRC = "oy4:namey23:h3d.shader.ScreenShadery4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-250R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini271y3:maxi356y4:filey80:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FScreenShader.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i277R16i300R17R18gR19jR4:5:2i2jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i277R16i289R17R18gR19r17R20jR21:1:1oR0y12:calculatedUVR9i-249R5jR10:4:0R11r17ggoR14oR15i292R16i300R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y2:uvR9i-245R5jR10:1:0R11r26y6:parentoR0y5:inputR9i-243R5r28R11jR4:12:1aoR0y8:positionR9i-244R5r28R11jR4:5:2i2r16R26r29gr27hggggoR14oR15i306R16i350R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i306R16i321R17R18gR19r38R20jR21:1:1oR0R28R9i-247R5r22R11r38R26oR0y6:outputR9i-246R5r22R11jR4:12:1ar41oR0y5:colorR9i-248R5r22R11jR4:5:2i4r16R26r42ghgggoR14oR15i324R16i350R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i324R16i328R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i329R16i343R17R18gR19r32R20jR21:1:1r31goR14oR15i345R16i346R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1zgoR14oR15i348R16i349R17R18gR19r63R20jR21:0:1jR32:3:1i1ghgghgR12ahghy4:varsar29r42r21r5hg";
h3d_pass__$Copy_CopyShader.SRC = "oy4:namey25:h3d.pass._Copy.CopyShadery4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-323R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini271y3:maxi356y4:filey80:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FScreenShader.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i277R16i300R17R18gR19jR4:5:2i2jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i277R16i289R17R18gR19r17R20jR21:1:1oR0y12:calculatedUVR9i-320R5jR10:4:0R11r17ggoR14oR15i292R16i300R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y2:uvR9i-316R5jR10:1:0R11r26y6:parentoR0y5:inputR9i-314R5r28R11jR4:12:1aoR0y8:positionR9i-315R5r28R11jR4:5:2i2r16R26r29gr27hggggoR14oR15i306R16i350R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i306R16i321R17R18gR19r38R20jR21:1:1oR0R28R9i-318R5r22R11r38R26oR0y6:outputR9i-317R5r22R11jR4:12:1ar41oR0y5:colorR9i-319R5r22R11jR4:5:2i4r16R26r42ghgggoR14oR15i324R16i350R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i324R16i328R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i329R16i343R17R18gR19r32R20jR21:1:1r31goR14oR15i345R16i346R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1zgoR14oR15i348R16i349R17R18gR19r63R20jR21:0:1jR32:3:1i1ghgghgR12ahgoR3r3R5jR6:2:0R7oR0y16:__init__fragmentR9i-324R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i199R16i249R17y70:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fpass%2FCopy.hxgR19r3R20jR21:4:1aoR14oR15i205R16i243R17R34gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i205R16i215R17R34gR19r86R20jR21:1:1oR0y10:pixelColorR9i-322R5r22R11r86ggoR14oR15i218R16i243R17R34gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i218R16i225R17R34gR19jR4:13:1aoR3r93R12aoR0y1:_R11jR4:10:0goR0R25R11jR4:5:2i2r16ghghR20jR21:2:1jR31:33:0gaoR14oR15i218R16i225R17R34gR19r100R20jR21:1:1oR0y7:textureR9i-321R5jR10:2:0R11r100ggoR14oR15i230R16i242R17R34gR19r17R20jR21:1:1r21ghgghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-325R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i275R16i312R17R34gR19r3R20jR21:4:1aoR14oR15i281R16i306R17R34gR19r45R20jR21:5:3r18oR14oR15i281R16i293R17R34gR19r45R20jR21:1:1r44goR14oR15i296R16i306R17R34gR19r86R20jR21:1:1r89gghgR12ahghy4:varsar29r42r21r109r89r5r76r121hg";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "oy4:namey33:h3d.pass._HardwarePick.FixedColory4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-38R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini226y3:maxi347y4:filey78:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fpass%2FHardwarePick.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i231R16i342R17R18gR19jR4:5:2i4jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i231R16i246R17R18gR19r17R20jR21:1:1oR0y8:positionR9i-36R5jR10:4:0R11r17y6:parentoR0y6:outputR9i-35R5r22R11jR4:12:1ar21oR0y7:colorIDR9i-37R5r22R11jR4:5:2i4r16R25r23ghgggoR14oR15i249R16i342R17R18gR19jR4:5:2i4r16R20jR21:5:3jR23:1:0oR14oR15i249R16i314R17R18gR19jR4:5:2i4r16R20jR21:3:1oR14oR15i250R16i313R17R18gR19r35R20jR21:5:3jR23:0:0oR14oR15i250R16i265R17R18gR19r17R20jR21:1:1r21goR14oR15i268R16i313R17R18gR19jR4:5:2i4r16R20jR21:5:3r32oR14oR15i268R16i293R17R18gR19r44R20jR21:8:2oR14oR15i268R16i272R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i273R16i284R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i273R16i281R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y8:viewportR9i-34R5jR10:2:0R11r59ggajy14:hxsl.Component:0:0jR30:1:0hgoR14oR15i286R16i288R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1d0goR14oR15i290R16i292R17R18gR19r69R20jR21:0:1jR31:3:1d0ghgoR14oR15i296R16i313R17R18gR19r69R20jR21:9:2oR14oR15i296R16i311R17R18gR19r17R20jR21:1:1r21gajR30:3:0hggggoR14oR15i317R16i342R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i317R16i321R17R18gR19r50R20jR21:2:1r51gaoR14oR15i322R16i333R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i322R16i330R17R18gR19r59R20jR21:1:1r60gajR30:2:0r83hgoR14oR15i335R16i337R17R18gR19r69R20jR21:0:1jR31:3:1d1goR14oR15i339R16i341R17R18gR19r69R20jR21:0:1jR31:3:1d1ghggghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-39R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i370R16i404R17R18gR19r3R20jR21:4:1aoR14oR15i375R16i399R17R18gR19r26R20jR21:5:3r18oR14oR15i375R16i389R17R18gR19r26R20jR21:1:1r25goR14oR15i392R16i399R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0R27R9i-33R5r61R11r134ggghgR12ahghy4:varsar135r60r23r5r119hg";
h3d_pass_ShaderManager.STRICT = true;
h3d_pass_ShadowMap.__meta__ = { fields : { border : { ignore : null}}};
h3d_shader_AmbientLight.SRC = "oy4:namey23:h3d.shader.AmbientLighty4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:2:0y3:refoR0y8:__init__y2:idi-308R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini333y3:maxi399y4:filey80:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FAmbientLight.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i339R16i393R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i339R16i349R17R18gR19r17R20jR21:1:1oR0y10:lightColorR9i-306R5jR10:4:0R11r17ggoR14oR15i352R16i393R17R18gR19jR4:5:2i3r16R20jR21:10:3oR14oR15i352R16i360R17R18gR19jR4:2:0R20jR21:1:1oR0y8:additiveR9i-307R5jR10:2:0R11r29y10:qualifiersajy17:hxsl.VarQualifier:0:1nhggoR14oR15i363R16i382R17R18gR19r26R20jR21:1:1oR0y12:ambientLightR9i-302R5jR10:0:0R11r26y6:parentoR0y6:globalR9i-301R5r38R11jR4:12:1ar37oR0y16:perPixelLightingR9i-303R5r38R11r29R26ajR27:0:1nhR29r39ghgggoR14oR15i385R16i393R17R18gR19jR4:5:2i3r16R20jR21:8:2oR14oR15i385R16i389R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:39:0gaoR14oR15i390R16i392R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1d0ghggghgR12ahgoR3r3R5r4R7oR0y16:__init__fragmentR9i-309R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i433R16i504R17R18gR19r3R20jR21:4:1aoR14oR15i439R16i498R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i439R16i454R17R18gR19r77R20jR21:1:1oR0y15:lightPixelColorR9i-305R5r22R11r77ggoR14oR15i457R16i498R17R18gR19r26R20jR21:10:3oR14oR15i457R16i465R17R18gR19r29R20jR21:1:1r30goR14oR15i468R16i487R17R18gR19r26R20jR21:1:1r37goR14oR15i490R16i498R17R18gR19jR4:5:2i3r16R20jR21:8:2oR14oR15i490R16i494R17R18gR19r52R20jR21:2:1r53gaoR14oR15i495R16i497R17R18gR19r58R20jR21:0:1jR33:3:1d0ghggghgR12ahgoR3jR4:5:2i3r16R5jR6:3:0R7oR0y9:calcLightR9i-311R5r6R11jR4:13:1aoR3r107R12aoR0R24R11jR4:5:2i3r16ghghgR13oR14oR15i557R16i670R17R18gR19r3R20jR21:4:1aoR14oR15i563R16i664R17R18gR19r3R20jR21:12:1oR14oR15i570R16i664R17R18gR19r114R20jR21:10:3oR14oR15i570R16i578R17R18gR19r29R20jR21:1:1r30goR14oR15i581R16i591R17R18gR19r114R20jR21:1:1oR0R24R9i-310R5r22R11r114ggoR14oR15i594R16i664R17R18gR19jR4:5:2i3r16R20jR21:3:1oR14oR15i595R16i663R17R18gR19r132R20jR21:5:3jR23:0:0oR14oR15i595R16i614R17R18gR19r26R20jR21:1:1r37goR14oR15i617R16i663R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:1:0oR14oR15i617R16i650R17R18gR19jR4:5:2i3r16R20jR21:8:2oR14oR15i617R16i642R17R18gR19jR4:13:1aoR3r145R12aoR0y1:_R11r26goR0y1:bR11r58ghghR20jR21:2:1jR32:22:0gaoR14oR15i617R16i642R17R18gR19r26R20jR21:3:1oR14oR15i618R16i641R17R18gR19r26R20jR21:5:3jR23:3:0oR14oR15i618R16i619R17R18gR19r58R20jR21:0:1jR33:3:1i1goR14oR15i622R16i641R17R18gR19r26R20jR21:1:1r37gggoR14oR15i647R16i649R17R18gR19r58R20jR21:0:1jR33:3:1d0ghgoR14oR15i653R16i663R17R18gR19r114R20jR21:1:1r128gggggghgR12ar128hgoR3r3R5jR6:0:0R7oR0y6:vertexR9i-312R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i694R16i776R17R18gR19r3R20jR21:4:1aoR14oR15i700R16i770R17R18gR19r3R20jR21:10:3oR14oR15i704R16i728R17R18gR19r29R20jR21:6:2jy15:haxe.macro.Unop:2:0oR14oR15i705R16i728R17R18gR19r29R20jR21:1:1r41ggoR14oR15i731R16i770R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:20:1r142oR14oR15i731R16i745R17R18gR19r207R20jR21:9:2oR14oR15i731R16i741R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y10:pixelColorR9i-304R5r22R11r213ggajy14:hxsl.Component:0:0jR42:1:0jR42:2:0hgoR14oR15i749R16i770R17R18gR19r107R20jR21:8:2oR14oR15i749R16i758R17R18gR19r115R20jR21:1:1r109gaoR14oR15i759R16i769R17R18gR19r17R20jR21:1:1r21ghggnghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-313R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i802R16i888R17R18gR19r3R20jR21:4:1aoR14oR15i808R16i882R17R18gR19r3R20jR21:10:3oR14oR15i812R16i835R17R18gR19r29R20jR21:1:1r41goR14oR15i838R16i882R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:20:1r142oR14oR15i838R16i852R17R18gR19r252R20jR21:9:2oR14oR15i838R16i848R17R18gR19r213R20jR21:1:1r214gar217r218r219hgoR14oR15i856R16i882R17R18gR19r107R20jR21:8:2oR14oR15i856R16i865R17R18gR19r115R20jR21:1:1r109gaoR14oR15i866R16i881R17R18gR19r77R20jR21:1:1r80ghggnghgR12ahghy4:varsar39r214r80r21r30r5r67r109r188r237hg";
h3d_shader_Base2d.SRC = "oy4:namey17:h3d.shader.Base2dy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:2:0y3:refoR0y8:__init__y2:idi-29R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini963y3:maxi1507y4:filey74:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FBase2d.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i969R16i1017R17R18gR19jR4:5:2i4jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i969R16i983R17R18gR19r17R20jR21:1:1oR0y14:spritePositionR9i-11R5jR10:4:0R11r17ggoR14oR15i986R16i1017R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i986R16i990R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i991R16i1005R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y8:positionR9i-2R5jR10:1:0R11r36y6:parentoR0y5:inputR9i-1R5r38R11jR4:12:1ar37oR0y2:uvR9i-3R5r38R11jR4:5:2i2r16R27r39goR0y5:colorR9i-4R5r38R11jR4:5:2i4r16R27r39ghgggoR14oR15i1007R16i1013R17R18gR19jR4:3:0R20jR21:1:1oR0y6:zValueR9i-9R5jR10:2:0R11r49ggoR14oR15i1015R16i1016R17R18gR19r49R20jR21:0:1jy10:hxsl.Const:3:1i1ghggoR14oR15i1023R16i1285R17R18gR19r3R20jR21:10:3oR14oR15i1027R16i1037R17R18gR19jR4:2:0R20jR21:1:1oR0y10:isRelativeR9i-16R5r51R11r63y10:qualifiersajy17:hxsl.VarQualifier:0:1nhggoR14oR15i1040R16i1241R17R18gR19r3R20jR21:4:1aoR14oR15i1047R16i1114R17R18gR19r49R20jR21:5:3r18oR14oR15i1047R16i1065R17R18gR19r49R20jR21:9:2oR14oR15i1047R16i1063R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y16:absolutePositionR9i-12R5r22R11r77ggajy14:hxsl.Component:0:0hgoR14oR15i1068R16i1114R17R18gR19r49R20jR21:8:2oR14oR15i1068R16i1093R17R18gR19jR4:13:1aoR3r49R12aoR0y1:_R11jR4:5:2i3r16goR0y1:bR11jR4:5:2i3r16ghghR20jR21:2:1jR25:29:0gaoR14oR15i1068R16i1093R17R18gR19r91R20jR21:8:2oR14oR15i1068R16i1072R17R18gR19jR4:13:1ahR20jR21:2:1jR25:39:0gaoR14oR15i1073R16i1090R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1073R16i1087R17R18gR19r17R20jR21:1:1r21gar81jR37:1:0hgoR14oR15i1091R16i1092R17R18gR19r49R20jR21:0:1jR32:3:1i1ghgoR14oR15i1098R16i1113R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y15:absoluteMatrixAR9i-18R5r51R11r123gghggoR14oR15i1121R16i1188R17R18gR19r49R20jR21:5:3r18oR14oR15i1121R16i1139R17R18gR19r49R20jR21:9:2oR14oR15i1121R16i1137R17R18gR19r77R20jR21:1:1r78gar114hgoR14oR15i1142R16i1188R17R18gR19r49R20jR21:8:2oR14oR15i1142R16i1167R17R18gR19jR4:13:1aoR3r49R12aoR0R38R11jR4:5:2i3r16gr92hghR20jR21:2:1r95gaoR14oR15i1142R16i1167R17R18gR19r145R20jR21:8:2oR14oR15i1142R16i1146R17R18gR19r103R20jR21:2:1r104gaoR14oR15i1147R16i1164R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1147R16i1161R17R18gR19r17R20jR21:1:1r21gar81r114hgoR14oR15i1165R16i1166R17R18gR19r49R20jR21:0:1jR32:3:1i1ghgoR14oR15i1172R16i1187R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y15:absoluteMatrixBR9i-19R5r51R11r170gghggoR14oR15i1195R16i1234R17R18gR19jR4:5:2i2r16R20jR21:5:3r18oR14oR15i1195R16i1214R17R18gR19r177R20jR21:9:2oR14oR15i1195R16i1211R17R18gR19r77R20jR21:1:1r78gajR37:2:0jR37:3:0hgoR14oR15i1217R16i1234R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1217R16i1231R17R18gR19r17R20jR21:1:1r21gar184r185hgghgoR14oR15i1252R16i1285R17R18gR19r77R20jR21:5:3r18oR14oR15i1252R16i1268R17R18gR19r77R20jR21:1:1r78goR14oR15i1271R16i1285R17R18gR19r17R20jR21:1:1r21gggoR14oR15i1291R16i1358R17R18gR19jR4:5:2i2r16R20jR21:5:3r18oR14oR15i1291R16i1303R17R18gR19r209R20jR21:1:1oR0y12:calculatedUVR9i-15R5jR10:3:0R11r209ggoR14oR15i1306R16i1358R17R18gR19jR4:5:2i2r16R20jR21:10:3oR14oR15i1306R16i1314R17R18gR19r63R20jR21:1:1oR0y8:hasUVPosR9i-22R5r51R11r63R34ajR35:0:1nhggoR14oR15i1317R16i1347R17R18gR19r217R20jR21:5:3jR23:0:0oR14oR15i1317R16i1336R17R18gR19jR4:5:2i2r16R20jR21:5:3jR23:1:0oR14oR15i1317R16i1325R17R18gR19r42R20jR21:1:1r41goR14oR15i1328R16i1336R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1328R16i1333R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y5:uvPosR9i-23R5r51R11r239ggar184r185hggoR14oR15i1339R16i1347R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1339R16i1344R17R18gR19r239R20jR21:1:1r240gar81r114hggoR14oR15i1350R16i1358R17R18gR19r42R20jR21:1:1r41gggoR14oR15i1364R16i1423R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i1364R16i1374R17R18gR19r261R20jR21:1:1oR0y10:pixelColorR9i-13R5r22R11r261ggoR14oR15i1377R16i1423R17R18gR19jR4:5:2i4r16R20jR21:10:3oR14oR15i1377R16i1387R17R18gR19r63R20jR21:1:1r64goR14oR15i1390R16i1409R17R18gR19r268R20jR21:5:3r230oR14oR15i1390R16i1395R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0R30R9i-17R5r51R11r276ggoR14oR15i1398R16i1409R17R18gR19r44R20jR21:1:1r43ggoR14oR15i1412R16i1423R17R18gR19r44R20jR21:1:1r43gggoR14oR15i1429R16i1469R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i1429R16i1441R17R18gR19r290R20jR21:1:1oR0y12:textureColorR9i-14R5r22R11r290ggoR14oR15i1444R16i1469R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i1444R16i1451R17R18gR19jR4:13:1aoR3r297R12aoR0R38R11jR4:10:0goR0R29R11jR4:5:2i2r16ghghR20jR21:2:1jR25:33:0gaoR14oR15i1444R16i1451R17R18gR19r304R20jR21:1:1oR0y7:textureR9i-10R5r51R11r304ggoR14oR15i1456R16i1468R17R18gR19r209R20jR21:1:1r212ghggoR14oR15i1475R16i1501R17R18gR19r261R20jR21:5:3jR23:20:1r230oR14oR15i1475R16i1485R17R18gR19r261R20jR21:1:1r264goR14oR15i1489R16i1501R17R18gR19r290R20jR21:1:1r293gghgR12ahgoR3r3R5jR6:0:0R7oR0y6:vertexR9i-30R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i1531R16i2043R17R18gR19r3R20jR21:4:1aoR14oR15i1596R16i1635R17R18gR19r3R20jR21:7:2oR0y3:tmpR9i-32R5r22R11jR4:5:2i3r16goR14oR15i1606R16i1634R17R18gR19r345R20jR21:8:2oR14oR15i1606R16i1610R17R18gR19r103R20jR21:2:1r104gaoR14oR15i1611R16i1630R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1611R16i1627R17R18gR19r77R20jR21:1:1r78gar81r114hgoR14oR15i1632R16i1633R17R18gR19r49R20jR21:0:1jR32:3:1i1ghggoR14oR15i1640R16i1751R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i1640R16i1654R17R18gR19r368R20jR21:1:1oR0y14:outputPositionR9i-28R5r22R11r368ggoR14oR15i1657R16i1751R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i1657R16i1661R17R18gR19r30R20jR21:2:1r31gaoR14oR15i1668R16i1690R17R18gR19r49R20jR21:8:2oR14oR15i1668R16i1671R17R18gR19jR4:13:1aoR3r49R12aoR0R38R11r345gr92hghR20jR21:2:1r95gaoR14oR15i1668R16i1671R17R18gR19r345R20jR21:1:1r344goR14oR15i1676R16i1689R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y13:filterMatrixAR9i-20R5r51R11r396gghgoR14oR15i1697R16i1719R17R18gR19r49R20jR21:8:2oR14oR15i1697R16i1700R17R18gR19jR4:13:1aoR3r49R12aoR0R38R11r345gr92hghR20jR21:2:1r95gaoR14oR15i1697R16i1700R17R18gR19r345R20jR21:1:1r344goR14oR15i1705R16i1718R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y13:filterMatrixBR9i-21R5r51R11r416gghgoR14oR15i1726R16i1745R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1726R16i1742R17R18gR19r77R20jR21:1:1r78gar184r185hghggoR14oR15i1786R16i1853R17R18gR19jR4:5:2i2r16R20jR21:5:3r18oR14oR15i1786R16i1803R17R18gR19r432R20jR21:9:2oR14oR15i1786R16i1800R17R18gR19r368R20jR21:1:1r371gar81r114hgoR14oR15i1806R16i1853R17R18gR19jR4:5:2i2r16R20jR21:5:3r230oR14oR15i1806R16i1839R17R18gR19jR4:5:2i2r16R20jR21:3:1oR14oR15i1807R16i1838R17R18gR19r445R20jR21:5:3r226oR14oR15i1807R16i1824R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1807R16i1821R17R18gR19r368R20jR21:1:1r371gar81r114hgoR14oR15i1827R16i1838R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1827R16i1835R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y8:viewportR9i-27R5r51R11r461ggar81r114hgggoR14oR15i1842R16i1853R17R18gR19jR4:5:2i2r16R20jR21:9:2oR14oR15i1842R16i1850R17R18gR19r461R20jR21:1:1r462gar184r185hgggoR14oR15i1945R16i1999R17R18gR19r3R20jR21:10:3oR14oR15i1949R16i1959R17R18gR19r63R20jR21:1:1oR0y10:pixelAlignR9i-25R5r51R11r63R34ajR35:0:1nhggoR14oR15i1962R16i1999R17R18gR19jR4:5:2i2r16R20jR21:5:3jR23:20:1jR23:3:0oR14oR15i1962R16i1979R17R18gR19r488R20jR21:9:2oR14oR15i1962R16i1976R17R18gR19r368R20jR21:1:1r371gar81r114hgoR14oR15i1983R16i1999R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y16:halfPixelInverseR9i-26R5r51R11r500gggngoR14oR15i2005R16i2037R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i2005R16i2020R17R18gR19r507R20jR21:1:1oR0R26R9i-6R5r22R11r507R27oR0y6:outputR9i-5R5r22R11jR4:12:1ar510oR0R30R9i-7R5r22R11jR4:5:2i4r16R27r511ghgggoR14oR15i2023R16i2037R17R18gR19r368R20jR21:1:1r371gghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-31R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i2069R16i2159R17R18gR19r3R20jR21:4:1aoR14oR15i2075R16i2122R17R18gR19r3R20jR21:10:3oR14oR15i2079R16i2112R17R18gR19r63R20jR21:5:3jR23:14:0oR14oR15i2079R16i2088R17R18gR19r63R20jR21:1:1oR0y9:killAlphaR9i-24R5r51R11r63R34ajR35:0:1nhggoR14oR15i2092R16i2112R17R18gR19r63R20jR21:5:3jR23:9:0oR14oR15i2092R16i2104R17R18gR19r49R20jR21:9:2oR14oR15i2092R16i2102R17R18gR19r261R20jR21:1:1r264gar185hgoR14oR15i2107R16i2112R17R18gR19r49R20jR21:0:1jR32:3:1d0.001gggoR14oR15i2115R16i2122R17R18gR19r3R20jR21:11:0gngoR14oR15i2128R16i2153R17R18gR19r514R20jR21:5:3r18oR14oR15i2128R16i2140R17R18gR19r514R20jR21:1:1r513goR14oR15i2143R16i2153R17R18gR19r261R20jR21:1:1r264gghgR12ahghy4:varsar39r511oR0y4:timeR9i-8R5jR10:0:0R11r49gr50r313r21r78r264r293r212r64r277r124r171r397r417r220r240r540r482r501r462r371r5r334r525hg";
h3d_shader_BaseMesh.SRC = "oy4:namey19:h3d.shader.BaseMeshy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:2:0y3:refoR0y8:__init__y2:idi-130R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini1247y3:maxi1827y4:filey76:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FBaseMesh.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i1253R16i1286R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i1253R16i1269R17R18gR19r17R20jR21:1:1oR0y16:relativePositionR9i-116R5jR10:4:0R11r17ggoR14oR15i1272R16i1286R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y8:positionR9i-109R5jR10:1:0R11r26y6:parentoR0y5:inputR9i-108R5r28R11jR4:12:1ar27oR0y6:normalR9i-110R5r28R11jR4:5:2i3r16R26r29ghggggoR14oR15i1292R16i1358R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i1292R16i1311R17R18gR19r38R20jR21:1:1oR0y19:transformedPositionR9i-117R5r22R11r38ggoR14oR15i1314R16i1358R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:1:0oR14oR15i1314R16i1330R17R18gR19r17R20jR21:1:1r21goR14oR15i1333R16i1358R17R18gR19jR4:8:0R20jR21:8:2oR14oR15i1333R16i1349R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:50:0gaoR14oR15i1333R16i1349R17R18gR19jR4:7:0R20jR21:1:1oR0y9:modelViewR9i-106R5jR10:0:0R11r62y10:qualifiersajy17:hxsl.VarQualifier:3:0hR26oR0y6:globalR9i-103R5r64R11jR4:12:1aoR0y4:timeR9i-104R5r64R11jR4:3:0R26r67goR0y9:pixelSizeR9i-105R5r64R11jR4:5:2i2r16R26r67gr63oR0y16:modelViewInverseR9i-107R5r64R11r62R32ar66hR26r67ghggghgggoR14oR15i1364R16i1430R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i1364R16i1381R17R18gR19r82R20jR21:1:1oR0y17:projectedPositionR9i-120R5r22R11r82ggoR14oR15i1384R16i1430R17R18gR19jR4:5:2i4r16R20jR21:5:3r46oR14oR15i1384R16i1412R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i1384R16i1388R17R18gR19jR4:13:1ahR20jR21:2:1jR30:40:0gaoR14oR15i1389R16i1408R17R18gR19r38R20jR21:1:1r41goR14oR15i1410R16i1411R17R18gR19r70R20jR21:0:1jy10:hxsl.Const:3:1i1ghgoR14oR15i1415R16i1430R17R18gR19r62R20jR21:1:1oR0y8:viewProjR9i-98R5r64R11r62R26oR0y6:cameraR9i-93R5r64R11jR4:12:1aoR0y4:viewR9i-94R5r64R11r62R26r111goR0y4:projR9i-95R5r64R11r62R26r111goR0R25R9i-96R5r64R11jR4:5:2i3r16R26r111goR0y8:projDiagR9i-97R5r64R11jR4:5:2i3r16R26r111gr110oR0y15:inverseViewProjR9i-99R5r64R11r62R26r111goR0y5:zNearR9i-100R5r64R11r70R26r111goR0y4:zFarR9i-101R5r64R11r70R26r111goR0y3:dirR9i-102R5jR10:3:0R11jR4:5:2i3r16R26r111ghgggggoR14oR15i1436R16i1508R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i1436R16i1453R17R18gR19r131R20jR21:1:1oR0y17:transformedNormalR9i-119R5r22R11r131ggoR14oR15i1456R16i1508R17R18gR19r45R20jR21:8:2oR14oR15i1456R16i1496R17R18gR19jR4:13:1aoR3r45R12aoR0y1:_R11r45ghghR20jR21:2:1jR30:31:0gaoR14oR15i1456R16i1496R17R18gR19r45R20jR21:3:1oR14oR15i1457R16i1495R17R18gR19r45R20jR21:5:3r46oR14oR15i1457R16i1469R17R18gR19r32R20jR21:1:1r31goR14oR15i1472R16i1495R17R18gR19jR4:6:0R20jR21:8:2oR14oR15i1472R16i1488R17R18gR19jR4:13:1ahR20jR21:2:1jR30:48:0gaoR14oR15i1472R16i1488R17R18gR19r62R20jR21:1:1r63ghggghggoR14oR15i1514R16i1578R17R18gR19r124R20jR21:5:3r18oR14oR15i1514R16i1524R17R18gR19r124R20jR21:1:1r122goR14oR15i1527R16i1578R17R18gR19r45R20jR21:8:2oR14oR15i1527R16i1566R17R18gR19jR4:13:1aoR3r45R12aoR0R50R11jR4:5:2i3r16ghghR20jR21:2:1r145gaoR14oR15i1527R16i1566R17R18gR19r186R20jR21:3:1oR14oR15i1528R16i1565R17R18gR19r186R20jR21:5:3jR23:3:0oR14oR15i1528R16i1543R17R18gR19r116R20jR21:1:1r115goR14oR15i1546R16i1565R17R18gR19r38R20jR21:1:1r41ggghggoR14oR15i1584R16i1602R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i1584R16i1594R17R18gR19r207R20jR21:1:1oR0y10:pixelColorR9i-121R5r22R11r207ggoR14oR15i1597R16i1602R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y5:colorR9i-126R5jR10:2:0R11r214gggoR14oR15i1608R16i1633R17R18gR19r70R20jR21:5:3r18oR14oR15i1608R16i1617R17R18gR19r70R20jR21:1:1oR0y9:specPowerR9i-124R5r22R11r70ggoR14oR15i1620R16i1633R17R18gR19r70R20jR21:1:1oR0y13:specularPowerR9i-127R5r216R11r70R32ajR33:7:2d0d100hgggoR14oR15i1639R16i1681R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i1639R16i1648R17R18gR19r234R20jR21:1:1oR0y9:specColorR9i-125R5r22R11r234ggoR14oR15i1651R16i1681R17R18gR19jR4:5:2i3r16R20jR21:5:3r46oR14oR15i1651R16i1664R17R18gR19r241R20jR21:1:1oR0y13:specularColorR9i-129R5r216R11r241ggoR14oR15i1667R16i1681R17R18gR19r70R20jR21:1:1oR0y14:specularAmountR9i-128R5r216R11r70R32ajR33:7:2d0d10hggggoR14oR15i1687R16i1766R17R18gR19jR4:5:2i2r16R20jR21:5:3r18oR14oR15i1687R16i1695R17R18gR19r256R20jR21:1:1oR0y8:screenUVR9i-123R5r22R11r256ggoR14oR15i1698R16i1766R17R18gR19jR4:5:2i2r16R20jR21:5:3jR23:0:0oR14oR15i1698R16i1760R17R18gR19r263R20jR21:5:3r46oR14oR15i1698R16i1742R17R18gR19jR4:5:2i2r16R20jR21:3:1oR14oR15i1699R16i1741R17R18gR19r269R20jR21:5:3jR23:2:0oR14oR15i1699R16i1719R17R18gR19r269R20jR21:9:2oR14oR15i1699R16i1716R17R18gR19r82R20jR21:1:1r85gajy14:hxsl.Component:0:0jR59:1:0hgoR14oR15i1722R16i1741R17R18gR19r70R20jR21:9:2oR14oR15i1722R16i1739R17R18gR19r82R20jR21:1:1r85gajR59:3:0hgggoR14oR15i1745R16i1760R17R18gR19jR4:5:2i2r16R20jR21:8:2oR14oR15i1745R16i1749R17R18gR19jR4:13:1ahR20jR21:2:1jR30:38:0gaoR14oR15i1750R16i1753R17R18gR19r70R20jR21:0:1jR39:3:1d0.5goR14oR15i1755R16i1759R17R18gR19r70R20jR21:0:1jR39:3:1d-0.5ghggoR14oR15i1763R16i1766R17R18gR19r70R20jR21:0:1jR39:3:1d0.5gggoR14oR15i1772R16i1821R17R18gR19r70R20jR21:5:3r18oR14oR15i1772R16i1777R17R18gR19r70R20jR21:1:1oR0y5:depthR9i-122R5r22R11r70ggoR14oR15i1780R16i1821R17R18gR19r70R20jR21:5:3r272oR14oR15i1780R16i1799R17R18gR19r70R20jR21:9:2oR14oR15i1780R16i1797R17R18gR19r82R20jR21:1:1r85gajR59:2:0hgoR14oR15i1802R16i1821R17R18gR19r70R20jR21:9:2oR14oR15i1802R16i1819R17R18gR19r82R20jR21:1:1r85gar288hggghgR12ahgoR3r3R5r4R7oR0y16:__init__fragmentR9i-131R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i1861R16i2314R17R18gR19r3R20jR21:4:1aoR14oR15i1867R16i1916R17R18gR19r131R20jR21:5:3r18oR14oR15i1867R16i1884R17R18gR19r131R20jR21:1:1r134goR14oR15i1887R16i1916R17R18gR19r45R20jR21:8:2oR14oR15i1887R16i1904R17R18gR19jR4:13:1aoR3r45R12aoR0R50R11r131ghghR20jR21:2:1r145gaoR14oR15i1887R16i1904R17R18gR19r131R20jR21:1:1r134ghggoR14oR15i2017R16i2096R17R18gR19r256R20jR21:5:3r18oR14oR15i2017R16i2025R17R18gR19r256R20jR21:1:1r259goR14oR15i2028R16i2096R17R18gR19jR4:5:2i2r16R20jR21:5:3r264oR14oR15i2028R16i2090R17R18gR19r382R20jR21:5:3r46oR14oR15i2028R16i2072R17R18gR19jR4:5:2i2r16R20jR21:3:1oR14oR15i2029R16i2071R17R18gR19r387R20jR21:5:3r272oR14oR15i2029R16i2049R17R18gR19r387R20jR21:9:2oR14oR15i2029R16i2046R17R18gR19r82R20jR21:1:1r85gar279r280hgoR14oR15i2052R16i2071R17R18gR19r70R20jR21:9:2oR14oR15i2052R16i2069R17R18gR19r82R20jR21:1:1r85gar288hgggoR14oR15i2075R16i2090R17R18gR19jR4:5:2i2r16R20jR21:8:2oR14oR15i2075R16i2079R17R18gR19r298R20jR21:2:1r299gaoR14oR15i2080R16i2083R17R18gR19r70R20jR21:0:1jR39:3:1d0.5goR14oR15i2085R16i2089R17R18gR19r70R20jR21:0:1jR39:3:1d-0.5ghggoR14oR15i2093R16i2096R17R18gR19r70R20jR21:0:1jR39:3:1d0.5gggoR14oR15i2102R16i2151R17R18gR19r70R20jR21:5:3r18oR14oR15i2102R16i2107R17R18gR19r70R20jR21:1:1r322goR14oR15i2110R16i2151R17R18gR19r70R20jR21:5:3r272oR14oR15i2110R16i2129R17R18gR19r70R20jR21:9:2oR14oR15i2110R16i2127R17R18gR19r82R20jR21:1:1r85gar332hgoR14oR15i2132R16i2151R17R18gR19r70R20jR21:9:2oR14oR15i2132R16i2149R17R18gR19r82R20jR21:1:1r85gar288hgggoR14oR15i2235R16i2260R17R18gR19r70R20jR21:5:3r18oR14oR15i2235R16i2244R17R18gR19r70R20jR21:1:1r223goR14oR15i2247R16i2260R17R18gR19r70R20jR21:1:1r227ggoR14oR15i2266R16i2308R17R18gR19r234R20jR21:5:3r18oR14oR15i2266R16i2275R17R18gR19r234R20jR21:1:1r237goR14oR15i2278R16i2308R17R18gR19r241R20jR21:5:3r46oR14oR15i2278R16i2291R17R18gR19r241R20jR21:1:1r244goR14oR15i2294R16i2308R17R18gR19r70R20jR21:1:1r248ggghgR12ahgoR3r3R5jR6:0:0R7oR0y6:vertexR9i-132R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i2338R16i2437R17R18gR19r3R20jR21:4:1aoR14oR15i2344R16i2379R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i2344R16i2359R17R18gR19r490R20jR21:1:1oR0R25R9i-112R5r22R11r490R26oR0y6:outputR9i-111R5r22R11jR4:12:1ar493oR0R52R9i-113R5r22R11jR4:5:2i4r16R26r494goR0R60R9i-114R5r22R11r70R26r494goR0R28R9i-115R5r22R11jR4:5:2i3r16R26r494ghgggoR14oR15i2362R16i2379R17R18gR19r82R20jR21:1:1r85ggoR14oR15i2385R16i2431R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i2385R16i2409R17R18gR19r509R20jR21:1:1oR0y24:pixelTransformedPositionR9i-118R5r22R11r509ggoR14oR15i2412R16i2431R17R18gR19r38R20jR21:1:1r41gghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-133R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i2463R16i2565R17R18gR19r3R20jR21:4:1aoR14oR15i2469R16i2494R17R18gR19r497R20jR21:5:3r18oR14oR15i2469R16i2481R17R18gR19r497R20jR21:1:1r496goR14oR15i2484R16i2494R17R18gR19r207R20jR21:1:1r210ggoR14oR15i2500R16i2520R17R18gR19r70R20jR21:5:3r18oR14oR15i2500R16i2512R17R18gR19r70R20jR21:1:1r498goR14oR15i2515R16i2520R17R18gR19r70R20jR21:1:1r322ggoR14oR15i2526R16i2559R17R18gR19r500R20jR21:5:3r18oR14oR15i2526R16i2539R17R18gR19r500R20jR21:1:1r499goR14oR15i2542R16i2559R17R18gR19r131R20jR21:1:1r134gghgR12ahghy4:varsar111r67r29r494r21r41r512r134r85r210r322r259r223r237r215r227r248r244r5r346r480r522hg";
h3d_shader_Blur.SRC = "oy4:namey15:h3d.shader.Blury4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-271R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini271y3:maxi356y4:filey80:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FScreenShader.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i277R16i300R17R18gR19jR4:5:2i2jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i277R16i289R17R18gR19r17R20jR21:1:1oR0y12:calculatedUVR9i-257R5jR10:4:0R11r17ggoR14oR15i292R16i300R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y2:uvR9i-253R5jR10:1:0R11r26y6:parentoR0y5:inputR9i-251R5r28R11jR4:12:1aoR0y8:positionR9i-252R5r28R11jR4:5:2i2r16R26r29gr27hggggoR14oR15i306R16i350R17R18gR19jR4:5:2i4r16R20jR21:5:3r18oR14oR15i306R16i321R17R18gR19r38R20jR21:1:1oR0R28R9i-255R5r22R11r38R26oR0y6:outputR9i-254R5r22R11jR4:12:1ar41oR0y5:colorR9i-256R5r22R11jR4:5:2i4r16R26r42ghgggoR14oR15i324R16i350R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i324R16i328R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i329R16i343R17R18gR19r32R20jR21:1:1r31goR14oR15i345R16i346R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1zgoR14oR15i348R16i349R17R18gR19r63R20jR21:0:1jR32:3:1i1ghgghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-272R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i612R16i1902R17y72:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FBlur.hxgR19r3R20jR21:4:1aoR14oR15i618R16i1684R17R34gR19r3R20jR21:10:3oR14oR15i622R16i638R17R34gR19jR4:2:0R20jR21:1:1oR0y16:isDepthDependantR9i-268R5jR10:2:0R11r88y10:qualifiersajy17:hxsl.VarQualifier:0:1nhggoR14oR15i641R16i1247R17R34gR19r3R20jR21:4:1aoR14oR15i648R16i681R17R34gR19r3R20jR21:7:2oR0y4:pcurR9i-275R5r22R11jR4:5:2i3r16goR14oR15i659R16i680R17R34gR19r100R20jR21:8:2oR14oR15i659R16i670R17R34gR19jR4:13:1aoR3r100R12aoR0R25R11jR4:5:2i2r16ghghR20jR21:1:1oR0y11:getPositionR9i-274R5r6R11r110ggaoR14oR15i671R16i679R17R34gR19r26R20jR21:1:1r27ghggoR14oR15i687R16i720R17R34gR19r3R20jR21:7:2oR0y4:ccurR9i-276R5r22R11jR4:5:2i4r16goR14oR15i698R16i719R17R34gR19r122R20jR21:8:2oR14oR15i698R16i705R17R34gR19jR4:13:1aoR3r122R12aoR0y1:_R11jR4:10:0goR0R25R11jR4:5:2i2r16ghghR20jR21:2:1jR31:33:0gaoR14oR15i698R16i705R17R34gR19r131R20jR21:1:1oR0y7:textureR9i-259R5r90R11r131ggoR14oR15i710R16i718R17R34gR19r26R20jR21:1:1r27ghggoR14oR15i726R16i755R17R34gR19r3R20jR21:7:2oR0R30R9i-277R5r22R11jR4:5:2i4r16goR14oR15i738R16i754R17R34gR19r150R20jR21:8:2oR14oR15i738R16i742R17R34gR19r54R20jR21:2:1r55gaoR14oR15i743R16i744R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i746R16i747R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i749R16i750R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i752R16i753R17R34gR19r63R20jR21:0:1jR32:3:1zghggoR14oR15i761R16i814R17R34gR19r3R20jR21:7:2oR0y4:ncurR9i-278R5r22R11jR4:5:2i3r16goR14oR15i772R16i813R17R34gR19r178R20jR21:8:2oR14oR15i772R16i784R17R34gR19jR4:13:1aoR3r178R12aoR0y5:valueR11jR4:5:2i4r16ghghR20jR21:2:1jR31:55:0gaoR14oR15i785R16i812R17R34gR19r122R20jR21:8:2oR14oR15i785R16i798R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i785R16i798R17R34gR19r131R20jR21:1:1oR0y13:normalTextureR9i-270R5r90R11r131ggoR14oR15i803R16i811R17R34gR19r26R20jR21:1:1r27ghghggoR14oR15i821R16i1214R17R34gR19r3R20jR21:20:3y6:unrollahoR14oR15i828R16i1214R17R34gR19r3R20jR21:13:3oR0y1:iR9i-279R5r22R11jR4:1:0goR14oR15i838R16i860R17R34gR19jR4:14:2r219jy13:hxsl.SizeDecl:0:1zR20jR21:5:3jR23:21:0oR14oR15i838R16i853R17R34gR19r219R20jR21:5:3jR23:0:0oR14oR15i838R16i846R17R34gR19r219R20jR21:6:2jy15:haxe.macro.Unop:3:0oR14oR15i839R16i846R17R34gR19r219R20jR21:1:1oR0y7:QualityR9i-261R5r90R11r219R36ajR37:0:1nhgggoR14oR15i849R16i853R17R34gR19r219R20jR21:0:1jR32:2:1i1ggoR14oR15i853R16i860R17R34gR19r219R20jR21:1:1r233ggoR14oR15i863R16i1214R17R34gR19r3R20jR21:4:1aoR14oR15i871R16i908R17R34gR19r3R20jR21:7:2oR0R25R9i-280R5r22R11jR4:5:2i2r16goR14oR15i880R16i907R17R34gR19r253R20jR21:5:3r227oR14oR15i880R16i888R17R34gR19r26R20jR21:1:1r27goR14oR15i891R16i907R17R34gR19jR4:5:2i2r16R20jR21:5:3jR23:1:0oR14oR15i891R16i896R17R34gR19r261R20jR21:1:1oR0y5:pixelR9i-264R5r90R11r261ggoR14oR15i899R16i907R17R34gR19r63R20jR21:8:2oR14oR15i899R16i904R17R34gR19jR4:13:1aoR3r63R12aoR0R44R11r219ghghR20jR21:2:1jR31:36:0gaoR14oR15i905R16i906R17R34gR19r219R20jR21:1:1r218ghggggoR14oR15i915R16i939R17R34gR19r3R20jR21:7:2oR0y1:cR9i-281R5r22R11r122goR14oR15i923R16i938R17R34gR19r122R20jR21:8:2oR14oR15i923R16i930R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i923R16i930R17R34gR19r131R20jR21:1:1r140goR14oR15i935R16i937R17R34gR19r253R20jR21:1:1r252ghggoR14oR15i946R16i970R17R34gR19r3R20jR21:7:2oR0R14R9i-282R5r22R11r100goR14oR15i954R16i969R17R34gR19r100R20jR21:8:2oR14oR15i954R16i965R17R34gR19r110R20jR21:1:1r111gaoR14oR15i966R16i968R17R34gR19r253R20jR21:1:1r252ghggoR14oR15i977R16i1010R17R34gR19r3R20jR21:7:2oR0y1:dR9i-283R5r22R11r63goR14oR15i985R16i1009R17R34gR19r63R20jR21:8:2oR14oR15i985R16i995R17R34gR19jR4:13:1aoR3r63R12aoR0R41R11jR4:5:2i3r16goR0y1:bR11jR4:5:2i3r16ghghR20jR21:2:1jR31:29:0gaoR14oR15i985R16i995R17R34gR19r333R20jR21:3:1oR14oR15i986R16i994R17R34gR19r333R20jR21:5:3jR23:3:0oR14oR15i986R16i987R17R34gR19r100R20jR21:1:1r310goR14oR15i990R16i994R17R34gR19r100R20jR21:1:1r99gggoR14oR15i1000R16i1008R17R34gR19jR4:5:2i3r16R20jR21:5:3r344oR14oR15i1000R16i1001R17R34gR19r100R20jR21:1:1r310goR14oR15i1004R16i1008R17R34gR19r100R20jR21:1:1r99gghggoR14oR15i1017R16i1061R17R34gR19r3R20jR21:7:2oR0y1:nR9i-284R5r22R11r178goR14oR15i1025R16i1060R17R34gR19r178R20jR21:8:2oR14oR15i1025R16i1037R17R34gR19r188R20jR21:2:1r189gaoR14oR15i1038R16i1059R17R34gR19r122R20jR21:8:2oR14oR15i1038R16i1051R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i1038R16i1051R17R34gR19r131R20jR21:1:1r205goR14oR15i1056R16i1058R17R34gR19r253R20jR21:1:1r252ghghggoR14oR15i1070R16i1099R17R34gR19r122R20jR21:5:3r18oR14oR15i1070R16i1071R17R34gR19r122R20jR21:1:1r288goR14oR15i1074R16i1099R17R34gR19r122R20jR21:8:2oR14oR15i1074R16i1077R17R34gR19jR4:13:1aoR3r122R12aoR0y1:xR11r122goR0y1:yR11r122goR0y1:aR11r63ghghR20jR21:2:1jR31:24:0gaoR14oR15i1078R16i1082R17R34gR19r122R20jR21:1:1r121goR14oR15i1084R16i1085R17R34gR19r122R20jR21:1:1r288goR14oR15i1087R16i1098R17R34gR19r63R20jR21:8:2oR14oR15i1087R16i1091R17R34gR19jR4:13:1aoR3r63R12aoR0R41R11r178gr334hghR20jR21:2:1r337gaoR14oR15i1087R16i1091R17R34gR19r178R20jR21:1:1r177goR14oR15i1096R16i1097R17R34gR19r178R20jR21:1:1r367ghghggoR14oR15i1107R16i1163R17R34gR19r122R20jR21:5:3r18oR14oR15i1107R16i1108R17R34gR19r122R20jR21:1:1r288goR14oR15i1111R16i1163R17R34gR19r122R20jR21:8:2oR14oR15i1111R16i1114R17R34gR19jR4:13:1ar404hR20jR21:2:1r410gaoR14oR15i1115R16i1116R17R34gR19r122R20jR21:1:1r288goR14oR15i1118R16i1122R17R34gR19r122R20jR21:1:1r121goR14oR15i1124R16i1162R17R34gR19r63R20jR21:8:2oR14oR15i1124R16i1154R17R34gR19jR4:13:1aoR3r63R12aoR0R41R11r63goR0R54R11r63ghghR20jR21:2:1jR31:21:0gaoR14oR15i1124R16i1154R17R34gR19r63R20jR21:3:1oR14oR15i1125R16i1153R17R34gR19r63R20jR21:5:3r262oR14oR15i1125R16i1144R17R34gR19r63R20jR21:8:2oR14oR15i1125R16i1136R17R34gR19jR4:13:1aoR3r63R12aoR0R41R11r63gr466hghR20jR21:2:1jR31:22:0gaoR14oR15i1125R16i1136R17R34gR19r63R20jR21:3:1oR14oR15i1126R16i1135R17R34gR19r63R20jR21:5:3r344oR14oR15i1126R16i1127R17R34gR19r63R20jR21:1:1r324goR14oR15i1130R16i1135R17R34gR19r63R20jR21:0:1jR32:3:1d0.001gggoR14oR15i1141R16i1143R17R34gR19r63R20jR21:0:1jR32:3:1d0ghgoR14oR15i1147R16i1153R17R34gR19r63R20jR21:0:1jR32:3:1i100000gggoR14oR15i1159R16i1161R17R34gR19r63R20jR21:0:1jR32:3:1d1ghghggoR14oR15i1171R16i1206R17R34gR19r150R20jR21:5:3jR23:20:1r227oR14oR15i1171R16i1176R17R34gR19r150R20jR21:1:1r149goR14oR15i1180R16i1206R17R34gR19r122R20jR21:5:3r262oR14oR15i1180R16i1181R17R34gR19r122R20jR21:1:1r288goR14oR15i1184R16i1206R17R34gR19r63R20jR21:16:2oR14oR15i1184R16i1190R17R34gR19jR4:14:2r63jR48:1:1r233R20jR21:1:1oR0y6:valuesR9i-263R5r90R11r534ggoR14oR15i1191R16i1205R17R34gR19r219R20jR21:10:3oR14oR15i1191R16i1196R17R34gR19r88R20jR21:5:3jR23:9:0oR14oR15i1191R16i1192R17R34gR19r219R20jR21:1:1r218goR14oR15i1195R16i1196R17R34gR19r219R20jR21:0:1jR32:2:1zggoR14oR15i1199R16i1201R17R34gR19r219R20jR21:6:2r230oR14oR15i1200R16i1201R17R34gR19r219R20jR21:1:1r218ggoR14oR15i1204R16i1205R17R34gR19r219R20jR21:1:1r218ggggghgggoR14oR15i1220R16i1240R17R34gR19r45R20jR21:5:3r18oR14oR15i1220R16i1232R17R34gR19r45R20jR21:1:1r44goR14oR15i1235R16i1240R17R34gR19r150R20jR21:1:1r149gghgoR14oR15i1257R16i1684R17R34gR19r3R20jR21:10:3oR14oR15i1261R16i1268R17R34gR19r88R20jR21:1:1oR0y7:isDepthR9i-262R5r90R11r88R36ajR37:0:1nhggoR14oR15i1271R16i1479R17R34gR19r3R20jR21:4:1aoR14oR15i1278R16i1291R17R34gR19r3R20jR21:7:2oR0y3:valR9i-285R5r22R11r63goR14oR15i1288R16i1290R17R34gR19r63R20jR21:0:1jR32:3:1d0ggoR14oR15i1298R16i1426R17R34gR19r3R20jR21:20:3R46ahoR14oR15i1305R16i1426R17R34gR19r3R20jR21:13:3oR0R47R9i-286R5r22R11r219goR14oR15i1315R16i1337R17R34gR19jR4:14:2r219jR48:0:1zR20jR21:5:3r224oR14oR15i1315R16i1330R17R34gR19r219R20jR21:5:3r227oR14oR15i1315R16i1323R17R34gR19r219R20jR21:6:2r230oR14oR15i1316R16i1323R17R34gR19r219R20jR21:1:1r233ggoR14oR15i1326R16i1330R17R34gR19r219R20jR21:0:1jR32:2:1i1ggoR14oR15i1330R16i1337R17R34gR19r219R20jR21:1:1r233ggoR14oR15i1346R16i1426R17R34gR19r63R20jR21:5:3jR23:20:1r227oR14oR15i1346R16i1349R17R34gR19r63R20jR21:1:1r589goR14oR15i1353R16i1426R17R34gR19r63R20jR21:5:3r262oR14oR15i1353R16i1401R17R34gR19r63R20jR21:8:2oR14oR15i1353R16i1359R17R34gR19jR4:13:1aoR3r63R12aoR0R44R11jR4:5:2i4r16ghghR20jR21:2:1jR31:53:0gaoR14oR15i1360R16i1400R17R34gR19r122R20jR21:8:2oR14oR15i1360R16i1367R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i1360R16i1367R17R34gR19r131R20jR21:1:1r140goR14oR15i1372R16i1399R17R34gR19jR4:5:2i2r16R20jR21:5:3r227oR14oR15i1372R16i1380R17R34gR19r26R20jR21:1:1r27goR14oR15i1383R16i1399R17R34gR19r261R20jR21:5:3r262oR14oR15i1383R16i1388R17R34gR19r261R20jR21:1:1r265goR14oR15i1391R16i1399R17R34gR19r63R20jR21:8:2oR14oR15i1391R16i1396R17R34gR19jR4:13:1ar272hR20jR21:2:1r276gaoR14oR15i1397R16i1398R17R34gR19r219R20jR21:1:1r600ghggghghgoR14oR15i1404R16i1426R17R34gR19r63R20jR21:16:2oR14oR15i1404R16i1410R17R34gR19r534R20jR21:1:1r535goR14oR15i1411R16i1425R17R34gR19r219R20jR21:10:3oR14oR15i1411R16i1416R17R34gR19r88R20jR21:5:3r541oR14oR15i1411R16i1412R17R34gR19r219R20jR21:1:1r600goR14oR15i1415R16i1416R17R34gR19r219R20jR21:0:1jR32:2:1zggoR14oR15i1419R16i1421R17R34gR19r219R20jR21:6:2r230oR14oR15i1420R16i1421R17R34gR19r219R20jR21:1:1r600ggoR14oR15i1424R16i1425R17R34gR19r219R20jR21:1:1r600gggggggoR14oR15i1433R16i1472R17R34gR19r45R20jR21:5:3r18oR14oR15i1433R16i1445R17R34gR19r45R20jR21:1:1r44goR14oR15i1448R16i1472R17R34gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i1448R16i1452R17R34gR19jR4:13:1aoR3r723R12aoR0R44R11r63ghghR20jR21:2:1jR31:52:0gaoR14oR15i1453R16i1471R17R34gR19r63R20jR21:8:2oR14oR15i1453R16i1456R17R34gR19jR4:13:1aoR3r63R12aoR0R41R11r63gr466hghR20jR21:2:1r468gaoR14oR15i1453R16i1456R17R34gR19r63R20jR21:1:1r589goR14oR15i1461R16i1470R17R34gR19r63R20jR21:0:1jR32:3:1d0.9999999ghghgghgoR14oR15i1485R16i1684R17R34gR19r3R20jR21:4:1aoR14oR15i1492R16i1521R17R34gR19r3R20jR21:7:2oR0R30R9i-287R5r22R11jR4:5:2i4r16goR14oR15i1504R16i1520R17R34gR19r762R20jR21:8:2oR14oR15i1504R16i1508R17R34gR19r54R20jR21:2:1r55gaoR14oR15i1509R16i1510R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i1512R16i1513R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i1515R16i1516R17R34gR19r63R20jR21:0:1jR32:3:1zgoR14oR15i1518R16i1519R17R34gR19r63R20jR21:0:1jR32:3:1zghggoR14oR15i1528R16i1650R17R34gR19r3R20jR21:20:3R46ahoR14oR15i1535R16i1650R17R34gR19r3R20jR21:13:3oR0R47R9i-288R5r22R11r219goR14oR15i1545R16i1567R17R34gR19jR4:14:2r219jR48:0:1zR20jR21:5:3r224oR14oR15i1545R16i1560R17R34gR19r219R20jR21:5:3r227oR14oR15i1545R16i1553R17R34gR19r219R20jR21:6:2r230oR14oR15i1546R16i1553R17R34gR19r219R20jR21:1:1r233ggoR14oR15i1556R16i1560R17R34gR19r219R20jR21:0:1jR32:2:1i1ggoR14oR15i1560R16i1567R17R34gR19r219R20jR21:1:1r233ggoR14oR15i1576R16i1650R17R34gR19r762R20jR21:5:3jR23:20:1r227oR14oR15i1576R16i1581R17R34gR19r762R20jR21:1:1r761goR14oR15i1585R16i1650R17R34gR19r122R20jR21:5:3r262oR14oR15i1585R16i1625R17R34gR19r122R20jR21:8:2oR14oR15i1585R16i1592R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i1585R16i1592R17R34gR19r131R20jR21:1:1r140goR14oR15i1597R16i1624R17R34gR19jR4:5:2i2r16R20jR21:5:3r227oR14oR15i1597R16i1605R17R34gR19r26R20jR21:1:1r27goR14oR15i1608R16i1624R17R34gR19r261R20jR21:5:3r262oR14oR15i1608R16i1613R17R34gR19r261R20jR21:1:1r265goR14oR15i1616R16i1624R17R34gR19r63R20jR21:8:2oR14oR15i1616R16i1621R17R34gR19jR4:13:1ar272hR20jR21:2:1r276gaoR14oR15i1622R16i1623R17R34gR19r219R20jR21:1:1r792ghggghgoR14oR15i1628R16i1650R17R34gR19r63R20jR21:16:2oR14oR15i1628R16i1634R17R34gR19r534R20jR21:1:1r535goR14oR15i1635R16i1649R17R34gR19r219R20jR21:10:3oR14oR15i1635R16i1640R17R34gR19r88R20jR21:5:3r541oR14oR15i1635R16i1636R17R34gR19r219R20jR21:1:1r792goR14oR15i1639R16i1640R17R34gR19r219R20jR21:0:1jR32:2:1zggoR14oR15i1643R16i1645R17R34gR19r219R20jR21:6:2r230oR14oR15i1644R16i1645R17R34gR19r219R20jR21:1:1r792ggoR14oR15i1648R16i1649R17R34gR19r219R20jR21:1:1r792gggggggoR14oR15i1657R16i1677R17R34gR19r45R20jR21:5:3r18oR14oR15i1657R16i1669R17R34gR19r45R20jR21:1:1r44goR14oR15i1672R16i1677R17R34gR19r762R20jR21:1:1r761gghgggoR14oR15i1689R16i1897R17R34gR19r3R20jR21:10:3oR14oR15i1693R16i1706R17R34gR19r88R20jR21:1:1oR0y13:hasFixedColorR9i-265R5r90R11r88R36ajR37:0:1nhggoR14oR15i1709R16i1897R17R34gR19r3R20jR21:4:1aoR14oR15i1716R16i1749R17R34gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i1716R16i1732R17R34gR19r919R20jR21:9:2oR14oR15i1716R16i1728R17R34gR19r45R20jR21:1:1r44gajy14:hxsl.Component:0:0jR63:1:0jR63:2:0hgoR14oR15i1735R16i1749R17R34gR19jR4:5:2i3r16R20jR21:9:2oR14oR15i1735R16i1745R17R34gR19jR4:5:2i4r16R20jR21:1:1oR0y10:fixedColorR9i-267R5r90R11r935ggar926r927r928hggoR14oR15i1756R16i1890R17R34gR19r3R20jR21:10:3oR14oR15i1760R16i1776R17R34gR19r88R20jR21:1:1oR0y16:smoothFixedColorR9i-266R5r90R11r88R36ajR37:0:1nhggoR14oR15i1785R16i1815R17R34gR19r63R20jR21:5:3jR23:20:1r262oR14oR15i1785R16i1799R17R34gR19r63R20jR21:9:2oR14oR15i1785R16i1797R17R34gR19r45R20jR21:1:1r44gajR63:3:0hgoR14oR15i1803R16i1815R17R34gR19r63R20jR21:9:2oR14oR15i1803R16i1813R17R34gR19r935R20jR21:1:1r936gar958hggoR14oR15i1833R16i1890R17R34gR19r63R20jR21:5:3r18oR14oR15i1833R16i1847R17R34gR19r63R20jR21:9:2oR14oR15i1833R16i1845R17R34gR19r45R20jR21:1:1r44gar958hgoR14oR15i1850R16i1890R17R34gR19r63R20jR21:5:3r262oR14oR15i1850R16i1862R17R34gR19r63R20jR21:9:2oR14oR15i1850R16i1860R17R34gR19r935R20jR21:1:1r936gar958hgoR14oR15i1865R16i1890R17R34gR19r63R20jR21:8:2oR14oR15i1865R16i1870R17R34gR19jR4:13:1aoR3r63R12aoR0R44R11r88ghghR20jR21:2:1r276gaoR14oR15i1871R16i1889R17R34gR19r88R20jR21:5:3jR23:7:0oR14oR15i1871R16i1885R17R34gR19r63R20jR21:9:2oR14oR15i1871R16i1883R17R34gR19r45R20jR21:1:1r44gar958hgoR14oR15i1888R16i1889R17R34gR19r63R20jR21:0:1jR32:3:1zgghgggghgnghgR12ahgoR3r100R5jR6:3:0R7r111R13oR14oR15i1949R16i2160R17R34gR19r3R20jR21:4:1aoR14oR15i1955R16i1996R17R34gR19r3R20jR21:7:2oR0y5:depthR9i-289R5r22R11r63goR14oR15i1967R16i1995R17R34gR19r63R20jR21:8:2oR14oR15i1967R16i1973R17R34gR19r639R20jR21:2:1r640gaoR14oR15i1974R16i1994R17R34gR19r122R20jR21:8:2oR14oR15i1974R16i1986R17R34gR19jR4:13:1aoR3r122R12aoR0R41R11r131gr132hghR20jR21:2:1r135gaoR14oR15i1974R16i1986R17R34gR19r131R20jR21:1:1oR0y12:depthTextureR9i-260R5r90R11r131ggoR14oR15i1991R16i1993R17R34gR19r109R20jR21:1:1oR0R25R9i-273R5r22R11r109gghghggoR14oR15i2001R16i2036R17R34gR19r3R20jR21:7:2oR0y3:uv2R9i-290R5r22R11jR4:5:2i2r16goR14oR15i2011R16i2035R17R34gR19r1059R20jR21:5:3r262oR14oR15i2011R16i2021R17R34gR19r109R20jR21:3:1oR14oR15i2012R16i2020R17R34gR19r109R20jR21:5:3r344oR14oR15i2012R16i2014R17R34gR19r109R20jR21:1:1r1051goR14oR15i2017R16i2020R17R34gR19r63R20jR21:0:1jR32:3:1d0.5gggoR14oR15i2024R16i2035R17R34gR19jR4:5:2i2r16R20jR21:8:2oR14oR15i2024R16i2028R17R34gR19jR4:13:1ahR20jR21:2:1jR31:38:0gaoR14oR15i2029R16i2030R17R34gR19r63R20jR21:0:1jR32:3:1i2goR14oR15i2032R16i2034R17R34gR19r63R20jR21:0:1jR32:3:1i-2ghgggoR14oR15i2041R16i2096R17R34gR19r3R20jR21:7:2oR0y4:tempR9i-291R5r22R11r122goR14oR15i2052R16i2095R17R34gR19r122R20jR21:5:3r262oR14oR15i2052R16i2071R17R34gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i2052R16i2056R17R34gR19r54R20jR21:2:1r55gaoR14oR15i2057R16i2060R17R34gR19r1059R20jR21:1:1r1058goR14oR15i2062R16i2067R17R34gR19r63R20jR21:1:1r1027goR14oR15i2069R16i2070R17R34gR19r63R20jR21:0:1jR32:3:1i1ghgoR14oR15i2074R16i2095R17R34gR19jR4:7:0R20jR21:1:1oR0y21:cameraInverseViewProjR9i-258R5r90R11r1121ggggoR14oR15i2101R16i2134R17R34gR19r3R20jR21:7:2oR0y8:originWSR9i-292R5r22R11jR4:5:2i3r16goR14oR15i2116R16i2133R17R34gR19r1129R20jR21:5:3jR23:2:0oR14oR15i2116R16i2124R17R34gR19r1129R20jR21:9:2oR14oR15i2116R16i2120R17R34gR19r122R20jR21:1:1r1098gar926r927r928hgoR14oR15i2127R16i2133R17R34gR19r63R20jR21:9:2oR14oR15i2127R16i2131R17R34gR19r122R20jR21:1:1r1098gar958hgggoR14oR15i2139R16i2154R17R34gR19r3R20jR21:12:1oR14oR15i2146R16i2154R17R34gR19r1129R20jR21:1:1r1128gghgR12ar1051hghy4:varsar29r42r21r1122r140r1047r233r580r535r265r910r945r936r89oR0y9:hasNormalR9i-269R5r90R11r88R36ajR37:0:1nhgr205r5r76r111hg";
h3d_shader_ColorAdd.SRC = "oy4:namey19:h3d.shader.ColorAddy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:1:0y3:refoR0y8:fragmenty2:idi-328R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini164y3:maxi199y4:filey76:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FColorAdd.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i170R16i193R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:20:1jR23:0:0oR14oR15i170R16i184R17R18gR19r17R20jR21:9:2oR14oR15i170R16i180R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y10:pixelColorR9i-326R5jR10:4:0R11r24ggajy14:hxsl.Component:0:0jR25:1:0jR25:2:0hgoR14oR15i188R16i193R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y5:colorR9i-327R5jR10:2:0R11r35ggghgR12ahghy4:varsar25r36r5hg";
h3d_shader_ColorKey.SRC = "oy4:namey19:h3d.shader.ColorKeyy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:1:0y3:refoR0y8:fragmenty2:idi-331R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini167y3:maxi260y4:filey76:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FColorKey.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i173R16i209R17R18gR19r3R20jR21:7:2oR0y5:cdiffR9i-332R5jR10:4:0R11jR4:5:2i4jy12:hxsl.VecType:1:0goR14oR15i185R16i208R17R18gR19r19R20jR21:5:3jy16:haxe.macro.Binop:3:0oR14oR15i185R16i197R17R18gR19jR4:5:2i4r18R20jR21:1:1oR0y12:textureColorR9i-330R5r17R11r25ggoR14oR15i200R16i208R17R18gR19jR4:5:2i4r18R20jR21:1:1oR0y8:colorKeyR9i-329R5jR10:2:0R11r30ggggoR14oR15i214R16i254R17R18gR19r3R20jR21:10:3oR14oR15i218R16i244R17R18gR19jR4:2:0R20jR21:5:3jR24:9:0oR14oR15i218R16i234R17R18gR19jR4:3:0R20jR21:8:2oR14oR15i218R16i223R17R18gR19jR4:13:1aoR3r44R12aoR0y1:_R11r19goR0y1:bR11jR4:5:2i4r18ghghR20jR21:2:1jy12:hxsl.TGlobal:29:0gaoR14oR15i218R16i223R17R18gR19r19R20jR21:1:1r16goR14oR15i228R16i233R17R18gR19r19R20jR21:1:1r16ghgoR14oR15i237R16i244R17R18gR19r44R20jR21:0:1jy10:hxsl.Const:3:1d1e-005ggoR14oR15i247R16i254R17R18gR19r3R20jR21:11:0gnghgR12ahghy4:varsar31r26r5hg";
h3d_shader_ColorMatrix.SRC = "oy4:namey22:h3d.shader.ColorMatrixy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:1:0y3:refoR0y8:fragmenty2:idi-335R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini168y3:maxi263y4:filey79:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FColorMatrix.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i174R16i257R17R18gR19jR4:5:2i4jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i174R16i184R17R18gR19r17R20jR21:1:1oR0y10:pixelColorR9i-333R5jR10:4:0R11r17ggoR14oR15i187R16i257R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i187R16i191R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:40:0gaoR14oR15i193R16i231R17R18gR19jR4:5:2i3r16R20jR21:9:2oR14oR15i193R16i227R17R18gR19jR4:5:2i4r16R20jR21:3:1oR14oR15i194R16i226R17R18gR19r39R20jR21:5:3jR23:1:0oR14oR15i194R16i217R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i194R16i198R17R18gR19r30R20jR21:2:1r31gaoR14oR15i199R16i213R17R18gR19jR4:5:2i3r16R20jR21:9:2oR14oR15i199R16i209R17R18gR19r17R20jR21:1:1r21gajy14:hxsl.Component:0:0jR26:1:0jR26:2:0hgoR14oR15i214R16i216R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1d1ghgoR14oR15i220R16i226R17R18gR19jR4:7:0R20jR21:1:1oR0y6:matrixR9i-334R5jR10:2:0R11r69ggggar57r58r59hgoR14oR15i233R16i256R17R18gR19r63R20jR21:9:2oR14oR15i233R16i254R17R18gR19r39R20jR21:3:1oR14oR15i234R16i253R17R18gR19r39R20jR21:5:3r42oR14oR15i234R16i244R17R18gR19r17R20jR21:1:1r21goR14oR15i247R16i253R17R18gR19r69R20jR21:1:1r70gggajR26:3:0hghgghgR12ahghy4:varsar21r70r5hg";
h3d_shader_DirLight.SRC = "oy4:namey19:h3d.shader.DirLighty4:funsaoy3:retjy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y4:kindjy17:hxsl.FunctionKind:3:0y3:refoR0y12:calcLightingy2:idi-51R6jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r4y4:argsahghgy4:exproy1:poy3:mini451y3:maxi785y4:filey76:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FDirLight.hxgy1:tjR4:0:0y1:ejy13:hxsl.TExprDef:4:1aoR15oR16i457R17i510R18R19gR20r14R21jR22:7:2oR0y4:diffR10i-54R6jR11:4:0R12jR4:3:0goR15oR16i468R17i509R18R19gR20r20R21jR22:8:2oR15oR16i468R17i501R18R19gR20jR4:13:1aoR3r20R13aoR0y1:_R12r20goR0y1:bR12r20ghghR21jR22:2:1jy12:hxsl.TGlobal:22:0gaoR15oR16i468R17i501R18R19gR20r20R21jR22:8:2oR15oR16i468R17i485R18R19gR20jR4:13:1aoR3r20R13aoR0R24R12jR4:5:2i3r3goR0R25R12jR4:5:2i3r3ghghR21jR22:2:1jR26:29:0gaoR15oR16i468R17i485R18R19gR20r42R21jR22:1:1oR0y17:transformedNormalR10i-47R6r19R12r42ggoR15oR16i490R17i500R18R19gR20jR4:5:2i3r3R21jR22:6:2jy15:haxe.macro.Unop:3:0oR15oR16i491R17i500R18R19gR20r55R21jR22:1:1oR0y9:directionR10i-41R6jR11:2:0R12r55ggghgoR15oR16i506R17i508R18R19gR20r20R21jR22:0:1jy10:hxsl.Const:3:1d0ghggoR15oR16i515R17i561R18R19gR20r14R21jR22:10:3oR15oR16i519R17i534R18R19gR20jR4:2:0R21jR22:6:2jR28:2:0oR15oR16i520R17i534R18R19gR20r74R21jR22:1:1oR0y14:enableSpecularR10i-42R6r60R12r74y10:qualifiersajy17:hxsl.VarQualifier:0:1nhgggoR15oR16i542R17i561R18R19gR20r14R21jR22:12:1oR15oR16i549R17i561R18R19gR20jR4:5:2i3r3R21jR22:5:3jy16:haxe.macro.Binop:1:0oR15oR16i549R17i554R18R19gR20r87R21jR22:1:1oR0y5:colorR10i-40R6r60R12r87ggoR15oR16i557R17i561R18R19gR20r20R21jR22:1:1r18gggngoR15oR16i567R17i625R18R19gR20r14R21jR22:7:2oR0y1:rR10i-55R6r19R12r44goR15oR16i575R17i624R18R19gR20r44R21jR22:8:2oR15oR16i575R17i612R18R19gR20jR4:13:1aoR3r44R13aoR0R24R12r44ghghR21jR22:2:1jR26:31:0gaoR15oR16i575R17i612R18R19gR20r44R21jR22:8:2oR15oR16i575R17i582R18R19gR20jR4:13:1aoR3r44R13aoR0y1:aR12r44goR0R25R12r44ghghR21jR22:2:1jR26:32:0gaoR15oR16i583R17i592R18R19gR20r55R21jR22:1:1r59goR15oR16i594R17i611R18R19gR20r42R21jR22:1:1r51ghghggoR15oR16i630R17i713R18R19gR20r14R21jR22:7:2oR0y9:specValueR10i-56R6r19R12r20goR15oR16i646R17i712R18R19gR20r20R21jR22:8:2oR15oR16i646R17i704R18R19gR20jR4:13:1aoR3r20R13aoR0R24R12r20gr29hghR21jR22:2:1r31gaoR15oR16i646R17i704R18R19gR20r20R21jR22:8:2oR15oR16i646R17i647R18R19gR20jR4:13:1aoR3r20R13aoR0R24R12r44gr43hghR21jR22:2:1r46gaoR15oR16i646R17i647R18R19gR20r44R21jR22:1:1r101goR15oR16i652R17i703R18R19gR20r44R21jR22:8:2oR15oR16i652R17i691R18R19gR20jR4:13:1aoR3r44R13aoR0R24R12jR4:5:2i3r3ghghR21jR22:2:1r111gaoR15oR16i652R17i691R18R19gR20r172R21jR22:3:1oR15oR16i653R17i690R18R19gR20r172R21jR22:5:3jR34:3:0oR15oR16i653R17i668R18R19gR20jR4:5:2i3r3R21jR22:1:1oR0y8:positionR10i-44R6jR11:0:0R12r183y6:parentoR0y6:cameraR10i-43R6r185R12jR4:12:1ar184hgggoR15oR16i671R17i690R18R19gR20jR4:5:2i3r3R21jR22:1:1oR0y19:transformedPositionR10i-48R6r19R12r192gggghghgoR15oR16i709R17i711R18R19gR20r20R21jR22:0:1jR30:3:1d0ghggoR15oR16i718R17i779R18R19gR20r14R21jR22:12:1oR15oR16i725R17i779R18R19gR20jR4:5:2i3r3R21jR22:5:3r88oR15oR16i725R17i730R18R19gR20r87R21jR22:1:1r91goR15oR16i733R17i779R18R19gR20jR4:5:2i3r3R21jR22:3:1oR15oR16i734R17i778R18R19gR20r215R21jR22:5:3jR34:0:0oR15oR16i734R17i738R18R19gR20r20R21jR22:1:1r18goR15oR16i741R17i778R18R19gR20r215R21jR22:5:3r88oR15oR16i741R17i750R18R19gR20r215R21jR22:1:1oR0y9:specColorR10i-50R6r19R12r215ggoR15oR16i753R17i778R18R19gR20r20R21jR22:8:2oR15oR16i753R17i756R18R19gR20jR4:13:1aoR3r20R13aoR0R37R12r20gr29hghR21jR22:2:1jR26:8:0gaoR15oR16i757R17i766R18R19gR20r20R21jR22:1:1r138goR15oR16i768R17i777R18R19gR20r20R21jR22:1:1oR0y9:specPowerR10i-49R6r19R12r20gghgggggghgR13ahgoR3r14R6jR7:0:0R8oR0y6:vertexR10i-52R6r7R12jR4:13:1aoR3r14R13ahghgR14oR15oR16i809R17i853R18R19gR20r14R21jR22:4:1aoR15oR16i815R17i847R18R19gR20jR4:5:2i3r3R21jR22:5:3jR34:20:1r218oR15oR16i815R17i829R18R19gR20r267R21jR22:9:2oR15oR16i815R17i825R18R19gR20jR4:5:2i3r3R21jR22:1:1oR0y10:lightColorR10i-45R6r19R12r273ggajy14:hxsl.Component:0:0jR47:1:0jR47:2:0hgoR15oR16i833R17i847R18R19gR20r4R21jR22:8:2oR15oR16i833R17i845R18R19gR20r11R21jR22:1:1r6gahgghgR13ahgoR3r14R6jR7:1:0R8oR0y8:fragmentR10i-53R6r7R12jR4:13:1aoR3r14R13ahghgR14oR15oR16i879R17i928R18R19gR20r14R21jR22:4:1aoR15oR16i885R17i922R18R19gR20jR4:5:2i3r3R21jR22:5:3jR34:20:1r218oR15oR16i885R17i904R18R19gR20r303R21jR22:9:2oR15oR16i885R17i900R18R19gR20jR4:5:2i3r3R21jR22:1:1oR0y15:lightPixelColorR10i-46R6r19R12r309ggar277r278r279hgoR15oR16i908R17i922R18R19gR20r4R21jR22:8:2oR15oR16i908R17i920R18R19gR20r11R21jR22:1:1r6gahgghgR13ahghy4:varsar91r59r78r186r274r310r51r193r245r226r6r257r293hg";
h3d_shader_LineShader.SRC = "oy4:namey21:h3d.shader.LineShadery4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:2:0y3:refoR0y8:__init__y2:idi-153R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini648y3:maxi958y4:filey78:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FLineShader.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i654R16i953R17R18gR19r3R20jR21:4:1aoR14oR15i661R16i710R17R18gR19r3R20jR21:7:2oR0y3:dirR9i-155R5jR10:4:0R11jR4:5:2i3jy12:hxsl.VecType:1:0goR14oR15i671R16i709R17R18gR19r22R20jR21:5:3jy16:haxe.macro.Binop:1:0oR14oR15i671R16i683R17R18gR19jR4:5:2i3r21R20jR21:1:1oR0y6:normalR9i-143R5jR10:1:0R11r28y6:parentoR0y5:inputR9i-141R5r30R11jR4:12:1aoR0y8:positionR9i-142R5r30R11jR4:5:2i3r21R26r31gr29oR0y2:uvR9i-144R5r30R11jR4:5:2i2r21R26r31ghgggoR14oR15i686R16i709R17R18gR19jR4:6:0R20jR21:8:2oR14oR15i686R16i702R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:48:0gaoR14oR15i686R16i702R17R18gR19jR4:7:0R20jR21:1:1oR0y9:modelViewR9i-140R5jR10:0:0R11r51y10:qualifiersajy17:hxsl.VarQualifier:3:0hR26oR0y6:globalR9i-138R5r53R11jR4:12:1aoR0y9:pixelSizeR9i-139R5r53R11jR4:5:2i2r21R26r56gr52hggghgggoR14oR15i730R16i783R17R18gR19jR4:5:2i4r21R20jR21:5:3jR24:4:0oR14oR15i730R16i734R17R18gR19r67R20jR21:1:1oR0y4:pdirR9i-152R5r20R11r67ggoR14oR15i737R16i783R17R18gR19jR4:5:2i4r21R20jR21:5:3r25oR14oR15i737R16i769R17R18gR19jR4:5:2i4r21R20jR21:8:2oR14oR15i737R16i741R17R18gR19jR4:13:1ahR20jR21:2:1jR30:40:0gaoR14oR15i742R16i765R17R18gR19r22R20jR21:5:3r25oR14oR15i742R16i745R17R18gR19r22R20jR21:1:1r19goR14oR15i748R16i765R17R18gR19r41R20jR21:8:2oR14oR15i748R16i752R17R18gR19jR4:13:1ahR20jR21:2:1r46gaoR14oR15i753R16i764R17R18gR19r51R20jR21:1:1oR0y4:viewR9i-135R5r53R11r51R26oR0y6:cameraR9i-134R5r53R11jR4:12:1ar101oR0y4:projR9i-136R5r53R11r51R26r102goR0y8:viewProjR9i-137R5r53R11r51R26r102ghggghggoR14oR15i767R16i768R17R18gR19jR4:3:0R20jR21:0:1jy10:hxsl.Const:3:1i1ghgoR14oR15i772R16i783R17R18gR19r51R20jR21:1:1r104gggoR14oR15i790R16i844R17R18gR19jR4:5:2i2r21R20jR21:5:3jR24:20:1r25oR14oR15i790R16i797R17R18gR19r123R20jR21:9:2oR14oR15i790R16i794R17R18gR19r67R20jR21:1:1r71gajy14:hxsl.Component:0:0jR42:1:0hgoR14oR15i801R16i844R17R18gR19r112R20jR21:5:3jR24:2:0oR14oR15i801R16i802R17R18gR19r112R20jR21:0:1jR41:3:1i1goR14oR15i805R16i844R17R18gR19r112R20jR21:8:2oR14oR15i805R16i809R17R18gR19jR4:13:1aoR3r112R12aoR0y5:valueR11r112ghghR20jR21:2:1jR30:13:0gaoR14oR15i810R16i843R17R18gR19r112R20jR21:5:3jR24:0:0oR14oR15i810R16i825R17R18gR19r112R20jR21:5:3r25oR14oR15i810R16i816R17R18gR19r112R20jR21:9:2oR14oR15i810R16i814R17R18gR19r67R20jR21:1:1r71gar131hgoR14oR15i819R16i825R17R18gR19r112R20jR21:9:2oR14oR15i819R16i823R17R18gR19r67R20jR21:1:1r71gar131hggoR14oR15i828R16i843R17R18gR19r112R20jR21:5:3r25oR14oR15i828R16i834R17R18gR19r112R20jR21:9:2oR14oR15i828R16i832R17R18gR19r67R20jR21:1:1r71gar132hgoR14oR15i837R16i843R17R18gR19r112R20jR21:9:2oR14oR15i837R16i841R17R18gR19r67R20jR21:1:1r71gar132hggghgggoR14oR15i851R16i904R17R18gR19jR4:5:2i3r21R20jR21:5:3jR24:20:1r155oR14oR15i851R16i870R17R18gR19r196R20jR21:1:1oR0y19:transformedPositionR9i-148R5r20R11r196ggoR14oR15i874R16i904R17R18gR19r22R20jR21:5:3r25oR14oR15i874R16i890R17R18gR19r22R20jR21:5:3r25oR14oR15i874R16i877R17R18gR19r22R20jR21:1:1r19goR14oR15i880R16i890R17R18gR19r112R20jR21:9:2oR14oR15i880R16i888R17R18gR19r36R20jR21:1:1r35gar131hggoR14oR15i893R16i904R17R18gR19r112R20jR21:1:1oR0y11:lengthScaleR9i-150R5jR10:2:0R11r112ggggoR14oR15i911R16i946R17R18gR19jR4:5:2i3r21R20jR21:5:3r68oR14oR15i911R16i928R17R18gR19r226R20jR21:1:1oR0y17:transformedNormalR9i-147R5r20R11r226ggoR14oR15i931R16i946R17R18gR19r22R20jR21:8:2oR14oR15i931R16i934R17R18gR19jR4:13:1aoR3r22R12aoR0y1:_R11r22ghghR20jR21:2:1jR30:31:0gaoR14oR15i931R16i934R17R18gR19r22R20jR21:1:1r19ghgghghgR12ahgoR3r3R5jR6:0:0R7oR0y6:vertexR9i-154R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i982R16i1110R17R18gR19r3R20jR21:4:1aoR14oR15i988R16i1104R17R18gR19jR4:5:2i2r21R20jR21:5:3jR24:20:1r155oR14oR15i988R16i1008R17R18gR19r263R20jR21:9:2oR14oR15i988R16i1005R17R18gR19jR4:5:2i4r21R20jR21:1:1oR0y17:projectedPositionR9i-149R5r20R11r269ggar131r132hgoR14oR15i1012R16i1104R17R18gR19jR4:5:2i2r21R20jR21:5:3r25oR14oR15i1012R16i1096R17R18gR19r276R20jR21:5:3r25oR14oR15i1012R16i1077R17R18gR19jR4:5:2i2r21R20jR21:5:3r25oR14oR15i1012R16i1055R17R18gR19r281R20jR21:5:3r25oR14oR15i1012R16i1034R17R18gR19r281R20jR21:3:1oR14oR15i1013R16i1033R17R18gR19r281R20jR21:5:3r25oR14oR15i1013R16i1020R17R18gR19jR4:5:2i2r21R20jR21:9:2oR14oR15i1013R16i1017R17R18gR19r67R20jR21:1:1r71gar132r131hgoR14oR15i1023R16i1033R17R18gR19jR4:5:2i2r21R20jR21:8:2oR14oR15i1023R16i1027R17R18gR19jR4:13:1ahR20jR21:2:1jR30:38:0gaoR14oR15i1028R16i1029R17R18gR19r112R20jR21:0:1jR41:3:1i1goR14oR15i1030R16i1032R17R18gR19r112R20jR21:0:1jR41:3:1i-1ghgggoR14oR15i1037R16i1055R17R18gR19r112R20jR21:3:1oR14oR15i1038R16i1054R17R18gR19r112R20jR21:5:3jR24:3:0oR14oR15i1038R16i1048R17R18gR19r112R20jR21:9:2oR14oR15i1038R16i1046R17R18gR19r36R20jR21:1:1r35gar132hgoR14oR15i1051R16i1054R17R18gR19r112R20jR21:0:1jR41:3:1d0.5ggggoR14oR15i1058R16i1077R17R18gR19r112R20jR21:9:2oR14oR15i1058R16i1075R17R18gR19r269R20jR21:1:1r270gajR42:2:0hggoR14oR15i1080R16i1096R17R18gR19r59R20jR21:1:1r58ggoR14oR15i1099R16i1104R17R18gR19r112R20jR21:1:1oR0y5:widthR9i-151R5r220R11r112gggghgR12ahghy4:varsar102r56r31oR0y6:outputR9i-145R5r20R11jR4:12:1aoR0R28R9i-146R5r20R11jR4:5:2i4r21R26r358ghgr229r200r270r219r351r71r5r253hg";
h3d_shader_NormalMap.SRC = "oy4:namey20:h3d.shader.NormalMapy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-87R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini580y3:maxi652y4:filey77:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FNormalMap.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i586R16i646R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i586R16i604R17R18gR19r17R20jR21:1:1oR0y18:transformedTangentR9i-86R5jR10:3:0R11r17ggoR14oR15i607R16i646R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:1:0oR14oR15i607R16i620R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y7:tangentR9i-81R5jR10:1:0R11r30y6:parentoR0y5:inputR9i-79R5r32R11jR4:12:1aoR0y6:normalR9i-80R5r32R11jR4:5:2i3r16R26r33gr31hgggoR14oR15i623R16i646R17R18gR19jR4:6:0R20jR21:8:2oR14oR15i623R16i639R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:48:0gaoR14oR15i623R16i639R17R18gR19jR4:7:0R20jR21:1:1oR0y9:modelViewR9i-78R5jR10:0:0R11r51y10:qualifiersajy17:hxsl.VarQualifier:3:0hR26oR0y6:globalR9i-77R5r53R11jR4:12:1ar52hggghggghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-88R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i678R16i946R17R18gR19r3R20jR21:4:1aoR14oR15i684R16i710R17R18gR19r3R20jR21:7:2oR0y1:nR9i-89R5jR10:4:0R11jR4:5:2i3r16goR14oR15i692R16i709R17R18gR19r79R20jR21:1:1oR0y17:transformedNormalR9i-85R5r78R11r79gggoR14oR15i715R16i764R17R18gR19r3R20jR21:7:2oR0y2:nfR9i-90R5r78R11jR4:5:2i3r16goR14oR15i724R16i763R17R18gR19r88R20jR21:8:2oR14oR15i724R16i736R17R18gR19jR4:13:1aoR3r88R12aoR0y5:valueR11jR4:5:2i4r16ghghR20jR21:2:1jR29:55:0gaoR14oR15i737R16i762R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i737R16i744R17R18gR19jR4:13:1aoR3r104R12aoR0y1:_R11jR4:10:0goR0y2:uvR11jR4:5:2i2r16ghghR20jR21:2:1jR29:33:0gaoR14oR15i737R16i744R17R18gR19r111R20jR21:1:1oR0y7:textureR9i-82R5jR10:2:0R11r111ggoR14oR15i749R16i761R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y12:calculatedUVR9i-83R5r78R11r125gghghggoR14oR15i769R16i811R17R18gR19r3R20jR21:7:2oR0y4:tanXR9i-91R5r78R11r26goR14oR15i780R16i810R17R18gR19r26R20jR21:8:2oR14oR15i780R16i798R17R18gR19jR4:13:1aoR3r26R12aoR0R39R11r17ghghR20jR21:2:1jR29:31:0gaoR14oR15i780R16i798R17R18gR19r17R20jR21:1:1r21ghggoR14oR15i816R16i828R17R18gR19jR4:3:0R20jR21:5:3jR23:20:1r27oR14oR15i816R16i822R17R18gR19r153R20jR21:9:2oR14oR15i816R16i820R17R18gR19r26R20jR21:1:1r133gajy14:hxsl.Component:0:0hgoR14oR15i826R16i828R17R18gR19r153R20jR21:0:1jy10:hxsl.Const:3:1i-1ggoR14oR15i834R16i859R17R18gR19r3R20jR21:7:2oR0y4:tanYR9i-92R5r78R11r26goR14oR15i845R16i858R17R18gR19r26R20jR21:8:2oR14oR15i845R16i846R17R18gR19jR4:13:1aoR3r26R12aoR0R39R11r79goR0y1:bR11r26ghghR20jR21:2:1jR29:30:0gaoR14oR15i845R16i846R17R18gR19r79R20jR21:1:1r77goR14oR15i853R16i857R17R18gR19r26R20jR21:1:1r133ghggoR14oR15i864R16i934R17R18gR19r79R20jR21:5:3r18oR14oR15i864R16i881R17R18gR19r79R20jR21:1:1r82goR14oR15i884R16i934R17R18gR19r26R20jR21:8:2oR14oR15i884R16i922R17R18gR19jR4:13:1aoR3r26R12aoR0R39R11jR4:5:2i3r16ghghR20jR21:2:1r143gaoR14oR15i884R16i922R17R18gR19r205R20jR21:3:1oR14oR15i885R16i921R17R18gR19r205R20jR21:5:3jR23:0:0oR14oR15i885R16i910R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:3:0oR14oR15i885R16i896R17R18gR19r26R20jR21:5:3r27oR14oR15i885R16i889R17R18gR19r153R20jR21:9:2oR14oR15i885R16i887R17R18gR19r88R20jR21:1:1r87gar161hgoR14oR15i892R16i896R17R18gR19r26R20jR21:1:1r133ggoR14oR15i899R16i910R17R18gR19r26R20jR21:5:3r27oR14oR15i899R16i903R17R18gR19r153R20jR21:9:2oR14oR15i899R16i901R17R18gR19r88R20jR21:1:1r87gajR44:1:0hgoR14oR15i906R16i910R17R18gR19r26R20jR21:1:1r170gggoR14oR15i913R16i921R17R18gR19r79R20jR21:5:3r27oR14oR15i913R16i917R17R18gR19r153R20jR21:9:2oR14oR15i913R16i915R17R18gR19r88R20jR21:1:1r87gajR44:2:0hgoR14oR15i920R16i921R17R18gR19r79R20jR21:1:1r77gggghgghgR12ahghy4:varsaoR0y6:cameraR9i-74R5r53R11jR4:12:1aoR0y8:positionR9i-75R5r53R11jR4:5:2i3r16R26r267goR0y3:dirR9i-76R5r22R11jR4:5:2i3r16R26r267ghgr56r33r120r126oR0y19:transformedPositionR9i-84R5r78R11jR4:5:2i3r16gr82r21r5r67hg";
h3d_shader_Shadow.SRC = "oy4:namey17:h3d.shader.Shadowy4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-178R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini395y3:maxi509y4:filey74:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FShadow.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i401R16i503R17R18gR19r3R20jR21:10:3oR14oR15i405R16i414R17R18gR19jR4:2:0R20jR21:6:2jy15:haxe.macro.Unop:2:0oR14oR15i406R16i414R17R18gR19r18R20jR21:1:1oR0y8:perPixelR9i-177R5jR10:2:0R11r18y10:qualifiersajy17:hxsl.VarQualifier:0:1nhgggoR14oR15i417R16i503R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i417R16i426R17R18gR19r31R20jR21:1:1oR0y9:shadowPosR9i-176R5jR10:3:0R11r31R24ajR25:1:0hggoR14oR15i429R16i503R17R18gR19jR4:5:2i3r30R20jR21:5:3jR27:0:0oR14oR15i429R16i483R17R18gR19jR4:5:2i3r30R20jR21:5:3jR27:1:0oR14oR15i429R16i462R17R18gR19jR4:5:2i3r30R20jR21:5:3r47oR14oR15i429R16i448R17R18gR19jR4:5:2i3r30R20jR21:1:1oR0y19:transformedPositionR9i-174R5jR10:4:0R11r53ggoR14oR15i451R16i462R17R18gR19jR4:8:0R20jR21:1:1oR0y4:projR9i-169R5jR10:0:0R11r59y6:parentoR0y6:shadowR9i-167R5r61R11jR4:12:1aoR0y3:mapR9i-168R5r61R11jR4:15:1i1R31r62gr60oR0y5:colorR9i-170R5r61R11jR4:5:2i3r30R31r62goR0y5:powerR9i-171R5r61R11jR4:3:0R31r62goR0y4:biasR9i-172R5r61R11r69R31r62ghggggoR14oR15i465R16i483R17R18gR19jR4:5:2i3r30R20jR21:8:2oR14oR15i465R16i469R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:39:0gaoR14oR15i470R16i473R17R18gR19r69R20jR21:0:1jy10:hxsl.Const:3:1d0.5goR14oR15i475R16i479R17R18gR19r69R20jR21:0:1jR38:3:1d-0.5goR14oR15i481R16i482R17R18gR19r69R20jR21:0:1jR38:3:1i1ghggoR14oR15i486R16i503R17R18gR19jR4:5:2i3r30R20jR21:8:2oR14oR15i486R16i490R17R18gR19r80R20jR21:2:1r81gaoR14oR15i491R16i494R17R18gR19r69R20jR21:0:1jR38:3:1d0.5goR14oR15i496R16i499R17R18gR19r69R20jR21:0:1jR38:3:1d0.5goR14oR15i501R16i502R17R18gR19r69R20jR21:0:1jR38:3:1zghgggnghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-179R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i535R16i1101R17R18gR19r3R20jR21:4:1aoR14oR15i543R16i669R17R18gR19r3R20jR21:7:2oR0R28R9i-180R5r55R11jR4:5:2i3r30goR14oR15i559R16i668R17R18gR19r136R20jR21:10:3oR14oR15i563R16i571R17R18gR19r18R20jR21:1:1r22goR14oR15i574R16i653R17R18gR19r136R20jR21:5:3r43oR14oR15i574R16i633R17R18gR19jR4:5:2i3r30R20jR21:5:3r47oR14oR15i574R16i612R17R18gR19r50R20jR21:5:3r47oR14oR15i574R16i598R17R18gR19jR4:5:2i3r30R20jR21:1:1oR0y24:pixelTransformedPositionR9i-175R5r55R11r151ggoR14oR15i601R16i612R17R18gR19r59R20jR21:1:1r60ggoR14oR15i615R16i633R17R18gR19jR4:5:2i3r30R20jR21:8:2oR14oR15i615R16i619R17R18gR19r80R20jR21:2:1r81gaoR14oR15i620R16i623R17R18gR19r69R20jR21:0:1jR38:3:1d0.5goR14oR15i625R16i629R17R18gR19r69R20jR21:0:1jR38:3:1d-0.5goR14oR15i631R16i632R17R18gR19r69R20jR21:0:1jR38:3:1i1ghggoR14oR15i636R16i653R17R18gR19jR4:5:2i3r30R20jR21:8:2oR14oR15i636R16i640R17R18gR19r80R20jR21:2:1r81gaoR14oR15i641R16i644R17R18gR19r69R20jR21:0:1jR38:3:1d0.5goR14oR15i646R16i649R17R18gR19r69R20jR21:0:1jR38:3:1d0.5goR14oR15i651R16i652R17R18gR19r69R20jR21:0:1jR38:3:1zghggoR14oR15i659R16i668R17R18gR19r31R20jR21:1:1r35gggoR14oR15i676R16i717R17R18gR19r3R20jR21:7:2oR0y5:depthR9i-181R5r55R11r69goR14oR15i688R16i716R17R18gR19r69R20jR21:8:2oR14oR15i688R16i698R17R18gR19jR4:13:1aoR3r69R12aoR0y1:_R11r65goR0y2:uvR11jR4:5:2i2r30ghghR20jR21:2:1jR37:61:0gaoR14oR15i688R16i698R17R18gR19r65R20jR21:1:1r64goR14oR15i703R16i715R17R18gR19jR4:5:2i2r30R20jR21:9:2oR14oR15i703R16i712R17R18gR19r136R20jR21:1:1r135gajy14:hxsl.Component:0:0jR44:1:0hghggoR14oR15i887R16i921R17R18gR19r3R20jR21:7:2oR0y4:zMaxR9i-182R5r55R11r69goR14oR15i898R16i920R17R18gR19r69R20jR21:8:2oR14oR15i898R16i909R17R18gR19jR4:13:1aoR3r69R12aoR0R42R11r69ghghR20jR21:2:1jR37:51:0gaoR14oR15i898R16i909R17R18gR19r69R20jR21:9:2oR14oR15i898R16i907R17R18gR19r136R20jR21:1:1r135gajR44:2:0hghggoR14oR15i926R16i977R17R18gR19r3R20jR21:7:2oR0y5:deltaR9i-183R5r55R11r69goR14oR15i938R16i976R17R18gR19r69R20jR21:5:3jR27:3:0oR14oR15i938R16i969R17R18gR19r69R20jR21:8:2oR14oR15i938R16i959R17R18gR19jR4:13:1aoR3r69R12aoR0R42R11r69goR0y1:bR11r69ghghR20jR21:2:1jR37:21:0gaoR14oR15i938R16i959R17R18gR19r69R20jR21:3:1oR14oR15i939R16i958R17R18gR19r69R20jR21:5:3r43oR14oR15i939R16i944R17R18gR19r69R20jR21:1:1r207goR14oR15i947R16i958R17R18gR19r69R20jR21:1:1r70gggoR14oR15i964R16i968R17R18gR19r69R20jR21:1:1r239ghgoR14oR15i972R16i976R17R18gR19r69R20jR21:1:1r239gggoR14oR15i982R16i1034R17R18gR19r3R20jR21:7:2oR0y5:shadeR9i-184R5r55R11r69goR14oR15i994R16i1033R17R18gR19r69R20jR21:8:2oR14oR15i994R16i1022R17R18gR19jR4:13:1aoR3r69R12aoR0R42R11r69ghghR20jR21:2:1r249gaoR14oR15i994R16i1022R17R18gR19r69R20jR21:8:2oR14oR15i994R16i997R17R18gR19jR4:13:1aoR3r69R12aoR0y5:valueR11r69ghghR20jR21:2:1jR37:9:0gaoR14oR15i999R16i1019R17R18gR19r69R20jR21:5:3r47oR14oR15i999R16i1011R17R18gR19r69R20jR21:1:1r68goR14oR15i1014R16i1019R17R18gR19r69R20jR21:1:1r264gghghggoR14oR15i1039R16i1095R17R18gR19jR4:5:2i3r30R20jR21:5:3jR27:20:1r47oR14oR15i1039R16i1053R17R18gR19r342R20jR21:9:2oR14oR15i1039R16i1049R17R18gR19jR4:5:2i4r30R20jR21:1:1oR0y10:pixelColorR9i-173R5r55R11r348ggar232r233r258hgoR14oR15i1057R16i1095R17R18gR19jR4:5:2i3r30R20jR21:5:3r43oR14oR15i1057R16i1087R17R18gR19r355R20jR21:5:3r47oR14oR15i1057R16i1068R17R18gR19r69R20jR21:3:1oR14oR15i1058R16i1067R17R18gR19r69R20jR21:5:3r267oR14oR15i1058R16i1059R17R18gR19r69R20jR21:0:1jR38:3:1i1goR14oR15i1062R16i1067R17R18gR19r69R20jR21:1:1r304gggoR14oR15i1071R16i1087R17R18gR19r355R20jR21:9:2oR14oR15i1071R16i1083R17R18gR19r67R20jR21:1:1r66gar232r233r258hggoR14oR15i1090R16i1095R17R18gR19r69R20jR21:1:1r304ggghgR12ahghy4:varsar62r349r54r152r35r22r5r125hg";
h3d_shader_Skin.SRC = "oy4:namey15:h3d.shader.Skiny4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-166R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini428y3:maxi1064y4:filey72:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FSkin.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i527R16i777R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i527R16i546R17R18gR19r17R20jR21:1:1oR0y19:transformedPositionR9i-162R5jR10:4:0R11r17ggoR14oR15i554R16i777R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:0:0oR14oR15i554R16i700R17R18gR19jR4:5:2i3r16R20jR21:5:3r27oR14oR15i554R16i623R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:1:0oR14oR15i554R16i605R17R18gR19r33R20jR21:3:1oR14oR15i555R16i604R17R18gR19r33R20jR21:5:3r34oR14oR15i555R16i571R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y16:relativePositionR9i-161R5r22R11r41ggoR14oR15i574R16i604R17R18gR19jR4:8:0R20jR21:16:2oR14oR15i574R16i587R17R18gR19jR4:14:2r46jy13:hxsl.SizeDecl:1:1oR0y8:MaxBonesR9i-164R5jR10:2:0R11jR4:1:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhgR20jR21:1:1oR0y13:bonesMatrixesR9i-165R5r50R11r55R28ajR29:8:0hggoR14oR15i588R16i603R17R18gR19r51R20jR21:9:2oR14oR15i588R16i601R17R18gR19jR4:9:1i4R20jR21:1:1oR0y7:indexesR9i-160R5jR10:1:0R11r64y6:parentoR0y5:inputR9i-156R5r66R11jR4:12:1aoR0y8:positionR9i-157R5r66R11jR4:5:2i3r16R32r67goR0y6:normalR9i-158R5r66R11jR4:5:2i3r16R32r67goR0y7:weightsR9i-159R5r66R11jR4:5:2i3r16R32r67gr65hgggajy14:hxsl.Component:0:0hggggoR14oR15i608R16i623R17R18gR19jR4:3:0R20jR21:9:2oR14oR15i608R16i621R17R18gR19r74R20jR21:1:1r73gar78hggoR14oR15i631R16i700R17R18gR19r33R20jR21:5:3r34oR14oR15i631R16i682R17R18gR19r33R20jR21:3:1oR14oR15i632R16i681R17R18gR19r33R20jR21:5:3r34oR14oR15i632R16i648R17R18gR19r41R20jR21:1:1r42goR14oR15i651R16i681R17R18gR19r46R20jR21:16:2oR14oR15i651R16i664R17R18gR19r55R20jR21:1:1r56goR14oR15i665R16i680R17R18gR19r51R20jR21:9:2oR14oR15i665R16i678R17R18gR19r64R20jR21:1:1r65gajR37:1:0hggggoR14oR15i685R16i700R17R18gR19r85R20jR21:9:2oR14oR15i685R16i698R17R18gR19r74R20jR21:1:1r73gar112hgggoR14oR15i708R16i777R17R18gR19r33R20jR21:5:3r34oR14oR15i708R16i759R17R18gR19r33R20jR21:3:1oR14oR15i709R16i758R17R18gR19r33R20jR21:5:3r34oR14oR15i709R16i725R17R18gR19r41R20jR21:1:1r42goR14oR15i728R16i758R17R18gR19r46R20jR21:16:2oR14oR15i728R16i741R17R18gR19r55R20jR21:1:1r56goR14oR15i742R16i757R17R18gR19r51R20jR21:9:2oR14oR15i742R16i755R17R18gR19r64R20jR21:1:1r65gajR37:2:0hggggoR14oR15i762R16i777R17R18gR19r85R20jR21:9:2oR14oR15i762R16i775R17R18gR19r74R20jR21:1:1r73gar146hggggoR14oR15i783R16i1049R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i783R16i800R17R18gR19r163R20jR21:1:1oR0y17:transformedNormalR9i-163R5r22R11r163ggoR14oR15i803R16i1049R17R18gR19r33R20jR21:8:2oR14oR15i803R16i812R17R18gR19jR4:13:1aoR3r33R12aoR0y5:valueR11r33ghghR20jR21:2:1jy12:hxsl.TGlobal:31:0gaoR14oR15i819R16i1048R17R18gR19jR4:5:2i3r16R20jR21:5:3r27oR14oR15i819R16i969R17R18gR19jR4:5:2i3r16R20jR21:5:3r27oR14oR15i819R16i890R17R18gR19r33R20jR21:5:3r34oR14oR15i819R16i872R17R18gR19r33R20jR21:3:1oR14oR15i820R16i871R17R18gR19r33R20jR21:5:3r34oR14oR15i820R16i832R17R18gR19r72R20jR21:1:1r71goR14oR15i835R16i871R17R18gR19jR4:6:0R20jR21:8:2oR14oR15i835R16i839R17R18gR19jR4:13:1ahR20jR21:2:1jR40:48:0gaoR14oR15i840R16i870R17R18gR19r46R20jR21:16:2oR14oR15i840R16i853R17R18gR19r55R20jR21:1:1r56goR14oR15i854R16i869R17R18gR19r51R20jR21:9:2oR14oR15i854R16i867R17R18gR19r64R20jR21:1:1r65gar78hgghgggoR14oR15i875R16i890R17R18gR19r85R20jR21:9:2oR14oR15i875R16i888R17R18gR19r74R20jR21:1:1r73gar78hggoR14oR15i898R16i969R17R18gR19r33R20jR21:5:3r34oR14oR15i898R16i951R17R18gR19r33R20jR21:3:1oR14oR15i899R16i950R17R18gR19r33R20jR21:5:3r34oR14oR15i899R16i911R17R18gR19r72R20jR21:1:1r71goR14oR15i914R16i950R17R18gR19r197R20jR21:8:2oR14oR15i914R16i918R17R18gR19r201R20jR21:2:1r202gaoR14oR15i919R16i949R17R18gR19r46R20jR21:16:2oR14oR15i919R16i932R17R18gR19r55R20jR21:1:1r56goR14oR15i933R16i948R17R18gR19r51R20jR21:9:2oR14oR15i933R16i946R17R18gR19r64R20jR21:1:1r65gar112hgghgggoR14oR15i954R16i969R17R18gR19r85R20jR21:9:2oR14oR15i954R16i967R17R18gR19r74R20jR21:1:1r73gar112hgggoR14oR15i977R16i1048R17R18gR19r33R20jR21:5:3r34oR14oR15i977R16i1030R17R18gR19r33R20jR21:3:1oR14oR15i978R16i1029R17R18gR19r33R20jR21:5:3r34oR14oR15i978R16i990R17R18gR19r72R20jR21:1:1r71goR14oR15i993R16i1029R17R18gR19r197R20jR21:8:2oR14oR15i993R16i997R17R18gR19r201R20jR21:2:1r202gaoR14oR15i998R16i1028R17R18gR19r46R20jR21:16:2oR14oR15i998R16i1011R17R18gR19r55R20jR21:1:1r56goR14oR15i1012R16i1027R17R18gR19r51R20jR21:9:2oR14oR15i1012R16i1025R17R18gR19r64R20jR21:1:1r65gar146hgghgggoR14oR15i1033R16i1048R17R18gR19r85R20jR21:9:2oR14oR15i1033R16i1046R17R18gR19r74R20jR21:1:1r73gar146hggghgghgR12ahghy4:varsar67r42r21r166r49r56r5hg";
h3d_shader_SpecularTexture.SRC = "oy4:namey26:h3d.shader.SpecularTexturey4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:1:0y3:refoR0y8:fragmenty2:idi-60R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini203y3:maxi257y4:filey83:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FSpecularTexture.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i209R16i251R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:20:1jR23:1:0oR14oR15i209R16i218R17R18gR19r17R20jR21:1:1oR0y9:specColorR9i-59R5jR10:4:0R11r17ggoR14oR15i222R16i251R17R18gR19jR4:5:2i3r16R20jR21:9:2oR14oR15i222R16i247R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i222R16i229R17R18gR19jR4:13:1aoR3r30R12aoR0y1:_R11jR4:10:0goR0y2:uvR11jR4:5:2i2r16ghghR20jR21:2:1jy12:hxsl.TGlobal:33:0gaoR14oR15i222R16i229R17R18gR19r37R20jR21:1:1oR0y7:textureR9i-57R5jR10:2:0R11r37ggoR14oR15i234R16i246R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y12:calculatedUVR9i-58R5r23R11r51gghgajy14:hxsl.Component:0:0jR30:1:0jR30:2:0hgghgR12ahghy4:varsar46r52r22r5hg";
h3d_shader_Texture.SRC = "oy4:namey18:h3d.shader.Texturey4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-71R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini425y3:maxi460y4:filey75:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FTexture.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i431R16i454R17R18gR19jR4:5:2i2jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i431R16i443R17R18gR19r17R20jR21:1:1oR0y12:calculatedUVR9i-68R5jR10:4:0R11r17ggoR14oR15i446R16i454R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y2:uvR9i-62R5jR10:1:0R11r26y6:parentoR0y5:inputR9i-61R5r28R11jR4:12:1ar27hgggghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-72R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i486R16i713R17R18gR19r3R20jR21:4:1aoR14oR15i492R16i526R17R18gR19r3R20jR21:7:2oR0y1:cR9i-73R5r22R11jR4:5:2i4r16goR14oR15i500R16i525R17R18gR19r49R20jR21:8:2oR14oR15i500R16i507R17R18gR19jR4:13:1aoR3r49R12aoR0y1:_R11jR4:10:0goR0R25R11jR4:5:2i2r16ghghR20jR21:2:1jy12:hxsl.TGlobal:33:0gaoR14oR15i500R16i507R17R18gR19r58R20jR21:1:1oR0y7:textureR9i-67R5jR10:2:0R11r58ggoR14oR15i512R16i524R17R18gR19r17R20jR21:1:1r21ghggoR14oR15i531R16i586R17R18gR19r3R20jR21:10:3oR14oR15i535R16i576R17R18gR19jR4:2:0R20jR21:5:3jR23:14:0oR14oR15i535R16i544R17R18gR19r79R20jR21:1:1oR0y9:killAlphaR9i-64R5r68R11r79y10:qualifiersajy17:hxsl.VarQualifier:0:1nhggoR14oR15i548R16i576R17R18gR19r79R20jR21:5:3jR23:9:0oR14oR15i548R16i572R17R18gR19jR4:3:0R20jR21:5:3jR23:3:0oR14oR15i548R16i551R17R18gR19r92R20jR21:9:2oR14oR15i548R16i549R17R18gR19r49R20jR21:1:1r48gajy14:hxsl.Component:3:0hgoR14oR15i554R16i572R17R18gR19r92R20jR21:1:1oR0y18:killAlphaThresholdR9i-66R5r68R11r92R34ajR35:7:2d0d1hgggoR14oR15i575R16i576R17R18gR19r92R20jR21:0:1jy10:hxsl.Const:3:1zgggoR14oR15i579R16i586R17R18gR19r3R20jR21:11:0gngoR14oR15i592R16i658R17R18gR19r3R20jR21:10:3oR14oR15i596R16i604R17R18gR19r79R20jR21:1:1oR0y8:additiveR9i-63R5r68R11r79R34ajR35:0:1nhggoR14oR15i612R16i627R17R18gR19jR4:5:2i4r16R20jR21:5:3jR23:20:1jR23:0:0oR14oR15i612R16i622R17R18gR19r129R20jR21:1:1oR0y10:pixelColorR9i-69R5r22R11r129ggoR14oR15i626R16i627R17R18gR19r49R20jR21:1:1r48ggoR14oR15i643R16i658R17R18gR19r129R20jR21:5:3jR23:20:1jR23:1:0oR14oR15i643R16i653R17R18gR19r129R20jR21:1:1r134goR14oR15i657R16i658R17R18gR19r49R20jR21:1:1r48gggoR14oR15i664R16i707R17R18gR19r3R20jR21:10:3oR14oR15i668R16i681R17R18gR19r79R20jR21:1:1oR0y13:specularAlphaR9i-65R5r68R11r79R34ajR35:0:1nhggoR14oR15i689R16i707R17R18gR19jR4:5:2i3r16R20jR21:5:3jR23:20:1r142oR14oR15i689R16i698R17R18gR19r162R20jR21:1:1oR0y9:specColorR9i-70R5r22R11r162ggoR14oR15i702R16i707R17R18gR19jR4:5:2i3r16R20jR21:9:2oR14oR15i702R16i703R17R18gR19r49R20jR21:1:1r48gar100r100r100hggnghgR12ahghy4:varsar29r123r83r156r104r67r21r134r166r5r38hg";
h3d_shader_UVDelta.SRC = "oy4:namey18:h3d.shader.UVDeltay4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-242R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini191y3:maxi250y4:filey75:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FUVDelta.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i197R16i244R17R18gR19jR4:5:2i2jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i197R16i209R17R18gR19r17R20jR21:1:1oR0y12:calculatedUVR9i-241R5jR10:4:0R11r17ggoR14oR15i212R16i244R17R18gR19jR4:5:2i2r16R20jR21:5:3jR23:0:0oR14oR15i212R16i234R17R18gR19jR4:5:2i2r16R20jR21:5:3jR23:1:0oR14oR15i212R16i224R17R18gR19r17R20jR21:1:1r21goR14oR15i227R16i234R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y7:uvScaleR9i-240R5jR10:2:0R11r37gggoR14oR15i237R16i244R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y7:uvDeltaR9i-239R5r39R11r44gggghgR12ahghy4:varsar45r38r21r5hg";
h3d_shader_VertexColorAlpha.SRC = "oy4:namey27:h3d.shader.VertexColorAlphay4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:1:0y3:refoR0y8:fragmenty2:idi-238R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini227y3:maxi325y4:filey84:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FVertexColorAlpha.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i233R16i319R17R18gR19r3R20jR21:10:3oR14oR15i237R16i245R17R18gR19jR4:2:0R20jR21:1:1oR0y8:additiveR9i-237R5jR10:2:0R11r18y10:qualifiersajy17:hxsl.VarQualifier:0:1nhggoR14oR15i253R16i278R17R18gR19jR4:5:2i4jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:20:1jR26:0:0oR14oR15i253R16i263R17R18gR19r27R20jR21:1:1oR0y10:pixelColorR9i-236R5jR10:4:0R11r27ggoR14oR15i267R16i278R17R18gR19jR4:5:2i4r26R20jR21:1:1oR0y5:colorR9i-235R5jR10:1:0R11r37y6:parentoR0y5:inputR9i-234R5r39R11jR4:12:1ar38hggggoR14oR15i294R16i319R17R18gR19r27R20jR21:5:3jR26:20:1jR26:1:0oR14oR15i294R16i304R17R18gR19r27R20jR21:1:1r32goR14oR15i308R16i319R17R18gR19r37R20jR21:1:1r38ggghgR12ahghy4:varsar40r32r19r5hg";
h3d_shader_VolumeDecal.SRC = "oy4:namey22:h3d.shader.VolumeDecaly4:funsaoy3:retjy9:hxsl.Type:0:0y4:kindjy17:hxsl.FunctionKind:0:0y3:refoR0y6:vertexy2:idi-226R5jy12:hxsl.VarKind:6:0y4:typejR4:13:1aoR3r3y4:argsahghgy4:exproy1:poy3:mini259y3:maxi297y4:filey79:W%3A%5Cprojects%5ChaxeTools%5Clib%5Cheaps%2Fgit%2Fh3d%2Fshader%2FVolumeDecal.hxgy1:tr3y1:ejy13:hxsl.TExprDef:4:1aoR14oR15i265R16i291R17R18gR19jR4:5:2i3jy12:hxsl.VecType:1:0R20jR21:5:3jy16:haxe.macro.Binop:4:0oR14oR15i265R16i282R17R18gR19r17R20jR21:1:1oR0y17:transformedNormalR9i-211R5jR10:4:0R11r17ggoR14oR15i285R16i291R17R18gR19jR4:5:2i3r16R20jR21:1:1oR0y6:normalR9i-224R5jR10:2:0R11r26ggghgR12ahgoR3r3R5jR6:1:0R7oR0y8:fragmentR9i-227R5r6R11jR4:13:1aoR3r3R12ahghgR13oR14oR15i323R16i888R17R18gR19r3R20jR21:4:1aoR14oR15i329R16i391R17R18gR19r3R20jR21:7:2oR0y6:matrixR9i-228R5r22R11jR4:7:0goR14oR15i342R16i390R17R18gR19r46R20jR21:5:3jR23:1:0oR14oR15i342R16i364R17R18gR19r46R20jR21:1:1oR0y15:inverseViewProjR9i-191R5jR10:0:0R11r46y6:parentoR0y6:cameraR9i-185R5r53R11jR4:12:1aoR0y4:viewR9i-186R5r53R11r46R29r54goR0y4:projR9i-187R5r53R11r46R29r54goR0y8:positionR9i-188R5r53R11jR4:5:2i3r16R29r54goR0y8:projDiagR9i-189R5r53R11jR4:5:2i3r16R29r54goR0y8:viewProjR9i-190R5r53R11r46R29r54gr52oR0y5:zNearR9i-192R5r53R11jR4:3:0R29r54goR0y4:zFarR9i-193R5r53R11r64R29r54goR0y3:dirR9i-194R5jR10:3:0R11jR4:5:2i3r16R29r54ghgggoR14oR15i367R16i390R17R18gR19r46R20jR21:1:1oR0y16:modelViewInverseR9i-199R5r53R11r46y10:qualifiersajy17:hxsl.VarQualifier:3:0hR29oR0y6:globalR9i-195R5r53R11jR4:12:1aoR0y4:timeR9i-196R5r53R11r64R29r76goR0y9:pixelSizeR9i-197R5r53R11jR4:5:2i2r16R29r76goR0y9:modelViewR9i-198R5r53R11r46R40ar75hR29r76gr73hgggggoR14oR15i396R16i455R17R18gR19r3R20jR21:7:2oR0y9:screenPosR9i-229R5r22R11jR4:5:2i2r16goR14oR15i412R16i454R17R18gR19r90R20jR21:5:3jR23:2:0oR14oR15i412R16i432R17R18gR19r90R20jR21:9:2oR14oR15i412R16i429R17R18gR19jR4:5:2i4r16R20jR21:1:1oR0y17:projectedPositionR9i-212R5r22R11r98ggajy14:hxsl.Component:0:0jR48:1:0hgoR14oR15i435R16i454R17R18gR19r64R20jR21:9:2oR14oR15i435R16i452R17R18gR19r98R20jR21:1:1r99gajR48:3:0hgggoR14oR15i460R16i515R17R18gR19r3R20jR21:7:2oR0y3:tuvR9i-230R5r22R11jR4:5:2i2r16goR14oR15i470R16i514R17R18gR19r118R20jR21:5:3jR23:0:0oR14oR15i470R16i497R17R18gR19jR4:5:2i2r16R20jR21:5:3r49oR14oR15i470R16i479R17R18gR19r90R20jR21:1:1r89goR14oR15i482R16i497R17R18gR19jR4:5:2i2r16R20jR21:8:2oR14oR15i482R16i486R17R18gR19jR4:13:1ahR20jR21:2:1jy12:hxsl.TGlobal:38:0gaoR14oR15i487R16i490R17R18gR19r64R20jR21:0:1jy10:hxsl.Const:3:1d0.5goR14oR15i492R16i496R17R18gR19r64R20jR21:0:1jR51:3:1d-0.5ghggoR14oR15i500R16i514R17R18gR19jR4:5:2i2r16R20jR21:8:2oR14oR15i500R16i504R17R18gR19r134R20jR21:2:1r135gaoR14oR15i505R16i508R17R18gR19r64R20jR21:0:1jR51:3:1d0.5goR14oR15i510R16i513R17R18gR19r64R20jR21:0:1jR51:3:1d0.5ghgggoR14oR15i520R16i597R17R18gR19r3R20jR21:7:2oR0y3:ruvR9i-231R5r22R11jR4:5:2i4r16goR14oR15i530R16i596R17R18gR19r169R20jR21:8:2oR14oR15i530R16i534R17R18gR19jR4:13:1ahR20jR21:2:1jR50:40:0gaoR14oR15i541R16i550R17R18gR19r90R20jR21:1:1r89goR14oR15i557R16i582R17R18gR19r64R20jR21:8:2oR14oR15i557R16i563R17R18gR19jR4:13:1aoR3r64R12aoR0y5:valueR11jR4:5:2i4r16ghghR20jR21:2:1jR50:53:0gaoR14oR15i564R16i581R17R18gR19jR4:5:2i4r16R20jR21:8:2oR14oR15i564R16i572R17R18gR19jR4:13:1aoR3r197R12aoR0y1:_R11jR4:10:0goR0y2:uvR11jR4:5:2i2r16ghghR20jR21:2:1jR50:33:0gaoR14oR15i564R16i572R17R18gR19r204R20jR21:1:1oR0y8:depthMapR9i-222R5r53R11r204ggoR14oR15i577R16i580R17R18gR19r118R20jR21:1:1r117ghghgoR14oR15i589R16i590R17R18gR19r64R20jR21:0:1jR51:3:1i1ghggoR14oR15i602R16i626R17R18gR19r3R20jR21:7:2oR0y4:wposR9i-232R5r22R11r197goR14oR15i613R16i625R17R18gR19r197R20jR21:5:3r49oR14oR15i613R16i616R17R18gR19r169R20jR21:1:1r168goR14oR15i619R16i625R17R18gR19r46R20jR21:1:1r45gggoR14oR15i631R16i671R17R18gR19r3R20jR21:7:2oR0y4:pposR9i-233R5r22R11r197goR14oR15i642R16i670R17R18gR19r197R20jR21:5:3r49oR14oR15i642R16i645R17R18gR19r169R20jR21:1:1r168goR14oR15i648R16i670R17R18gR19r46R20jR21:1:1r52gggoR14oR15i676R16i720R17R18gR19jR4:5:2i3r16R20jR21:5:3r18oR14oR15i676R16i700R17R18gR19r254R20jR21:1:1oR0y24:pixelTransformedPositionR9i-210R5r22R11r254ggoR14oR15i703R16i720R17R18gR19jR4:5:2i3r16R20jR21:5:3r93oR14oR15i703R16i711R17R18gR19r261R20jR21:9:2oR14oR15i703R16i707R17R18gR19r197R20jR21:1:1r241gar102r103jR48:2:0hgoR14oR15i714R16i720R17R18gR19r64R20jR21:9:2oR14oR15i714R16i718R17R18gR19r197R20jR21:1:1r241gar111hgggoR14oR15i726R16i773R17R18gR19jR4:5:2i2r16R20jR21:5:3r18oR14oR15i726R16i738R17R18gR19r281R20jR21:1:1oR0y12:calculatedUVR9i-225R5r22R11r281ggoR14oR15i741R16i773R17R18gR19jR4:5:2i2r16R20jR21:5:3r121oR14oR15i741R16i767R17R18gR19r288R20jR21:5:3r49oR14oR15i741R16i746R17R18gR19jR4:5:2i2r16R20jR21:1:1oR0y5:scaleR9i-223R5r28R11r293ggoR14oR15i749R16i767R17R18gR19jR4:5:2i2r16R20jR21:3:1oR14oR15i750R16i766R17R18gR19r298R20jR21:5:3r93oR14oR15i750R16i757R17R18gR19r298R20jR21:9:2oR14oR15i750R16i754R17R18gR19r197R20jR21:1:1r228gar102r103hgoR14oR15i760R16i766R17R18gR19r64R20jR21:9:2oR14oR15i760R16i764R17R18gR19r197R20jR21:1:1r228gar111hggggoR14oR15i770R16i773R17R18gR19r64R20jR21:0:1jR51:3:1d0.5gggoR14oR15i779R16i882R17R18gR19r3R20jR21:10:3oR14oR15i783R16i872R17R18gR19jR4:2:0R20jR21:5:3jR23:9:0oR14oR15i783R16i868R17R18gR19r64R20jR21:8:2oR14oR15i783R16i786R17R18gR19jR4:13:1aoR3r64R12aoR0y1:aR11r64goR0y1:bR11r64ghghR20jR21:2:1jR50:21:0gaoR14oR15i787R16i822R17R18gR19r64R20jR21:8:2oR14oR15i787R16i790R17R18gR19jR4:13:1ar335hR20jR21:2:1r340gaoR14oR15i791R16i805R17R18gR19r64R20jR21:9:2oR14oR15i791R16i803R17R18gR19r281R20jR21:1:1r284gar102hgoR14oR15i807R16i821R17R18gR19r64R20jR21:9:2oR14oR15i807R16i819R17R18gR19r281R20jR21:1:1r284gar103hghgoR14oR15i824R16i867R17R18gR19r64R20jR21:8:2oR14oR15i824R16i827R17R18gR19jR4:13:1ar335hR20jR21:2:1r340gaoR14oR15i828R16i846R17R18gR19r64R20jR21:5:3jR23:3:0oR14oR15i828R16i829R17R18gR19r64R20jR21:0:1jR51:3:1i1goR14oR15i832R16i846R17R18gR19r64R20jR21:9:2oR14oR15i832R16i844R17R18gR19r281R20jR21:1:1r284gar102hggoR14oR15i848R16i866R17R18gR19r64R20jR21:5:3r376oR14oR15i848R16i849R17R18gR19r64R20jR21:0:1jR51:3:1i1goR14oR15i852R16i866R17R18gR19r64R20jR21:9:2oR14oR15i852R16i864R17R18gR19r281R20jR21:1:1r284gar103hgghghgoR14oR15i871R16i872R17R18gR19r64R20jR21:0:1jR51:3:1zggoR14oR15i875R16i882R17R18gR19r3R20jR21:11:0gnghgR12ahghy4:varsar54r76oR0y5:inputR9i-200R5jR10:1:0R11jR4:12:1aoR0R33R9i-201R5r418R11jR4:5:2i3r16R29r417goR0R25R9i-202R5r418R11jR4:5:2i3r16R29r417ghgoR0y6:outputR9i-203R5r22R11jR4:12:1aoR0R33R9i-204R5r22R11jR4:5:2i4r16R29r425goR0y5:colorR9i-205R5r22R11jR4:5:2i4r16R29r425goR0y5:depthR9i-206R5r22R11r64R29r425goR0R25R9i-207R5r22R11jR4:5:2i3r16R29r425ghgoR0y16:relativePositionR9i-208R5r22R11jR4:5:2i3r16goR0y19:transformedPositionR9i-209R5r22R11jR4:5:2i3r16gr257r21r99oR0y10:pixelColorR9i-213R5r22R11jR4:5:2i4r16goR0R68R9i-214R5r22R11r64goR0y8:screenUVR9i-215R5r22R11jR4:5:2i2r16goR0y9:specPowerR9i-216R5r22R11r64goR0y9:specColorR9i-217R5r22R11jR4:5:2i3r16gr213r294r27r284r5r35hg";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.oldTime = new Date().getTime() / 1000;
hxd_Timer.tmod_factor = 0.95;
hxd_Timer.calc_tmod = 1;
hxd_Timer.tmod = 1;
hxd_Timer.deltaT = 1;
hxd_Timer.frameCount = 0;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_impl_Memory.stack = [];
hxd_impl_Memory.inst = new hxd_impl_MemoryReader();
hxd_impl_Tmp.bytes = [];
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxd_snd_openal_Source.CHANNEL_BUFSIZE = 4096;
hxd_snd_openal_Source.ID = 0;
hxd_snd_openal_Source.all = new haxe_ds_IntMap();
hxd_snd_openal_Buffer.ID = 0;
hxd_snd_openal_Buffer.all = new haxe_ds_IntMap();
hxd_snd_openal_Emulator.NATIVE_FREQ = (hxd_snd_NativeChannel.getContext() == null ? 44100 : hxd_snd_NativeChannel.getContext().sampleRate) | 0;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__;
hxsl_Tools.MAX_CHANNELS_BITS = 3;
js_Boot.__toStr = ({ }).toString;
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			if(__map_reserved[k] != null) {
				_g.setReserved(k,true);
			} else {
				_g.h[k] = true;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.Texture2D,"_texture2D");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			var _this = hxsl_GlslOut.KWDS;
			if(__map_reserved[g2] != null) {
				_this.setReserved(g2,true);
			} else {
				_this.h[g2] = true;
			}
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
mt_Cooldown.__meta__ = { obj : { indexes : ["transition","stun","reloading","moveLock","braking","invalidateHud","ctrlLock","intro","lockNext","decay","entering","dodgeHero","hitGround","bleeding","bleedFx","bodyHit","bodyDmg","emitterLife","emitterTick","envInit","env","timer","warn","say","flash","spot","lazer"]}};
mt_deepnight_Tweenie.DEFAULT_DURATION = 1000.0;
mt_heaps_slib_SpriteLib.DT = NaN;
mt_heaps_slib_assets_Atlas.CACHE_ANIMS = [];
stb_format_vorbis_VorbisDecodeState.INVALID_BITS = -1;
stb_format_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
{
	Boot.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
